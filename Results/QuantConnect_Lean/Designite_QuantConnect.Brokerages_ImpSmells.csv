Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The method has 138 lines of code.
Long Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The method has 138 lines of code.
Long Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The method has 120 lines of code.
Long Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The method has 132 lines of code.
Long Method,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,Equals,The method has 176 lines of code.
Long Method,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,Equals,The method has 161 lines of code.
Long Method,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,Equals,The method has 131 lines of code.
Long Method,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,Equals,The method has 116 lines of code.
Long Method,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,Equals,The method has 116 lines of code.
Long Method,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,Equals,The method has 141 lines of code.
Long Method,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,Equals,The method has 136 lines of code.
Long Method,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,Equals,The method has 126 lines of code.
Long Method,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,Equals,The method has 101 lines of code.
Long Method,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,Equals,The method has 106 lines of code.
Long Method,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,Equals,The method has 136 lines of code.
Long Method,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,Equals,The method has 121 lines of code.
Long Method,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,Equals,The method has 106 lines of code.
Long Method,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,Equals,The method has 111 lines of code.
Long Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The method has 114 lines of code.
Long Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The method has 126 lines of code.
Complex Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,OnExecutionReport,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Stop,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PlaceOrder,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,Cyclomatic complexity of the method is 19
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,Cyclomatic complexity of the method is 19
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,Cyclomatic complexity of the method is 11
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,Cyclomatic complexity of the method is 14
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,Cyclomatic complexity of the method is 13
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,Cyclomatic complexity of the method is 12
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,Cyclomatic complexity of the method is 12
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,Cyclomatic complexity of the method is 9
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,Cyclomatic complexity of the method is 10
Complex Method,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,Cyclomatic complexity of the method is 12
Complex Method,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,PrepareRequest,Cyclomatic complexity of the method is 8
Complex Method,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ProcessPotentiallyUpdatedOrder,Cyclomatic complexity of the method is 9
Long Parameter List,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,BaseWebsocketsBrokerage,The method has 7 parameters. Parameters: wssUrl' websocket' restClient' apiKey' apiSecret' market' name
Long Parameter List,QuantConnect.Brokerages,ISymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\ISymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,FxcmBrokerage,The method has 7 parameters. Parameters: orderProvider' securityProvider' server' terminal' userName' password' accountId
Long Parameter List,QuantConnect.Brokerages.Fxcm,FxcmSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.Brokerages.GDAX,BestBidAskUpdatedEventArgs,C:\repos\QuantConnect_Lean\Brokerages\GDAX\BestBidAskUpdatedEventArgs.cs,BestBidAskUpdatedEventArgs,The method has 5 parameters. Parameters: symbol' bestBidPrice' bestBidSize' bestAskPrice' bestAskSize
Long Parameter List,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GDAXBrokerage,The method has 7 parameters. Parameters: wssUrl' websocket' restClient' apiKey' apiSecret' passPhrase' algorithm
Long Parameter List,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,EmitQuoteTick,The method has 5 parameters. Parameters: symbol' bidPrice' bidSize' askPrice' askSize
Long Parameter List,QuantConnect.Brokerages.GDAX,GDAXDataQueueHandler,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXDataQueueHandler.cs,GDAXDataQueueHandler,The method has 7 parameters. Parameters: wssUrl' websocket' restClient' apiKey' apiSecret' passPhrase' algorithm
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,AccountSummaryEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\AccountSummaryEventArgs.cs,AccountSummaryEventArgs,The method has 5 parameters. Parameters: requestId' account' tag' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,PnlSingleEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\PnlSingleEventArgs.cs,PnlSingleEventArgs,The method has 5 parameters. Parameters: reqId' pos' dailyPnL' unrealizedPnL' value
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,HistoricalNewsEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\HistoricalNewsEventArgs.cs,HistoricalNewsEventArgs,The method has 5 parameters. Parameters: requestId' time' providerCode' articleId' headline
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,TickNewsEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\TickNewsEventArgs.cs,TickNewsEventArgs,The method has 6 parameters. Parameters: tickerId' timeStamp' providerCode' articleId' headline' extraData
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,SecurityDefinitionOptionParameterEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\SecurityDefinitionOptionParameterEventArgs.cs,SecurityDefinitionOptionParameterEventArgs,The method has 7 parameters. Parameters: reqId' exchange' underlyingConId' tradingClass' multiplier' expirations' strikes
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,OrderStatusEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\OrderStatusEventArgs.cs,OrderStatusEventArgs,The method has 10 parameters. Parameters: orderId' status' filled' remaining' averageFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,AccountUpdateMultiEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\AccountUpdateMultiEventArgs.cs,AccountUpdateMultiEventArgs,The method has 6 parameters. Parameters: requestId' account' modelCode' key' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,RealtimeBarEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\RealtimeBarEventArgs.cs,RealtimeBarEventArgs,The method has 9 parameters. Parameters: requestId' time' open' high' low' close' volume' wap' count
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,PositionMultiEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\PositionMultiEventArgs.cs,PositionMultiEventArgs,The method has 6 parameters. Parameters: requestId' account' modelCode' contract' pos' avgCost
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,TickEfpEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\TickEfpEventArgs.cs,TickEfpEventArgs,The method has 9 parameters. Parameters: tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' dividendsToExpiry
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,TickOptionComputationEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\TickOptionComputationEventArgs.cs,TickOptionComputationEventArgs,The method has 10 parameters. Parameters: tickerId' field' impliedVolatility' delta' optionPrice' pvDividend' gamma' vega' theta' underlyingPrice
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,UpdateMarketDepthEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\UpdateMarketDepthEventArgs.cs,UpdateMarketDepthEventArgs,The method has 6 parameters. Parameters: tickerId' position' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,UpdateMarketDepthLevel2EventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\UpdateMarketDepthLevel2EventArgs.cs,UpdateMarketDepthLevel2EventArgs,The method has 7 parameters. Parameters: tickerId' position' marketMaker' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,ScannerDataEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\ScannerDataEventArgs.cs,ScannerDataEventArgs,The method has 7 parameters. Parameters: reqId' rank' contractDetails' distance' benchmark' projection' legsStr
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,UpdatePortfolioEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\UpdatePortfolioEventArgs.cs,UpdatePortfolioEventArgs,The method has 8 parameters. Parameters: contract' position' marketPrice' marketValue' averageCost' unrealisedPnl' realisedPnl' accountName
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickEFP,The method has 9 parameters. Parameters: tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' dividendsToExpiry
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickOptionComputation,The method has 10 parameters. Parameters: tickerId' field' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' undPrice
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,accountSummary,The method has 5 parameters. Parameters: reqId' account' tag' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updatePortfolio,The method has 8 parameters. Parameters: contract' position' marketPrice' marketValue' averageCost' unrealisedPnl' realisedPnl' accountName
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,orderStatus,The method has 10 parameters. Parameters: orderId' status' filled' remaining' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updateMktDepth,The method has 6 parameters. Parameters: tickerId' position' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updateMktDepthL2,The method has 7 parameters. Parameters: tickerId' position' marketMaker' operation' side' price' size
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,realtimeBar,The method has 9 parameters. Parameters: reqId' time' open' high' low' close' volume' wap' count
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,scannerData,The method has 7 parameters. Parameters: reqId' rank' contractDetails' distance' benchmark' projection' legsStr
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,positionMulti,The method has 6 parameters. Parameters: requestId' account' modelCode' contract' pos' avgCost
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,accountUpdateMulti,The method has 6 parameters. Parameters: requestId' account' modelCode' key' value' currency
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,securityDefinitionOptionParameter,The method has 7 parameters. Parameters: reqId' exchange' underlyingConId' tradingClass' multiplier' expirations' strikes
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickNews,The method has 6 parameters. Parameters: tickerId' timeStamp' providerCode' articleId' headline' extraData
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,historicalNews,The method has 5 parameters. Parameters: requestId' time' providerCode' articleId' headline
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,pnlSingle,The method has 5 parameters. Parameters: reqId' pos' dailyPnL' unrealizedPnL' value
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,InteractiveBrokersBrokerage,The method has 7 parameters. Parameters: algorithm' orderProvider' securityProvider' account' host' port' agentDescription
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetExecutions,The method has 5 parameters. Parameters: symbol' type' exchange' timeSince' side
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The method has 8 parameters. Parameters: request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' dataType
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Start,The method has 6 parameters. Parameters: ibControllerDirectory' twsDirectory' userId' password' tradingMode' useTws
Long Parameter List,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,OandaRestApiBase,The method has 7 parameters. Parameters: symbolMapper' orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,OandaRestApiV1,The method has 7 parameters. Parameters: symbolMapper' orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetCandles,The method has 5 parameters. Parameters: oandaSymbol' startUtc' barsPerRequest' resolution' candleFormat
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,OandaRestApiV20,The method has 7 parameters. Parameters: symbolMapper' orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,OandaBrokerage,The method has 6 parameters. Parameters: orderProvider' securityProvider' environment' accessToken' accountId' agent
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,DownloadTradeBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,DownloadQuoteBars,The method has 5 parameters. Parameters: symbol' startTimeUtc' endTimeUtc' resolution' requestedTimeZone
Long Parameter List,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,GetLeanSymbol,The method has 6 parameters. Parameters: brokerageSymbol' securityType' market' expirationDate' strike' optionRight
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePosition,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTrade,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandles,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPrices,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRange,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrders,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTrades,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactions,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrders,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricing,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsync,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsync,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsync,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsync,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsync,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsync,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,IDefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePosition,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsync,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTrade,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandles,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsync,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The method has 13 parameters. Parameters: authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPrices,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsync,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRange,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsync,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The method has 6 parameters. Parameters: authorization' accountID' from' to' acceptDatetimeFormat' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrders,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTrades,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsync,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The method has 8 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactions,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsync,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The method has 7 parameters. Parameters: authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensions,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrders,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsync,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricing,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsync,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The method has 5 parameters. Parameters: authorization' accountID' instruments' acceptDatetimeFormat' snapshot
Long Parameter List,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The method has 5 parameters. Parameters: authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat
Long Parameter List,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,PrepareRequest,The method has 9 parameters. Parameters: path' method' queryParams' postBody' headerParams' formParams' fileParams' pathParams' contentType
Long Parameter List,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,CallApi,The method has 9 parameters. Parameters: path' method' queryParams' postBody' headerParams' formParams' fileParams' pathParams' contentType
Long Parameter List,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,CallApiAsync,The method has 9 parameters. Parameters: path' method' queryParams' postBody' headerParams' formParams' fileParams' pathParams' contentType
Long Parameter List,Oanda.RestV20.Client,Configuration,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\Configuration.cs,Configuration,The method has 11 parameters. Parameters: apiClient' defaultHeader' username' password' accessToken' apiKey' apiKeyPrefix' tempFolderPath' dateTimeFormat' timeout' userAgent
Long Parameter List,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,Account,The method has 34 parameters. Parameters: Id' Alias' Currency' Balance' CreatedByUserID' CreatedTime' Pl' ResettablePL' ResettabledPLTime' MarginRate' MarginCallEnterTime' MarginCallExtensionCount' LastMarginCallExtensionTime' OpenTradeCount' OpenPositionCount' PendingOrderCount' HedgingEnabled' UnrealizedPL' NAV' MarginUsed' MarginAvailable' PositionValue' MarginCloseoutUnrealizedPL' MarginCloseoutNAV' MarginCloseoutMarginUsed' MarginCloseoutPercent' MarginCloseoutPositionValue' WithdrawalLimit' MarginCallMarginUsed' MarginCallPercent' LastTransactionID' Trades' Positions' Orders
Long Parameter List,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,AccountChanges,The method has 9 parameters. Parameters: OrdersCreated' OrdersCancelled' OrdersFilled' OrdersTriggered' TradesOpened' TradesReduced' TradesClosed' Positions' Transactions
Long Parameter List,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,AccountChangesState,The method has 16 parameters. Parameters: UnrealizedPL' NAV' MarginUsed' MarginAvailable' PositionValue' MarginCloseoutUnrealizedPL' MarginCloseoutNAV' MarginCloseoutMarginUsed' MarginCloseoutPercent' MarginCloseoutPositionValue' WithdrawalLimit' MarginCallMarginUsed' MarginCallPercent' Orders' Trades' Positions
Long Parameter List,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,AccountSummary,The method has 31 parameters. Parameters: Id' Alias' Currency' Balance' CreatedByUserID' CreatedTime' Pl' ResettablePL' ResettabledPLTime' MarginRate' MarginCallEnterTime' MarginCallExtensionCount' LastMarginCallExtensionTime' OpenTradeCount' OpenPositionCount' PendingOrderCount' HedgingEnabled' UnrealizedPL' NAV' MarginUsed' MarginAvailable' PositionValue' MarginCloseoutUnrealizedPL' MarginCloseoutNAV' MarginCloseoutMarginUsed' MarginCloseoutPercent' MarginCloseoutPositionValue' WithdrawalLimit' MarginCallMarginUsed' MarginCallPercent' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,Candlestick,The method has 6 parameters. Parameters: Time' Bid' Ask' Mid' Volume' Complete
Long Parameter List,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,ClientConfigureRejectTransaction,The method has 10 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Alias' MarginRate' RejectReason
Long Parameter List,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,ClientConfigureTransaction,The method has 9 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Alias' MarginRate
Long Parameter List,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,CloseTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,CreateTransaction,The method has 12 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' DivisionID' SiteID' AccountUserID' AccountNumber' HomeCurrency
Long Parameter List,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,DailyFinancingTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Financing' AccountBalance' AccountFinancingMode' PositionFinancings
Long Parameter List,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,DelayedTradeClosureTransaction,The method has 9 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Reason' TradeIDs
Long Parameter List,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,InlineResponse20014,The method has 8 parameters. Parameters: LongOrderCreateTransaction' LongOrderFillTransaction' LongOrderCancelTransaction' ShortOrderCreateTransaction' ShortOrderFillTransaction' ShortOrderCancelTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,InlineResponse20017,The method has 7 parameters. Parameters: From' To' PageSize' Type' Count' Pages' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse20026,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,InlineResponse20026,The method has 5 parameters. Parameters: OrderCreateTransaction' OrderFillTransaction' OrderCancelTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The method has 12 parameters. Parameters: TakeProfitOrderCancelTransaction' TakeProfitOrderTransaction' TakeProfitOrderFillTransaction' TakeProfitOrderCreatedCancelTransaction' StopLossOrderCancelTransaction' StopLossOrderTransaction' StopLossOrderFillTransaction' StopLossOrderCreatedCancelTransaction' TrailingStopLossOrderCancelTransaction' TrailingStopLossOrderTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,InlineResponse201,The method has 7 parameters. Parameters: OrderCreateTransaction' OrderFillTransaction' OrderCancelTransaction' OrderReissueTransaction' OrderReissueRejectTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,InlineResponse2011,The method has 8 parameters. Parameters: OrderCancelTransaction' OrderCreateTransaction' OrderFillTransaction' OrderReissueTransaction' OrderReissueRejectTransaction' ReplacingOrderCancelTransaction' RelatedTransactionIDs' LastTransactionID
Long Parameter List,Oanda.RestV20.Model,InlineResponse4001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,InlineResponse4001,The method has 5 parameters. Parameters: OrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,InlineResponse4002,The method has 5 parameters. Parameters: OrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,InlineResponse4003,The method has 5 parameters. Parameters: OrderClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,InlineResponse4004,The method has 6 parameters. Parameters: LongOrderRejectTransaction' ShortOrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,InlineResponse4006,The method has 5 parameters. Parameters: TradeClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The method has 10 parameters. Parameters: TakeProfitOrderCancelRejectTransaction' TakeProfitOrderRejectTransaction' StopLossOrderCancelRejectTransaction' StopLossOrderRejectTransaction' TrailingStopLossOrderCancelRejectTransaction' TrailingStopLossOrderRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse404,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,InlineResponse404,The method has 5 parameters. Parameters: OrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4041,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,InlineResponse4041,The method has 5 parameters. Parameters: OrderCancelRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4042,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,InlineResponse4042,The method has 5 parameters. Parameters: OrderCancelRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,InlineResponse4043,The method has 5 parameters. Parameters: OrderClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,InlineResponse4044,The method has 6 parameters. Parameters: LongOrderRejectTransaction' ShortOrderRejectTransaction' RelatedTransactionIDs' LastTransactionID' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4045,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,InlineResponse4045,The method has 5 parameters. Parameters: OrderRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,InlineResponse4046,The method has 5 parameters. Parameters: TradeClientExtensionsModifyRejectTransaction' LastTransactionID' RelatedTransactionIDs' ErrorCode' ErrorMessage
Long Parameter List,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,Instrument,The method has 12 parameters. Parameters: Name' Type' DisplayName' PipLocation' DisplayPrecision' TradeUnitsPrecision' MinimumTradeSize' MaximumTrailingStopDistance' MinimumTrailingStopDistance' MaximumPositionSize' MaximumOrderUnits' MarginRate
Long Parameter List,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,LimitOrder,The method has 25 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,LimitOrderRejectTransaction,The method has 22 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,LimitOrderRequest,The method has 13 parameters. Parameters: Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,LimitOrderTransaction,The method has 22 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,MarginCallEnterTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,MarginCallExitTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,MarginCallExtendTransaction,The method has 8 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' ExtensionNumber
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,MarketIfTouchedOrder,The method has 27 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' InitialMarketPrice' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,MarketIfTouchedOrderRejectTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,MarketIfTouchedOrderRequest,The method has 14 parameters. Parameters: Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,MarketIfTouchedOrderTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,MarketOrder,The method has 26 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' TradeClose' LongPositionCloseout' ShortPositionCloseout' MarginCloseout' DelayedTradeClose' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime
Long Parameter List,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,MarketOrderRejectTransaction,The method has 24 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' TradeClose' LongPositionCloseout' ShortPositionCloseout' MarginCloseout' DelayedTradeClose' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' RejectReason
Long Parameter List,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,MarketOrderRequest,The method has 11 parameters. Parameters: Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,MarketOrderTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' TimeInForce' PriceBound' PositionFill' TradeClose' LongPositionCloseout' ShortPositionCloseout' MarginCloseout' DelayedTradeClose' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,OrderCancelRejectTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' Reason' RejectReason
Long Parameter List,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,OrderCancelTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' Reason' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,OrderClientExtensionsModifyRejectTransaction,The method has 12 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' ClientExtensionsModify' TradeClientExtensionsModify' RejectReason
Long Parameter List,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,OrderClientExtensionsModifyTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' ClientExtensionsModify' TradeClientExtensionsModify
Long Parameter List,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,OrderFillTransaction,The method has 19 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' OrderID' ClientOrderID' Instrument' Units' Price' Reason' Pl' Financing' AccountBalance' TradeOpened' TradesClosed' TradeReduced
Long Parameter List,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,Position,The method has 6 parameters. Parameters: Instrument' Pl' UnrealizedPL' ResettablePL' _Long' _Short
Long Parameter List,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,PositionSide,The method has 6 parameters. Parameters: Units' AveragePrice' TradeIDs' Pl' UnrealizedPL' ResettablePL
Long Parameter List,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,Price,The method has 11 parameters. Parameters: Type' Instrument' Time' Status' Tradeable' Bids' Asks' CloseoutBid' CloseoutAsk' QuoteHomeConversionFactors' UnitsAvailable
Long Parameter List,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,ReopenTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,ResetResettablePLTransaction,The method has 7 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type
Long Parameter List,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,StopLossOrder,The method has 20 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,StopLossOrderRejectTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,StopLossOrderRequest,The method has 8 parameters. Parameters: Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' ClientExtensions
Long Parameter List,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,StopLossOrderTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,StopOrder,The method has 26 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,StopOrderRejectTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,StopOrderRequest,The method has 14 parameters. Parameters: Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions
Long Parameter List,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,StopOrderTransaction,The method has 23 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Instrument' Units' Price' PriceBound' TimeInForce' GtdTime' PositionFill' TriggerCondition' Reason' ClientExtensions' TakeProfitOnFill' StopLossOnFill' TrailingStopLossOnFill' TradeClientExtensions' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,TakeProfitOrder,The method has 20 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,TakeProfitOrderRejectTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,TakeProfitOrderRequest,The method has 8 parameters. Parameters: Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' ClientExtensions
Long Parameter List,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,TakeProfitOrderTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Price' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,Trade,The method has 17 parameters. Parameters: Id' Instrument' Price' OpenTime' State' InitialUnits' CurrentUnits' RealizedPL' UnrealizedPL' AverageClosePrice' ClosingTransactionIDs' Financing' CloseTime' ClientExtensions' TakeProfitOrder' StopLossOrder' TrailingStopLossOrder
Long Parameter List,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,TradeClientExtensionsModifyRejectTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' TradeClientExtensionsModify' RejectReason
Long Parameter List,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,TradeClientExtensionsModifyTransaction,The method has 10 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' TradeClientExtensionsModify
Long Parameter List,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,TradeSummary,The method has 17 parameters. Parameters: Id' Instrument' Price' OpenTime' State' InitialUnits' CurrentUnits' RealizedPL' UnrealizedPL' AverageClosePrice' ClosingTransactionIDs' Financing' CloseTime' ClientExtensions' TakeProfitOrderID' StopLossOrderID' TrailingStopLossOrderID
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,TrailingStopLossOrder,The method has 21 parameters. Parameters: Id' CreateTime' State' ClientExtensions' Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' TrailingStopValue' FillingTransactionID' FilledTime' TradeOpenedID' TradeReducedID' TradeClosedIDs' CancellingTransactionID' CancelledTime' ReplacesOrderID' ReplacedByOrderID
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,TrailingStopLossOrderRejectTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' IntendedReplacesOrderID' RejectReason
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,TrailingStopLossOrderRequest,The method has 8 parameters. Parameters: Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' ClientExtensions
Long Parameter List,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,TrailingStopLossOrderTransaction,The method has 18 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' TradeID' ClientTradeID' Distance' TimeInForce' GtdTime' TriggerCondition' Reason' ClientExtensions' OrderFillTransactionID' ReplacesOrderID' CancellingTransactionID
Long Parameter List,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,Transaction,The method has 6 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID
Long Parameter List,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,TransferFundsRejectTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Amount' FundingReason' Comment' RejectReason
Long Parameter List,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,TransferFundsTransaction,The method has 11 parameters. Parameters: Id' Time' UserID' AccountID' BatchID' RequestID' Type' Amount' FundingReason' Comment' AccountBalance
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Initialize,The method has 6 parameters. Parameters: job' dataProvider' dataCacheProvider' mapFileProvider' factorFileProvider' statusUpdate
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,SetTokens,The method has 5 parameters. Parameters: userId' accessToken' refreshToken' issuedAt' lifeSpan
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The method has 5 parameters. Parameters: request' type' rootName' attempts' max
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The method has 10 parameters. Parameters: accountId' classification' direction' symbol' quantity' price' stop' optionSymbol' type' duration
Long Parameter List,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ChangeOrder,The method has 6 parameters. Parameters: accountId' orderId' type' duration' price' stop
Long Identifier,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The length of the parameter nextReconnectionAttemptUtcTime is 30.
Long Identifier,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The length of the parameter nextReconnectionAttemptSeconds is 30.
Long Identifier,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,,The length of the parameter _isOrderUpdateOrCancelRejected is 30.
Long Identifier,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,,The length of the parameter _minimumTimespanBeforeUnsubscribe is 33.
Long Identifier,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The length of the parameter nextReconnectionAttemptUtcTime is 30.
Long Identifier,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The length of the parameter nextReconnectionAttemptSeconds is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse20010,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,InlineResponse20010,The length of the parameter OrderClientExtensionsModifyTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse20027,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,InlineResponse20027,The length of the parameter TradeClientExtensionsModifyTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TakeProfitOrderCancelTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TakeProfitOrderFillTransaction is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TakeProfitOrderCreatedCancelTransaction is 39.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter StopLossOrderCancelTransaction is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter StopLossOrderCreatedCancelTransaction is 37.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TrailingStopLossOrderCancelTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,InlineResponse20028,The length of the parameter TrailingStopLossOrderTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,InlineResponse2011,The length of the parameter ReplacingOrderCancelTransaction is 31.
Long Identifier,Oanda.RestV20.Model,InlineResponse400,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,InlineResponse400,The length of the parameter ClientConfigureRejectTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,InlineResponse4003,The length of the parameter OrderClientExtensionsModifyRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,InlineResponse4006,The length of the parameter TradeClientExtensionsModifyRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TakeProfitOrderCancelRejectTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TakeProfitOrderRejectTransaction is 32.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter StopLossOrderCancelRejectTransaction is 36.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter StopLossOrderRejectTransaction is 30.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TrailingStopLossOrderCancelRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,InlineResponse4007,The length of the parameter TrailingStopLossOrderRejectTransaction is 38.
Long Identifier,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,InlineResponse4043,The length of the parameter OrderClientExtensionsModifyRejectTransaction is 44.
Long Identifier,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,InlineResponse4046,The length of the parameter TradeClientExtensionsModifyRejectTransaction is 44.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _cachedOpenOrdersByTradierOrderID is 33.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _reentranceGuardByTradierOrderID is 32.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _contingentReentranceGuardByQCOrderID is 37.
Long Identifier,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,,The length of the parameter _verifiedUnknownTradierOrderIDs is 31.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,PlaceOrder,The length of the statement  "            Log.Trace("BacktestingBrokerage.PlaceOrder(): Type: " + order.Type + " Symbol: " + order.Symbol.Value + " Quantity: " + order.Quantity); " is 136.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,UpdateOrder,The length of the statement  "            Log.Trace("BacktestingBrokerage.UpdateOrder(): Symbol: " + order.Symbol.Value + " Quantity: " + order.Quantity + " Status: " + order.Status); " is 141.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The length of the statement  "                            Algorithm.Error(string.Format("Order Error: id: {0}' Transaction model failed to fill for order type: {1} with error: {2}"' " is 123.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The length of the statement  "                        Algorithm.Error(string.Format("Order Error: id: {0}' Insufficient buying power to complete order (Value:{1})."' order.Id' " is 121.
Long Statement,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,ActivateOptionAssignment,The length of the statement  "            var request = new SubmitOrderRequest(OrderType.OptionExercise' option.Type' option.Symbol' -quantity' 0.0m' 0.0m' Algorithm.UtcTime' "Simulated option assignment"); " is 164.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,IsReadyToSimulate,The length of the statement  "                // we check if new simulation date has arrived. It may happen that several of them had.. due to exchange hours' weekends' etc. " is 126.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,SimulateMarketConditions,The length of the statement  "                .Where(x => EstimateArbitragePnL((Option)x.Value' (OptionHolding)x.Value.Holdings' algorithm.Securities[x.Value.Symbol.Underlying]) > 0.0m) " is 139.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,SimulateMarketConditions,The length of the statement  "                .ForEach(x => backtestingBrokerage.ActivateOptionAssignment((Option)x.Value' (int)((OptionHolding)x.Value.Holdings).AbsoluteQuantity)); " is 135.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var marketOrder1 = new MarketOrder(option.Symbol' -holding.Quantity' option.LocalTime.ConvertToUtc(option.Exchange.TimeZone)); " is 126.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var basePnL = (optionPrice - holding.AveragePrice) * -holding.Quantity * option.QuoteCurrency.ConversionRate * option.SymbolProperties.ContractMultiplier - orderFee1; " is 166.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var optionExerciseOrder2 = new OptionExerciseOrder(option.Symbol' (int)holding.AbsoluteQuantity' option.LocalTime.ConvertToUtc(option.Exchange.TimeZone)); " is 154.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var undelyingMarketOrder2 = new MarketOrder(underlying.Symbol' -underlyingQuantity' underlying.LocalTime.ConvertToUtc(underlying.Exchange.TimeZone)); " is 149.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "            var altPnL = (underlyingPrice - option.StrikePrice) * underlyingQuantity * underlying.QuoteCurrency.ConversionRate * option.ContractUnitOfTrade " is 143.
Long Statement,QuantConnect.Brokerages.Backtesting,BasicOptionAssignmentSimulation,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BasicOptionAssignmentSimulation.cs,EstimateArbitragePnL,The length of the statement  "                        - holding.AveragePrice * holding.AbsoluteQuantity * option.SymbolProperties.ContractMultiplier * option.QuoteCurrency.ConversionRate " is 132.
Long Statement,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The length of the statement  "                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues.")); " is 133.
Long Statement,QuantConnect.Brokerages,BrokerageFactory,C:\repos\QuantConnect_Lean\Brokerages\BrokerageFactory.cs,Read,The length of the statement  "                errors.Add(string.Format("BrokerageFactory.CreateBrokerage(): Error converting key '{0}' with value '{1}'. {2}"' key' value' err.Message)); " is 139.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The length of the statement  "                    err.Message.Contains("ORA-20003") ? "API connections are not available on Mini accounts. If you have a standard account contact api@fxcm.com to enable API access" : " is 164.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,PlaceOrder,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.PlaceOrder(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 146.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,UpdateOrder,The length of the statement  "            var orderReplaceRequest = MessageGenerator.generateOrderReplaceRequest(""' fxcmOrder.getOrderID()' fxcmOrder.getSide()' fxcmOrder.getOrdType()' price' fxcmOrder.getAccount()); " is 175.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,UpdateOrder,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.UpdateOrder(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 147.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,CancelOrder,The length of the statement  "            var orderCancelRequest = MessageGenerator.generateOrderCancelRequest(""' fxcmOrder.getOrderID()' fxcmOrder.getSide()' fxcmOrder.getAccount()); " is 142.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,CancelOrder,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.CancelOrder(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 147.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.FXCM' request.Symbol' request.Symbol.SecurityType).TimeZone; " is 140.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                    // 5% of the time its because of an internet / time of day / api settings / timeout: throw if this is the *second* attempt. " is 123.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                        throw new TimeoutException(string.Format("FxcmBrokerage.GetHistory(): History operation ending in {0:O} took longer than {1} seconds. This may be because there is no data' retrying..."' end' (decimal)HistoryResponseTimeout / 1000)); " is 232.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                    // Assuming Timeout: Save end time and if have the same endtime next time' break since its likely there's no data after that time. " is 130.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The length of the statement  "                    Log.Trace("FxcmBrokerage.GetHistory(): Attempt " + attempt + " for: " + request.Symbol.Value + " ended at " + lastEndTime.ToString("O")); " is 137.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Subscribe,The length of the statement  "                        exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.FXCM' symbol' symbol.SecurityType).TimeZone; " is 124.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadInstruments,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.LoadInstruments(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 151.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadAccounts,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.LoadAccounts(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 148.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadAccounts,The length of the statement  "                throw new NotSupportedException("FxcmBrokerage.LoadAccounts(): The Lean engine does not support accounts with Hedging enabled. " + " is 130.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadAccounts,The length of the statement  "                                                "Please contact FXCM Active Trader support to disable Hedging. They can be reached at 646.432.2970 or by email' activetrader@fxcm.com."); " is 137.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadOpenOrders,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.LoadOpenOrders(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 150.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadOpenPositions,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.LoadOpenPositions(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 153.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetQuotes,The length of the statement  "                throw new TimeoutException(string.Format("FxcmBrokerage.GetQuotes(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000)); " is 145.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,ConvertOrder,The length of the statement  "                throw new NotSupportedException("FxcmBrokerage.ConvertOrder(): The FXCM order type " + fxcmOrder.getOrdType() + " is not supported."); " is 134.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmBrokerageFactory,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerageFactory.cs,CreateBrokerage,The length of the statement  "            var brokerage = new FxcmBrokerage(algorithm.Transactions' algorithm.Portfolio' server' terminal' userName' password' accountId); " is 128.
Long Statement,QuantConnect.Brokerages.Fxcm,FxcmSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmSymbolMapper.cs,GetLeanSymbol,The length of the statement  "            return Symbol.Create(ConvertFxcmSymbolToLeanSymbol(brokerageSymbol)' GetBrokerageSecurityType(brokerageSymbol)' Market.FXCM); " is 125.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetAuthenticationToken,The length of the statement  "            var token = GetAuthenticationToken(body == null ? "" : body.Value.ToString()' request.Method.ToString().ToUpper()' request.Resource); " is 133.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' (int)response.StatusCode' "GDAXBrokerage.PlaceOrder: Error parsing response from place order: " + response.Content)); " is 181.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "                    OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' 0' "GDAX Order Event") { Status = OrderStatus.Invalid' Message = "Reject reason: " + raw.RejectReason }); " is 157.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Information' -1' "GDAXBrokerage.PlaceOrder: Order completed successfully orderid:" + order.Id.ToString())); " is 164.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PlaceOrder,The length of the statement  "            var message = $"GDAXBrokerage.PlaceOrder: Order failed Order Id: {order.Id} timestamp: {order.Time} quantity: {order.Quantity} content: {response.Content}"; " is 156.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetOpenOrders,The length of the statement  "                throw new Exception($"GDAXBrokerage.GetOpenOrders: request failed: [{(int) response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 196.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetCashBalance,The length of the statement  "                throw new Exception($"GDAXBrokerage.GetCashBalance: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 196.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetFee,The length of the statement  "                    throw new Exception($"GDAXBrokerage.GetFee: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 188.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The length of the statement  "                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' -1' $"GDAXBrokerage.OnMessage: {error.Message} {error.Reason}")); " is 129.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The length of the statement  "                else if (raw.Type == "open" || raw.Type == "change" || raw.Type == "received" || raw.Type == "subscriptions" || raw.Type == "last_match") " is 137.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Information' -1' ("GDAXWebsocketsBrokerage.OnMessage: Unexpected message format: " + e.Message))); " is 155.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' -1' $"Parsing wss message failed. Data: {e.Message} Exception: {exception}")); " is 142.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OrderMatch,The length of the statement  "            var status = Math.Abs(message.Size) == Math.Abs(order.Quantity) || Math.Abs(split.OrderQuantity) == Math.Abs(split.TotalQuantity()) " is 131.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OrderDone,The length of the statement  "                Log.Trace($"GDAXBrokerage.Messaging.OrderDone(): Order could not locate order in cache with order id {message.OrderId}"); " is 121.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OrderDone,The length of the statement  "                $"GDAXWebsocketsBrokerage.OrderDone: Encountered done message prior to match filling order brokerId: {message.OrderId} orderId: {orderId}")); " is 141.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetTick,The length of the statement  "                throw new Exception($"GDAXBrokerage.GetTick: request failed: [{(int)response.StatusCode}] {response.StatusDescription}' Content: {response.Content}' ErrorMessage: {response.ErrorMessage}"); " is 189.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PollTick,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Information' -1' $"GDAXBrokerage.PollLatestTick: started polling for ticks: {symbol.Value.ToString()}")); " is 162.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PollTick,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Information' -1' $"PollLatestTick: stopped polling for ticks: {symbol.Value.ToString()}")); " is 148.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetConversionRate,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' (int)response.StatusCode' "GetConversionRate: error returned from conversion rate service.")); " is 158.
Long Statement,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,GetConversionRate,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' (int)response.StatusCode' "GetConversionRate: zero value returned from conversion rate service.")); " is 163.
Long Statement,QuantConnect.Brokerages.GDAX,OrderBook,C:\repos\QuantConnect_Lean\Brokerages\GDAX\OrderBook.cs,UpdateBidRow,The length of the statement  "                BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' BestBidPrice' BestBidSize' BestAskPrice' BestAskSize)); " is 127.
Long Statement,QuantConnect.Brokerages.GDAX,OrderBook,C:\repos\QuantConnect_Lean\Brokerages\GDAX\OrderBook.cs,UpdateAskRow,The length of the statement  "                BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' BestBidPrice' BestBidSize' BestAskPrice' BestAskSize)); " is 127.
Long Statement,QuantConnect.Brokerages.GDAX,OrderBook,C:\repos\QuantConnect_Lean\Brokerages\GDAX\OrderBook.cs,RemoveBidRow,The length of the statement  "                BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' BestBidPrice' BestBidSize' BestAskPrice' BestAskSize)); " is 127.
Long Statement,QuantConnect.Brokerages.GDAX,OrderBook,C:\repos\QuantConnect_Lean\Brokerages\GDAX\OrderBook.cs,RemoveAskRow,The length of the statement  "                BestBidAskUpdated?.Invoke(this' new BestBidAskUpdatedEventArgs(_symbol' BestBidPrice' BestBidSize' BestAskPrice' BestAskSize)); " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,CommissionReportEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\CommissionReportEventArgs.cs,ToString,The length of the statement  "            return $"ExecId: {CommissionReport.ExecId}' Commission: {CommissionReport.Commission}' Currency: {CommissionReport.Currency}"; " is 126.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,ExecutionDetailsEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\ExecutionDetailsEventArgs.cs,ToString,The length of the statement  "            return $"RequestId: {RequestId}' Symbol: {Contract.Symbol}' OrderId: {Execution.OrderId}' Time: {Execution.Time}' Side: {Execution.Side}' Shares: {Execution.Shares}' Price: {Execution.Price}' CumQty: {Execution.CumQty}' PermId: {Execution.PermId}' Account: {Execution.AcctNumber}' ExecId: {Execution.ExecId}"; " is 309.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,OrderStatusEventArgs,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\OrderStatusEventArgs.cs,ToString,The length of the statement  "                "OrderId: {0}' Status: {1}' Filled: {2}' Remaining: {3}' AverageFillPrice: {4}' PermId: {5}' ParentId: {6}' LastFillPrice: {7}' ClientId: {8}' WhyHeld: {9}"'  " is 157.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickEFP,The length of the statement  "            OnTickEfp(new TickEfpEventArgs(tickerId' tickType' basisPoints' formattedBasisPoints' impliedFuture' holdDays' futureExpiry' dividendImpact' " is 140.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,tickOptionComputation,The length of the statement  "            OnTickOptionComputation(new TickOptionComputationEventArgs(tickerId' field' impliedVolatility' delta' optPrice' pvDividend' gamma' vega' theta' " is 143.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updatePortfolio,The length of the statement  "            OnUpdatePortfolio(new UpdatePortfolioEventArgs(contract' positionValue' marketPrice' marketValue' averageCost' unrealisedPnl' realisedPnl' " is 138.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,orderStatus,The length of the statement  "            OnOrderStatus(new OrderStatusEventArgs(orderId' status' filledValue' remainingValue' avgFillPrice' permId' parentId' lastFillPrice' clientId' whyHeld)); " is 152.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,updateMktDepthL2,The length of the statement  "            OnUpdateMarketDepthLevel2(new UpdateMarketDepthLevel2EventArgs(tickerId' position' marketMaker' operation' side' price' size)); " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.Client,InteractiveBrokersClient,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\Client\InteractiveBrokersClient.cs,securityDefinitionOptionParameter,The length of the statement  "            OnSecurityDefinitionOptionParameter(new SecurityDefinitionOptionParameterEventArgs(reqId' exchange' underlyingConId' tradingClass' " is 130.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Aliases failed. Operation took longer than 2 seconds."); " is 148.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Groups failed. Operation took longer than 2 seconds."); " is 147.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Profiles failed. Operation took longer than 2 seconds."); " is 149.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): FA Aliases found: " + _accountAliases.Count); " is 125.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): FA Groups found: " + _accountGroups.Count); " is 123.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): FA Profiles found: " + _allocationProfiles.Count); " is 130.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,UpdateOrder,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.UpdateOrder(): Symbol: " + order.Symbol.Value + " Quantity: " + order.Quantity + " Status: " + order.Status); " is 148.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetAccountHoldings,The length of the statement  "            var holdings = _accountData.AccountHoldings.Select(x => ObjectActivator.Clone(x.Value)).Where(x => x.Quantity != 0).ToList(); " is 125.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                            throw new Exception("InteractiveBrokersBrokerage.Connect(): An existing session was detected and will not be automatically disconnected. Please close the existing session manually."); " is 183.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                            throw new Exception("InteractiveBrokersBrokerage.Connect(): A security dialog was detected for Second Factor/Code Card Authentication. Please opt out of the Secure Login System: Manage Account > Security > Secure Login System > SLS Opt Out"); " is 242.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The length of the statement  "                    if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state."); " is 138.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IBPlaceOrder,The length of the statement  "                throw new InvalidOperationException("InteractiveBrokersBrokerage.IBPlaceOrder(): Unable to place order while not connected."); " is 126.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUniqueKey,The length of the statement  "            return string.Format("{0} {1} {2} {3}"' contract' contract.LastTradeDateOrContractMonth' contract.Strike' contract.Right); " is 122.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetContractDetails,The length of the statement  "                Log.Error("InteractiveBrokersBrokerage.GetContractDetails(): failed to receive response from IB within {0} seconds"' timeout); " is 126.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,FindContracts,The length of the statement  "                Log.Error("InteractiveBrokersBrokerage.FindContracts(): failed to receive response from IB within {0} seconds"' timeout); " is 121.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The length of the statement  "                    Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Market price rate is " + args.Price + " for currency " + currency); " is 126.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The length of the statement  "                Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout); " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The length of the statement  "                        Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout); " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion() Pacing violation' pausing for {0} secs."' pacingDelaySeconds); " is 120.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Last historical price rate is " + rate + " for currency " + currency); " is 129.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,The length of the statement  "                    Log.Error($"InteractiveBrokersBrokerage.HandleError.InvalidateOrder(): Unable to locate order with BrokerageID {requestId}"); " is 125.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,TryWaitForReconnect,The length of the statement  "            // IB has server reset schedule: https://www.interactivebrokers.com/en/?f=%2Fen%2Fsoftware%2FsystemStatus.php%3Fib_entity%3Dllc " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,TryWaitForReconnect,The length of the statement  "                    Log.Trace("InteractiveBrokersBrokerage.TryWaitForReconnect(): Reset time finished and still disconnected. Restarting..."); " is 122.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,TryWaitForReconnect,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.TryWaitForReconnect(): Within server reset times' trying to wait for reconnect..."); " is 123.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                        Log.Error("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): Not connected; update dropped' _client.Connected: {0}' _disconnected1100Fired: {1}"' _client.Connected' _disconnected1100Fired); " is 195.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                    Log.Error("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): Unable to locate order with BrokerageID " + update.OrderId); " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): ignoring update in closed state - order.Status: " + order.Status + "' status: " + status); " is 157.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleOrderStatusUpdates,The length of the statement  "                        Log.Trace("InteractiveBrokersBrokerage.HandleOrderStatusUpdates(): ignoring status " + status + " after partial fills"); " is 120.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleExecutionDetails,The length of the statement  "                        Log.Error("InteractiveBrokersBrokerage.HandleExecutionDetails(): Not connected; update dropped' _client.Connected: {0}' _disconnected1100Fired: {1}"' _client.Connected' _disconnected1100Fired); " is 193.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleExecutionDetails,The length of the statement  "                    Log.Error("InteractiveBrokersBrokerage.HandleExecutionDetails(): Unable to locate order with BrokerageID " + executionDetails.Execution.OrderId); " is 145.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleCommissionReport,The length of the statement  "                    Log.Error("InteractiveBrokersBrokerage.HandleExecutionDetails(): Unable to locate order with BrokerageID " + execution.OrderId); " is 128.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,ConvertTradeBar,The length of the statement  "            return new TradeBar(time' symbol' (decimal)historyBar.Bar.Open' (decimal)historyBar.Bar.High' (decimal)historyBar.Bar.Low' " is 122.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,MapSymbol,The length of the statement  "                var contractDate = DateTime.ParseExact(contract.LastTradeDateOrContractMonth' DateFormat.EightCharacter' CultureInfo.InvariantCulture); " is 135.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,MapSymbol,The length of the statement  "                var expiryDate = DateTime.ParseExact(contract.LastTradeDateOrContractMonth' DateFormat.EightCharacter' CultureInfo.InvariantCulture); " is 133.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Subscribe,The length of the statement  "                                Log.Trace("InteractiveBrokersBrokerage.Subscribe(): Subscribe Processed: {0} ({1}) # {2}"' symbol.Value' contract.ToString()' id); " is 130.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetRealTimeTickTime,The length of the statement  "                exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(symbol.ID.Market' symbol' symbol.SecurityType).TimeZone; " is 129.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,LookupSymbols,The length of the statement  "            Func<string' int> exchangeFilter = exchange => securityType == SecurityType.Future ? Array.IndexOf(futuresExchanges' exchange) : 0; " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,LookupSymbols,The length of the statement  "                Log.Trace("InteractiveBrokersBrokerage.LookupSymbols(): Returning {0} contracts for {1}"' symbols.Count' contract.Symbol); " is 122.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,LookupSymbols,The length of the statement  "            Log.Trace("InteractiveBrokersBrokerage.LookupSymbols(): Returning {0} symbol(s)"' filteredResults != null ? filteredResults.Count() : 0); " is 137.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(request.Symbol.ID.Market' request.Symbol' request.Symbol.SecurityType).TimeZone; " is 153.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                var historyBid = GetHistory(request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' HistoricalDataType.Bid); " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                var historyAsk = GetHistory(request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' HistoricalDataType.Ask); " is 131.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The length of the statement  "                history = GetHistory(request' contract' startTime' endTime' exchangeTimeZone' duration' resolution' HistoricalDataType.Trades); " is 127.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerageFactory,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerageFactory.cs,CreateBrokerage,The length of the statement  "            var ib = new InteractiveBrokersBrokerage(algorithm' algorithm.Transactions' algorithm.Portfolio' account' host' port' agentDescription); " is 136.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Start,The length of the statement  "                var arguments = string.Format("{0} {1} {2} {3} {4} {5} {6}"' file' ibControllerDirectory' twsDirectory' userId' password' useTwsSwitch' tradingMode); " is 149.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Start,The length of the statement  "                Log.Trace($"InteractiveBrokersGatewayRunner.Start(): Launching IBController: {file} {ibControllerDirectory} {twsDirectory} {userId} XXX {useTwsSwitch} {tradingMode}"); " is 167.
Long Statement,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Start,The length of the statement  "                var processStartInfo = OS.IsWindows ? new ProcessStartInfo("cmd.exe"' "/C " + arguments) : new ProcessStartInfo("bash"' arguments); " is 131.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetRates,The length of the statement  "            var requestBuilder = new StringBuilder(EndpointResolver.ResolveEndpoint(Environment' Server.Rates) + "prices?instruments="); " is 124.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetOrderList,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders"; " is 120.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,GetPositions,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + accountId + "/positions"; " is 123.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The length of the statement  "                        //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled. " is 181.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The length of the statement  "                        //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled. " is 181.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PostOrderAsync,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders"; " is 120.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,UpdateOrder,The length of the statement  "            var orderRequest = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders/" + orderId; " is 130.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,UpdateOrder,The length of the statement  "                var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders/" + orderId; " is 131.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,UpdateOrder,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UpdateFailed"' "Failed to update Oanda order id: " + orderId + ".")); " is 136.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,CancelOrder,The length of the statement  "            var requestString = EndpointResolver.ResolveEndpoint(Environment' Server.Account) + "accounts/" + AccountId + "/orders/" + orderId; " is 131.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadTradeBars,The length of the statement  "            var response = _apiRest.GetInstrumentCandles(Authorization' oandaSymbol' null' "M"' ToGranularity(resolution).ToString()' null' startUtc' endUtc); " is 146.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadQuoteBars,The length of the statement  "            var response = _apiRest.GetInstrumentCandles(Authorization' oandaSymbol' null' "BA"' ToGranularity(resolution).ToString()' OandaBrokerage.MaxBarsPerRequest' startUtc); " is 167.
Long Statement,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,ConvertOrder,The length of the statement  "                        "An existing " + type + " working order was found and is currently unsupported. Please manually cancel the order before restarting the algorithm."); " is 148.
Long Statement,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetHistory,The length of the statement  "            var exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.Oanda' request.Symbol' request.Symbol.SecurityType).TimeZone; " is 145.
Long Statement,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetHistory,The length of the statement  "                var quoteBars = _api.DownloadQuoteBars(request.Symbol' startDateTime' request.EndTimeUtc' request.Resolution' exchangeTimeZone).ToList(); " is 137.
Long Statement,QuantConnect.Brokerages.Oanda,OandaBrokerageFactory,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerageFactory.cs,CreateBrokerage,The length of the statement  "            var brokerage = new OandaBrokerage(algorithm.Transactions' algorithm.Portfolio' environment' accessToken' accountId' agent); " is 124.
Long Statement,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,GetLeanSymbol,The length of the statement  "            return Symbol.Create(ConvertOandaSymbolToLeanSymbol(brokerageSymbol)' GetBrokerageSecurityType(brokerageSymbol)' Market.Oanda); " is 127.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrder,The length of the statement  "             ApiResponse<InlineResponse2009> localVarResponse = CancelOrderWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsync,The length of the statement  "             ApiResponse<InlineResponse2009> localVarResponse = await CancelOrderAsyncWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePosition,The length of the statement  "             ApiResponse<InlineResponse20014> localVarResponse = ClosePositionWithHttpInfo(authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat); " is 157.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsync,The length of the statement  "             ApiResponse<InlineResponse20014> localVarResponse = await ClosePositionAsyncWithHttpInfo(authorization' accountID' instrument' closePositionBody' acceptDatetimeFormat); " is 168.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTrade,The length of the statement  "             ApiResponse<InlineResponse20026> localVarResponse = CloseTradeWithHttpInfo(authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat); " is 155.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsync,The length of the statement  "             ApiResponse<InlineResponse20026> localVarResponse = await CloseTradeAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' closeTradeBody' acceptDatetimeFormat); " is 166.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccount,The length of the statement  "             ApiResponse<InlineResponse2004> localVarResponse = ConfigureAccountWithHttpInfo(authorization' accountID' acceptDatetimeFormat' configureAccountBody); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsync,The length of the statement  "             ApiResponse<InlineResponse2004> localVarResponse = await ConfigureAccountAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' configureAccountBody); " is 161.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "             ApiResponse<InlineResponse201> localVarResponse = CreateOrderWithHttpInfo(authorization' accountID' createOrderBody' acceptDatetimeFormat); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsync,The length of the statement  "             ApiResponse<InlineResponse201> localVarResponse = await CreateOrderAsyncWithHttpInfo(authorization' accountID' createOrderBody' acceptDatetimeFormat); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccount,The length of the statement  "             ApiResponse<InlineResponse2001> localVarResponse = GetAccountWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 122.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsync,The length of the statement  "             ApiResponse<InlineResponse2001> localVarResponse = await GetAccountAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 133.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChanges,The length of the statement  "             ApiResponse<InlineResponse2005> localVarResponse = GetAccountChangesWithHttpInfo(authorization' accountID' acceptDatetimeFormat' sinceTransactionID); " is 149.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (sinceTransactionID != null) localVarQueryParams.Add("sinceTransactionID"' Configuration.ApiClient.ParameterToString(sinceTransactionID)); // query parameter " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsync,The length of the statement  "             ApiResponse<InlineResponse2005> localVarResponse = await GetAccountChangesAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' sinceTransactionID); " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (sinceTransactionID != null) localVarQueryParams.Add("sinceTransactionID"' Configuration.ApiClient.ParameterToString(sinceTransactionID)); // query parameter " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstruments,The length of the statement  "             ApiResponse<InlineResponse2003> localVarResponse = GetAccountInstrumentsWithHttpInfo(authorization' accountID' instruments); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments"); " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsync,The length of the statement  "             ApiResponse<InlineResponse2003> localVarResponse = await GetAccountInstrumentsAsyncWithHttpInfo(authorization' accountID' instruments); " is 135.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments"); " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummary,The length of the statement  "             ApiResponse<InlineResponse2002> localVarResponse = GetAccountSummaryWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 129.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsync,The length of the statement  "             ApiResponse<InlineResponse2002> localVarResponse = await GetAccountSummaryAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 140.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsync,The length of the statement  "             ApiResponse<InlineResponse20016> localVarResponse = await GetExternalUserInfoAsyncWithHttpInfo(authorization' userSpecifier); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandles,The length of the statement  "             ApiResponse<InlineResponse20029> localVarResponse = GetInstrumentCandlesWithHttpInfo(authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment); " is 245.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (price != null) localVarQueryParams.Add("price"' Configuration.ApiClient.ParameterToString(price)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (granularity != null) localVarQueryParams.Add("granularity"' Configuration.ApiClient.ParameterToString(granularity)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (smooth != null) localVarQueryParams.Add("smooth"' Configuration.ApiClient.ParameterToString(smooth)); // query parameter " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (includeFirst != null) localVarQueryParams.Add("includeFirst"' Configuration.ApiClient.ParameterToString(includeFirst)); // query parameter " is 142.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (dailyAlignment != null) localVarQueryParams.Add("dailyAlignment"' Configuration.ApiClient.ParameterToString(dailyAlignment)); // query parameter " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (alignmentTimezone != null) localVarQueryParams.Add("alignmentTimezone"' Configuration.ApiClient.ParameterToString(alignmentTimezone)); // query parameter " is 157.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (weeklyAlignment != null) localVarQueryParams.Add("weeklyAlignment"' Configuration.ApiClient.ParameterToString(weeklyAlignment)); // query parameter " is 151.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsync,The length of the statement  "             ApiResponse<InlineResponse20029> localVarResponse = await GetInstrumentCandlesAsyncWithHttpInfo(authorization' instrument' acceptDatetimeFormat' price' granularity' count' from' to' smooth' includeFirst' dailyAlignment' alignmentTimezone' weeklyAlignment); " is 256.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (price != null) localVarQueryParams.Add("price"' Configuration.ApiClient.ParameterToString(price)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (granularity != null) localVarQueryParams.Add("granularity"' Configuration.ApiClient.ParameterToString(granularity)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (smooth != null) localVarQueryParams.Add("smooth"' Configuration.ApiClient.ParameterToString(smooth)); // query parameter " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (includeFirst != null) localVarQueryParams.Add("includeFirst"' Configuration.ApiClient.ParameterToString(includeFirst)); // query parameter " is 142.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (dailyAlignment != null) localVarQueryParams.Add("dailyAlignment"' Configuration.ApiClient.ParameterToString(dailyAlignment)); // query parameter " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (alignmentTimezone != null) localVarQueryParams.Add("alignmentTimezone"' Configuration.ApiClient.ParameterToString(alignmentTimezone)); // query parameter " is 157.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (weeklyAlignment != null) localVarQueryParams.Add("weeklyAlignment"' Configuration.ApiClient.ParameterToString(weeklyAlignment)); // query parameter " is 151.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrder,The length of the statement  "             ApiResponse<InlineResponse2008> localVarResponse = GetOrderWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsync,The length of the statement  "             ApiResponse<InlineResponse2008> localVarResponse = await GetOrderAsyncWithHttpInfo(authorization' accountID' orderSpecifier' acceptDatetimeFormat); " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsync,The length of the statement  "             ApiResponse<InlineResponse20013> localVarResponse = await GetPositionAsyncWithHttpInfo(authorization' accountID' instrument); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarPathParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // path parameter " is 134.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPrices,The length of the statement  "             ApiResponse<InlineResponse20021> localVarResponse = GetPricesWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable); " is 165.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (since != null) localVarQueryParams.Add("since"' Configuration.ApiClient.ParameterToString(since)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (includeUnitsAvailable != null) localVarQueryParams.Add("includeUnitsAvailable"' Configuration.ApiClient.ParameterToString(includeUnitsAvailable)); // query parameter " is 169.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsync,The length of the statement  "             ApiResponse<InlineResponse20021> localVarResponse = await GetPricesAsyncWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' since' includeUnitsAvailable); " is 176.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (since != null) localVarQueryParams.Add("since"' Configuration.ApiClient.ParameterToString(since)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (includeUnitsAvailable != null) localVarQueryParams.Add("includeUnitsAvailable"' Configuration.ApiClient.ParameterToString(includeUnitsAvailable)); // query parameter " is 169.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTrade,The length of the statement  "             ApiResponse<InlineResponse20025> localVarResponse = GetTradeWithHttpInfo(authorization' accountID' tradeSpecifier' acceptDatetimeFormat); " is 137.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsync,The length of the statement  "             ApiResponse<InlineResponse20025> localVarResponse = await GetTradeAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' acceptDatetimeFormat); " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransaction,The length of the statement  "             ApiResponse<InlineResponse20018> localVarResponse = GetTransactionWithHttpInfo(authorization' accountID' transactionID' acceptDatetimeFormat); " is 142.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (transactionID != null) localVarPathParams.Add("transactionID"' Configuration.ApiClient.ParameterToString(transactionID)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsync,The length of the statement  "             ApiResponse<InlineResponse20018> localVarResponse = await GetTransactionAsyncWithHttpInfo(authorization' accountID' transactionID' acceptDatetimeFormat); " is 153.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (transactionID != null) localVarPathParams.Add("transactionID"' Configuration.ApiClient.ParameterToString(transactionID)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRange,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = GetTransactionRangeWithHttpInfo(authorization' accountID' from' to' acceptDatetimeFormat' type); " is 148.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsync,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = await GetTransactionRangeAsyncWithHttpInfo(authorization' accountID' from' to' acceptDatetimeFormat' type); " is 159.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceId,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = GetTransactionsSinceIdWithHttpInfo(authorization' accountID' id' acceptDatetimeFormat); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId"); " is 122.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsync,The length of the statement  "             ApiResponse<InlineResponse20019> localVarResponse = await GetTransactionsSinceIdAsyncWithHttpInfo(authorization' accountID' id' acceptDatetimeFormat); " is 150.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId"); " is 122.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The length of the statement  "            if (userSpecifier != null) localVarPathParams.Add("userSpecifier"' Configuration.ApiClient.ParameterToString(userSpecifier)); // path parameter " is 143.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTrades,The length of the statement  "             ApiResponse<InlineResponse20024> localVarResponse = ListOpenTradesWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 127.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsync,The length of the statement  "             ApiResponse<InlineResponse20024> localVarResponse = await ListOpenTradesAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 138.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrders,The length of the statement  "             ApiResponse<InlineResponse2006> localVarResponse = ListOrdersWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 163.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsync,The length of the statement  "             ApiResponse<InlineResponse2006> localVarResponse = await ListOrdersAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 174.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrders,The length of the statement  "             ApiResponse<InlineResponse2007> localVarResponse = ListPendingOrdersWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 129.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsync,The length of the statement  "             ApiResponse<InlineResponse2007> localVarResponse = await ListPendingOrdersAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat); " is 140.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTrades,The length of the statement  "             ApiResponse<InlineResponse20023> localVarResponse = ListTradesWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 164.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsync,The length of the statement  "             ApiResponse<InlineResponse20023> localVarResponse = await ListTradesAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' ids' state' instrument' count' beforeID); " is 175.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (state != null) localVarQueryParams.Add("state"' Configuration.ApiClient.ParameterToString(state)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (instrument != null) localVarQueryParams.Add("instrument"' Configuration.ApiClient.ParameterToString(instrument)); // query parameter " is 136.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (count != null) localVarQueryParams.Add("count"' Configuration.ApiClient.ParameterToString(count)); // query parameter " is 121.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (beforeID != null) localVarQueryParams.Add("beforeID"' Configuration.ApiClient.ParameterToString(beforeID)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactions,The length of the statement  "             ApiResponse<InlineResponse20017> localVarResponse = ListTransactionsWithHttpInfo(authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type); " is 155.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (pageSize != null) localVarQueryParams.Add("pageSize"' Configuration.ApiClient.ParameterToString(pageSize)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsync,The length of the statement  "             ApiResponse<InlineResponse20017> localVarResponse = await ListTransactionsAsyncWithHttpInfo(authorization' accountID' acceptDatetimeFormat' from' to' pageSize' type); " is 166.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (pageSize != null) localVarQueryParams.Add("pageSize"' Configuration.ApiClient.ParameterToString(pageSize)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "             ApiResponse<InlineResponse2011> localVarResponse = ReplaceOrderWithHttpInfo(authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat); " is 158.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsync,The length of the statement  "             ApiResponse<InlineResponse2011> localVarResponse = await ReplaceOrderAsyncWithHttpInfo(authorization' accountID' orderSpecifier' replaceOrderBody' acceptDatetimeFormat); " is 169.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensions,The length of the statement  "             ApiResponse<InlineResponse20010> localVarResponse = SetOrderClientExtensionsWithHttpInfo(authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat); " is 183.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsync,The length of the statement  "             ApiResponse<InlineResponse20010> localVarResponse = await SetOrderClientExtensionsAsyncWithHttpInfo(authorization' accountID' orderSpecifier' setOrderClientExtensionsBody' acceptDatetimeFormat); " is 194.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensions,The length of the statement  "             ApiResponse<InlineResponse20027> localVarResponse = SetTradeClientExtensionsWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat); " is 183.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsync,The length of the statement  "             ApiResponse<InlineResponse20027> localVarResponse = await SetTradeClientExtensionsAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeClientExtensionsBody' acceptDatetimeFormat); " is 194.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions"); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions"); " is 125.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions"); " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrders,The length of the statement  "             ApiResponse<InlineResponse20028> localVarResponse = SetTradeDependentOrdersWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat); " is 181.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders"); " is 123.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders"); " is 137.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsync,The length of the statement  "             ApiResponse<InlineResponse20028> localVarResponse = await SetTradeDependentOrdersAsyncWithHttpInfo(authorization' accountID' tradeSpecifier' setTradeDependentOrdersBody' acceptDatetimeFormat); " is 192.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders"); " is 123.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders"); " is 124.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "                throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders"); " is 137.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (tradeSpecifier != null) localVarPathParams.Add("tradeSpecifier"' Configuration.ApiClient.ParameterToString(tradeSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricing,The length of the statement  "             ApiResponse<InlineResponse20022> localVarResponse = StreamPricingWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' snapshot); " is 149.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (snapshot != null) localVarQueryParams.Add("snapshot"' Configuration.ApiClient.ParameterToString(snapshot)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsync,The length of the statement  "             ApiResponse<InlineResponse20022> localVarResponse = await StreamPricingAsyncWithHttpInfo(authorization' accountID' instruments' acceptDatetimeFormat' snapshot); " is 160.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (instruments != null) localVarQueryParams.Add("instruments"' Configuration.ApiClient.ParameterToString(instruments)); // query parameter " is 139.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (snapshot != null) localVarQueryParams.Add("snapshot"' Configuration.ApiClient.ParameterToString(snapshot)); // query parameter " is 130.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsync,The length of the statement  "             ApiResponse<InlineResponse20020> localVarResponse = await StreamTransactionsAsyncWithHttpInfo(authorization' accountID); " is 120.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (accountID != null) localVarPathParams.Add("accountID"' Configuration.ApiClient.ParameterToString(accountID)); // path parameter " is 131.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (orderSpecifier != null) localVarPathParams.Add("orderSpecifier"' Configuration.ApiClient.ParameterToString(orderSpecifier)); // path parameter " is 146.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (authorization != null) localVarHeaderParams.Add("Authorization"' Configuration.ApiClient.ParameterToString(authorization)); // header parameter " is 147.
Long Statement,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The length of the statement  "            if (acceptDatetimeFormat != null) localVarHeaderParams.Add("Accept-Datetime-Format"' Configuration.ApiClient.ParameterToString(acceptDatetimeFormat)); // header parameter " is 170.
Long Statement,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,ToString,The length of the statement  "            sb.Append("  OrderClientExtensionsModifyRejectTransaction: ").Append(OrderClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,ToString,The length of the statement  "            sb.Append("  TradeClientExtensionsModifyRejectTransaction: ").Append(TradeClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,ToString,The length of the statement  "            sb.Append("  TrailingStopLossOrderCancelRejectTransaction: ").Append(TrailingStopLossOrderCancelRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,ToString,The length of the statement  "            sb.Append("  OrderClientExtensionsModifyRejectTransaction: ").Append(OrderClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,ToString,The length of the statement  "            sb.Append("  TradeClientExtensionsModifyRejectTransaction: ").Append(TradeClientExtensionsModifyRejectTransaction).Append("\n"); " is 128.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Refresh,The length of the statement  "                Log.Trace("TradierBrokerage.DataQueueHandler.Refresh(): Updating tickers..." + string.Join("'"' _subscriptions.Values)); " is 120.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Stream,The length of the statement  "                        Log.Trace("TradierBrokerage.DataQueueHandler.Stream(): Handled breakout / socket close from jsonRead operation: " + err.Message); " is 129.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Stream,The length of the statement  "                        // Do nothing for now. Can come back later to fix. Errors are from Tradier not properly json encoding values E.g. "NaN" string. " is 127.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Stream,The length of the statement  "                        Log.Trace("TradierBrokerage.DataQueueHandler.Stream(): Handled breakout / socket close from jsonRead operation: " + err.Message); " is 129.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The length of the statement  "                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' raw.ErrorException.GetType().Name' raw.ErrorException.ToString())); " is 133.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "            //Get: {"sAccessToken":"123123"'"iExpiresIn":86399'"dtIssuedAt":"2014-10-15T16:59:52-04:00"'"sRefreshToken":"123123"'"sScope":"read write market trade stream"'"sStatus":"approved"'"success":true} " is 195.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "                        Log.Trace("SESSION REFRESHED: Access: " + AccessToken + " Refresh: " + RefreshToken + " Issued At: " + _lifeSpan + " JSON>>" " is 124.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "                        Log.Error("Tradier.RefreshSession(): Error Refreshing Session: URL: " + client.BuildUri(request) + " Response: " + result.Content); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,RefreshSession,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "RefreshSession"' "Failed to refresh access token: " + raw)); " is 125.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The length of the statement  "            var cachedOpenOrder = _cachedOpenOrdersByTradierOrderID.FirstOrDefault(x => x.Value.Order.Symbol == order.Symbol.Value).Value; " is 126.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The length of the statement  "                    Log.Error("TradierBrokerage.PlaceOrder(): Unable to locate existing QC Order when verifying single outstanding order per symbol."); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The length of the statement  "                var restOfOrder = new TradierPlaceOrderRequest(order' TradierOrderClass.Equity' 0) {Quantity = Math.Abs(secondOrderQuantity)}; " is 126.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,The length of the statement  "                Log.Trace("Unable to locate active Tradier order for QC order id: " + order.Id + " with Tradier ids: " + string.Join("' "' order.BrokerId)); " is 140.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UpdateRejected"' "Unable to modify Tradier order quantities.")); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,UpdateOrder,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UpdateFailed"' "Failed to update Tradier order id: " + activeOrder.Order.Id + ". " + errors)); " is 161.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierPlaceOrder,The length of the statement  "                        var recentOrder = orders.OrderByDescending(x => x.TransactionDate).FirstOrDefault(x => x.Symbol == order.Symbol && x.Quantity == order.Quantity && x.Direction == order.Direction && x.Type == order.Type); " is 203.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierPlaceOrder,The length of the statement  "                            OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "OrderError"' "Unable to resolve rejected Tradier order id for QC order: " + order.QCOrder.Id)); " is 160.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                                Log.Error(string.Format("TradierBrokerage.CheckForFills(): Unable to locate order {0} in cached open orders."' cachedOrderLocal.Key)); " is 134.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                    // wait a second and then check the order provider to see if we have these broker IDs' maybe they came in later (ex' symbol denied for short trading) " is 149.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                            Log.Trace("TradierBrokerage.CheckForFills(): Verifying missing brokerage IDs: " + string.Join("'"' localUnknownTradierOrderIDs)); " is 129.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                            var stillUnknownOrderIDs = localUnknownTradierOrderIDs.Where(x => !orders.Any(y => y.BrokerId.Contains(x.ToString()))).ToList(); " is 128.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                                // fetch all rejected intraday orders within the last minute' we're going to exclude rejected orders from the error condition " is 125.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "UnknownOrderId"' "Received unknown Tradier order id(s): " + ids)); " is 131.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                            OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UnknownIdResolution"' "An error ocurred while trying to resolve unknown Tradier order IDs: " + err)); " is 168.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The length of the statement  "                OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "CheckForFillsError"' "An error ocurred while checking for fills: " + err)); " is 142.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ProcessPotentiallyUpdatedOrder,The length of the statement  "                                        var message = string.Format("{0} Failed submitting contingent order for QC id: {1} Filled Tradier Order id: {2}"' qcOrder.Symbol' qcOrder.Id' updatedOrder.Id); " is 159.
Long Statement,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ProcessPotentiallyUpdatedOrder,The length of the statement  "                                    OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "ContingentOrderError"' "An error ocurred while trying to submit an Tradier contingent order: " + err)); " is 170.
Complex Conditional,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,messageArrived,The conditional expression  "message is UserResponse || message is CollateralInquiryAck || message is Logout ||                      message is MarketDataRequestReject || message is BusinessMessageReject || message is SecurityStatus"  is complex.
Complex Conditional,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnMessageImpl,The conditional expression  "raw.Type == "open" || raw.Type == "change" || raw.Type == "received" || raw.Type == "subscriptions" || raw.Type == "last_match""  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IBPlaceOrder,The conditional expression  "exchange == null &&                  order.Symbol.SecurityType == SecurityType.Option &&                  (order.Type == OrderType.MarketOnOpen || order.Type == OrderType.MarketOnClose)"  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The conditional expression  "!CanSubscribe(request.Symbol) ||                  (request.Symbol.ID.SecurityType == SecurityType.Option && request.Symbol.IsCanonical()) ||                  (request.Symbol.ID.SecurityType == SecurityType.Future && request.Symbol.IsCanonical())"  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetBrokerageSymbol,The conditional expression  "symbol.ID.SecurityType != SecurityType.Forex &&                  symbol.ID.SecurityType != SecurityType.Equity &&                  symbol.ID.SecurityType != SecurityType.Option &&                  symbol.ID.SecurityType != SecurityType.Future"  is complex.
Complex Conditional,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetLeanSymbol,The conditional expression  "securityType != SecurityType.Forex &&                  securityType != SecurityType.Equity &&                  securityType != SecurityType.Option &&                  securityType != SecurityType.Future"  is complex.
Complex Conditional,QuantConnect.Brokerages.Oanda.RestV1.DataType.Communications,Response,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\DataType\Communications\Response.cs,ToString,The conditional expression  "prop.Name != "Content" && prop.Name != "Subtitle" && prop.Name != "Title" && prop.Name != "UniqueId""  is complex.
Virtual Method Call from Constructor,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,OandaBrokerage,The constructor "OandaBrokerage" calls a virtual method "OnOrderEvent".
Virtual Method Call from Constructor,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,OandaBrokerage,The constructor "OandaBrokerage" calls a virtual method "OnAccountChanged".
Virtual Method Call from Constructor,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,OandaBrokerage,The constructor "OandaBrokerage" calls a virtual method "OnMessage".
Empty Catch Block,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Stop,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Stop,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,IsIbControllerRunning,The method has an empty catch block.
Empty Catch Block,Oanda.RestV20.Session,StreamSession,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,Oanda.RestV20.Session,StreamSession,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Oanda.RestV1.Session,StreamSession<T>,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Oanda.RestV1.Session,StreamSession<T>,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\Session\StreamSession.cs,StopSession,The method has an empty catch block.
Empty Catch Block,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The method has an empty catch block.
Magic Number,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (_lockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          if (WebSocket.IsOpen)                          {                              LastHeartbeatUtcTime = DateTime.UtcNow;                          }                            TimeSpan elapsed;                          lock (_lockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout))                          {                                if (WebSocket.IsOpen)                              {                                  // connection is still good                                  LastHeartbeatUtcTime = DateTime.UtcNow;                              }                              else                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues."));                              }                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              Reconnect();                                          }                                          catch (Exception err)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                              Log.Error(err);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(10000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (_lockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          if (WebSocket.IsOpen)                          {                              LastHeartbeatUtcTime = DateTime.UtcNow;                          }                            TimeSpan elapsed;                          lock (_lockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout))                          {                                if (WebSocket.IsOpen)                              {                                  // connection is still good                                  LastHeartbeatUtcTime = DateTime.UtcNow;                              }                              else                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues."));                              }                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              Reconnect();                                          }                                          catch (Exception err)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                              Log.Error(err);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(10000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages,BaseWebsocketsBrokerage,C:\repos\QuantConnect_Lean\Brokerages\BaseWebsocketsBrokerage.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (_lockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          if (WebSocket.IsOpen)                          {                              LastHeartbeatUtcTime = DateTime.UtcNow;                          }                            TimeSpan elapsed;                          lock (_lockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(_heartbeatTimeout))                          {                                if (WebSocket.IsOpen)                              {                                  // connection is still good                                  LastHeartbeatUtcTime = DateTime.UtcNow;                              }                              else                              {                                  _connectionLost = true;                                  nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with server lost. This could be because of internet connectivity issues."));                              }                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(_heartbeatTimeout))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              Reconnect();                                          }                                          catch (Exception err)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                              Log.Error(err);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(10000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,FxcmBrokerage,The following statement contains a magic number: HistoryResponseTimeout = 5000;
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The following statement contains a magic number: if (!EnableOnlyHistoryRequests)              {                  _connectionMonitorThread = new Thread(() =>                  {                      _lastReadyMessageTime = DateTime.UtcNow;                        try                      {                          while (!_cancellationTokenSource.IsCancellationRequested)                          {                              TimeSpan elapsed;                              lock (_lockerConnectionMonitor)                              {                                  elapsed = DateTime.UtcNow - _lastReadyMessageTime;                              }                                if (!_connectionLost && elapsed > TimeSpan.FromSeconds(10))                              {                                  _connectionLost = true;                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with FXCM server lost. " +                                                                               "This could be because of internet connectivity issues. "));                              }                              else if (_connectionLost && IsWithinTradingHours())                              {                                  Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): Attempting reconnection...");                                    try                                  {                                      // log out                                      try                                      {                                          _gateway.logout();                                      }                                      catch (Exception)                                      {                                          // ignored                                      }                                        // remove the message listeners                                      _gateway.removeGenericMessageListener(this);                                      _gateway.removeStatusMessageListener(this);                                        // register the message listeners with the gateway                                      _gateway.registerGenericMessageListener(this);                                      _gateway.registerStatusMessageListener(this);                                        // log in                                      _gateway.login(loginProperties);                                        // load instruments' accounts' orders' positions                                      LoadInstruments();                                      if (!EnableOnlyHistoryRequests)                                      {                                          LoadAccounts();                                          LoadOpenOrders();                                          LoadOpenPositions();                                      }                                        _connectionLost = false;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with FXCM server restored."));                                  }                                  catch (Exception exception)                                  {                                      Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): reconnect failed.");                                      Log.Error(exception);                                  }                              }                                Thread.Sleep(5000);                          }                      }                      catch (Exception exception)                      {                          Log.Error(exception);                      }                  }) { IsBackground = true };                  _connectionMonitorThread.Start();                  while (!_connectionMonitorThread.IsAlive)                  {                      Thread.Sleep(1);                  }              }
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,Connect,The following statement contains a magic number: if (!EnableOnlyHistoryRequests)              {                  _connectionMonitorThread = new Thread(() =>                  {                      _lastReadyMessageTime = DateTime.UtcNow;                        try                      {                          while (!_cancellationTokenSource.IsCancellationRequested)                          {                              TimeSpan elapsed;                              lock (_lockerConnectionMonitor)                              {                                  elapsed = DateTime.UtcNow - _lastReadyMessageTime;                              }                                if (!_connectionLost && elapsed > TimeSpan.FromSeconds(10))                              {                                  _connectionLost = true;                                    OnMessage(BrokerageMessageEvent.Disconnected("Connection with FXCM server lost. " +                                                                               "This could be because of internet connectivity issues. "));                              }                              else if (_connectionLost && IsWithinTradingHours())                              {                                  Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): Attempting reconnection...");                                    try                                  {                                      // log out                                      try                                      {                                          _gateway.logout();                                      }                                      catch (Exception)                                      {                                          // ignored                                      }                                        // remove the message listeners                                      _gateway.removeGenericMessageListener(this);                                      _gateway.removeStatusMessageListener(this);                                        // register the message listeners with the gateway                                      _gateway.registerGenericMessageListener(this);                                      _gateway.registerStatusMessageListener(this);                                        // log in                                      _gateway.login(loginProperties);                                        // load instruments' accounts' orders' positions                                      LoadInstruments();                                      if (!EnableOnlyHistoryRequests)                                      {                                          LoadAccounts();                                          LoadOpenOrders();                                          LoadOpenPositions();                                      }                                        _connectionLost = false;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with FXCM server restored."));                                  }                                  catch (Exception exception)                                  {                                      Log.Trace("FxcmBrokerage.ConnectionMonitorThread(): reconnect failed.");                                      Log.Error(exception);                                  }                              }                                Thread.Sleep(5000);                          }                      }                      catch (Exception exception)                      {                          Log.Error(exception);                      }                  }) { IsBackground = true };                  _connectionMonitorThread.Start();                  while (!_connectionMonitorThread.IsAlive)                  {                      Thread.Sleep(1);                  }              }
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,IsWithinTradingHours,The following statement contains a magic number: return !(time.DayOfWeek == DayOfWeek.Friday && time.TimeOfDay > new TimeSpan(16' 55' 0) ||                       time.DayOfWeek == DayOfWeek.Saturday ||                       time.DayOfWeek == DayOfWeek.Sunday && time.TimeOfDay < new TimeSpan(17' 0' 0) ||                       time.Month == 12 && time.Day == 25 ||                       time.Month == 1 && time.Day == 1);
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetAccountHoldings,The following statement contains a magic number: if (fxcmSymbols.Count > 0)              {                  var quotes = GetQuotes(fxcmSymbols).ToDictionary(x => x.getInstrument().getSymbol());                  foreach (var holding in holdings)                  {                      MarketDataSnapshot quote;                      if (quotes.TryGetValue(_symbolMapper.GetBrokerageSymbol(holding.Symbol)' out quote))                      {                          holding.MarketPrice = Convert.ToDecimal((quote.getBidClose() + quote.getAskClose()) / 2);                      }                  }              }
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetCashBalance,The following statement contains a magic number: foreach (var trade in _openPositions.Values)              {                  //settlement price for the trade                  var settlementPrice = Convert.ToDecimal(trade.getSettlPrice());                  //direction of trade                  var direction = trade.getPositionQty().getLongQty() > 0 ? 1 : -1;                  //quantity of the asset                  var quantity = Convert.ToDecimal(trade.getPositionQty().getQty());                  //quantity of base currency                  var baseQuantity = direction * quantity;                  //quantity of quote currency                  var quoteQuantity = -direction * quantity * settlementPrice;                  //base currency                  var baseCurrency = trade.getCurrency();                  //quote currency                  var quoteCurrency = FxcmSymbolMapper.ConvertFxcmSymbolToLeanSymbol(trade.getInstrument().getSymbol());                  quoteCurrency = quoteCurrency.Substring(quoteCurrency.Length - 3);                    var baseCurrencyObject = (from cash in cashBook where cash.Symbol == baseCurrency select cash).FirstOrDefault();                  //update the value of the base currency                  if (baseCurrencyObject != null)                  {                      baseCurrencyObject.AddAmount(baseQuantity);                  }                  else                  {                      //add the base currency if not present                      cashBook.Add(new Cash(baseCurrency' baseQuantity' GetUsdConversion(baseCurrency)));                  }                    var quoteCurrencyObject = (from cash in cashBook where cash.Symbol == quoteCurrency select cash).FirstOrDefault();                  //update the value of the quote currency                  if (quoteCurrencyObject != null)                  {                      quoteCurrencyObject.AddAmount(quoteQuantity);                  }                  else                  {                      //add the quote currency if not present                      cashBook.Add(new Cash(quoteCurrency' quoteQuantity' GetUsdConversion(quoteCurrency)));                  }              }
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,PlaceOrder,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.PlaceOrder(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,UpdateOrder,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.UpdateOrder(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,CancelOrder,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.CancelOrder(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The following statement contains a magic number: while (end > request.StartTimeUtc)              {                  Log.Debug(string.Format("FxcmBrokerage.GetHistory(): Requesting {0:O} to {1:O}"' end' request.StartTimeUtc));                  _lastHistoryChunk.Clear();                    var mdr = new MarketDataRequest();                  mdr.setSubscriptionRequestType(SubscriptionRequestTypeFactory.SNAPSHOT);                  mdr.setResponseFormat(IFixMsgTypeDefs.__Fields.MSGTYPE_FXCMRESPONSE);                  mdr.setFXCMTimingInterval(interval);                  mdr.setMDEntryTypeSet(MarketDataRequest.MDENTRYTYPESET_ALL);                    mdr.setFXCMStartDate(new UTCDate(ToJavaDateUtc(request.StartTimeUtc)));                  mdr.setFXCMStartTime(new UTCTimeOnly(ToJavaDateUtc(request.StartTimeUtc)));                  mdr.setFXCMEndDate(new UTCDate(ToJavaDateUtc(end)));                  mdr.setFXCMEndTime(new UTCTimeOnly(ToJavaDateUtc(end)));                  mdr.addRelatedSymbol(_fxcmInstruments[_symbolMapper.GetBrokerageSymbol(request.Symbol)]);                    AutoResetEvent autoResetEvent;                  lock (_locker)                  {                      _currentRequest = _gateway.sendMessage(mdr);                      autoResetEvent = new AutoResetEvent(false);                      _mapRequestsToAutoResetEvents[_currentRequest] = autoResetEvent;                      _pendingHistoryRequests.Add(_currentRequest);                  }                    if (!autoResetEvent.WaitOne(HistoryResponseTimeout))                  {                      // No response can mean genuine timeout or the history data has ended.                        // 90% of the time no response because no data; widen the search net to 5m if we don't get a response:                      if (request.StartTimeUtc.AddSeconds(300) >= end)                      {                          break;                      }                        // 5% of the time its because the data ends at a specific' repeatible time not close to our desired endtime:                      if (end == lastEndTime)                      {                          Log.Trace("FxcmBrokerage.GetHistory(): Request for {0} ended at {1:O}"' request.Symbol.Value' end);                          break;                      }                        // 5% of the time its because of an internet / time of day / api settings / timeout: throw if this is the *second* attempt.                      if (EnableOnlyHistoryRequests && lastEndTime != DateTime.MinValue)                      {                          throw new TimeoutException(string.Format("FxcmBrokerage.GetHistory(): History operation ending in {0:O} took longer than {1} seconds. This may be because there is no data' retrying..."' end' (decimal)HistoryResponseTimeout / 1000));                      }                        // Assuming Timeout: If we've already retried quite a few times' lets bail.                      if (++attempt > MaximumHistoryRetryAttempts)                      {                          Log.Trace("FxcmBrokerage.GetHistory(): Maximum attempts reached for: " + request.Symbol.Value);                          break;                      }                        // Assuming Timeout: Save end time and if have the same endtime next time' break since its likely there's no data after that time.                      lastEndTime = end;                      Log.Trace("FxcmBrokerage.GetHistory(): Attempt " + attempt + " for: " + request.Symbol.Value + " ended at " + lastEndTime.ToString("O"));                      continue;                  }                    // Add data                  lock (_locker)                  {                      history.InsertRange(0' _lastHistoryChunk);                  }                    var firstDateUtc = _lastHistoryChunk[0].Time.ConvertToUtc(exchangeTimeZone);                  if (end != firstDateUtc)                  {                      // new end date = first datapoint date.                      end = request.Resolution == Resolution.Tick ? firstDateUtc.AddMilliseconds(-1) : firstDateUtc.AddSeconds(-1);                        if (request.StartTimeUtc.AddSeconds(10) >= end)                          break;                  }                  else                  {                      break;                  }              }
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The following statement contains a magic number: while (end > request.StartTimeUtc)              {                  Log.Debug(string.Format("FxcmBrokerage.GetHistory(): Requesting {0:O} to {1:O}"' end' request.StartTimeUtc));                  _lastHistoryChunk.Clear();                    var mdr = new MarketDataRequest();                  mdr.setSubscriptionRequestType(SubscriptionRequestTypeFactory.SNAPSHOT);                  mdr.setResponseFormat(IFixMsgTypeDefs.__Fields.MSGTYPE_FXCMRESPONSE);                  mdr.setFXCMTimingInterval(interval);                  mdr.setMDEntryTypeSet(MarketDataRequest.MDENTRYTYPESET_ALL);                    mdr.setFXCMStartDate(new UTCDate(ToJavaDateUtc(request.StartTimeUtc)));                  mdr.setFXCMStartTime(new UTCTimeOnly(ToJavaDateUtc(request.StartTimeUtc)));                  mdr.setFXCMEndDate(new UTCDate(ToJavaDateUtc(end)));                  mdr.setFXCMEndTime(new UTCTimeOnly(ToJavaDateUtc(end)));                  mdr.addRelatedSymbol(_fxcmInstruments[_symbolMapper.GetBrokerageSymbol(request.Symbol)]);                    AutoResetEvent autoResetEvent;                  lock (_locker)                  {                      _currentRequest = _gateway.sendMessage(mdr);                      autoResetEvent = new AutoResetEvent(false);                      _mapRequestsToAutoResetEvents[_currentRequest] = autoResetEvent;                      _pendingHistoryRequests.Add(_currentRequest);                  }                    if (!autoResetEvent.WaitOne(HistoryResponseTimeout))                  {                      // No response can mean genuine timeout or the history data has ended.                        // 90% of the time no response because no data; widen the search net to 5m if we don't get a response:                      if (request.StartTimeUtc.AddSeconds(300) >= end)                      {                          break;                      }                        // 5% of the time its because the data ends at a specific' repeatible time not close to our desired endtime:                      if (end == lastEndTime)                      {                          Log.Trace("FxcmBrokerage.GetHistory(): Request for {0} ended at {1:O}"' request.Symbol.Value' end);                          break;                      }                        // 5% of the time its because of an internet / time of day / api settings / timeout: throw if this is the *second* attempt.                      if (EnableOnlyHistoryRequests && lastEndTime != DateTime.MinValue)                      {                          throw new TimeoutException(string.Format("FxcmBrokerage.GetHistory(): History operation ending in {0:O} took longer than {1} seconds. This may be because there is no data' retrying..."' end' (decimal)HistoryResponseTimeout / 1000));                      }                        // Assuming Timeout: If we've already retried quite a few times' lets bail.                      if (++attempt > MaximumHistoryRetryAttempts)                      {                          Log.Trace("FxcmBrokerage.GetHistory(): Maximum attempts reached for: " + request.Symbol.Value);                          break;                      }                        // Assuming Timeout: Save end time and if have the same endtime next time' break since its likely there's no data after that time.                      lastEndTime = end;                      Log.Trace("FxcmBrokerage.GetHistory(): Attempt " + attempt + " for: " + request.Symbol.Value + " ended at " + lastEndTime.ToString("O"));                      continue;                  }                    // Add data                  lock (_locker)                  {                      history.InsertRange(0' _lastHistoryChunk);                  }                    var firstDateUtc = _lastHistoryChunk[0].Time.ConvertToUtc(exchangeTimeZone);                  if (end != firstDateUtc)                  {                      // new end date = first datapoint date.                      end = request.Resolution == Resolution.Tick ? firstDateUtc.AddMilliseconds(-1) : firstDateUtc.AddSeconds(-1);                        if (request.StartTimeUtc.AddSeconds(10) >= end)                          break;                  }                  else                  {                      break;                  }              }
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetHistory,The following statement contains a magic number: while (end > request.StartTimeUtc)              {                  Log.Debug(string.Format("FxcmBrokerage.GetHistory(): Requesting {0:O} to {1:O}"' end' request.StartTimeUtc));                  _lastHistoryChunk.Clear();                    var mdr = new MarketDataRequest();                  mdr.setSubscriptionRequestType(SubscriptionRequestTypeFactory.SNAPSHOT);                  mdr.setResponseFormat(IFixMsgTypeDefs.__Fields.MSGTYPE_FXCMRESPONSE);                  mdr.setFXCMTimingInterval(interval);                  mdr.setMDEntryTypeSet(MarketDataRequest.MDENTRYTYPESET_ALL);                    mdr.setFXCMStartDate(new UTCDate(ToJavaDateUtc(request.StartTimeUtc)));                  mdr.setFXCMStartTime(new UTCTimeOnly(ToJavaDateUtc(request.StartTimeUtc)));                  mdr.setFXCMEndDate(new UTCDate(ToJavaDateUtc(end)));                  mdr.setFXCMEndTime(new UTCTimeOnly(ToJavaDateUtc(end)));                  mdr.addRelatedSymbol(_fxcmInstruments[_symbolMapper.GetBrokerageSymbol(request.Symbol)]);                    AutoResetEvent autoResetEvent;                  lock (_locker)                  {                      _currentRequest = _gateway.sendMessage(mdr);                      autoResetEvent = new AutoResetEvent(false);                      _mapRequestsToAutoResetEvents[_currentRequest] = autoResetEvent;                      _pendingHistoryRequests.Add(_currentRequest);                  }                    if (!autoResetEvent.WaitOne(HistoryResponseTimeout))                  {                      // No response can mean genuine timeout or the history data has ended.                        // 90% of the time no response because no data; widen the search net to 5m if we don't get a response:                      if (request.StartTimeUtc.AddSeconds(300) >= end)                      {                          break;                      }                        // 5% of the time its because the data ends at a specific' repeatible time not close to our desired endtime:                      if (end == lastEndTime)                      {                          Log.Trace("FxcmBrokerage.GetHistory(): Request for {0} ended at {1:O}"' request.Symbol.Value' end);                          break;                      }                        // 5% of the time its because of an internet / time of day / api settings / timeout: throw if this is the *second* attempt.                      if (EnableOnlyHistoryRequests && lastEndTime != DateTime.MinValue)                      {                          throw new TimeoutException(string.Format("FxcmBrokerage.GetHistory(): History operation ending in {0:O} took longer than {1} seconds. This may be because there is no data' retrying..."' end' (decimal)HistoryResponseTimeout / 1000));                      }                        // Assuming Timeout: If we've already retried quite a few times' lets bail.                      if (++attempt > MaximumHistoryRetryAttempts)                      {                          Log.Trace("FxcmBrokerage.GetHistory(): Maximum attempts reached for: " + request.Symbol.Value);                          break;                      }                        // Assuming Timeout: Save end time and if have the same endtime next time' break since its likely there's no data after that time.                      lastEndTime = end;                      Log.Trace("FxcmBrokerage.GetHistory(): Attempt " + attempt + " for: " + request.Symbol.Value + " ended at " + lastEndTime.ToString("O"));                      continue;                  }                    // Add data                  lock (_locker)                  {                      history.InsertRange(0' _lastHistoryChunk);                  }                    var firstDateUtc = _lastHistoryChunk[0].Time.ConvertToUtc(exchangeTimeZone);                  if (end != firstDateUtc)                  {                      // new end date = first datapoint date.                      end = request.Resolution == Resolution.Tick ? firstDateUtc.AddMilliseconds(-1) : firstDateUtc.AddSeconds(-1);                        if (request.StartTimeUtc.AddSeconds(10) >= end)                          break;                  }                  else                  {                      break;                  }              }
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadInstruments,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.LoadInstruments(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadAccounts,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.LoadAccounts(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadOpenOrders,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.LoadOpenOrders(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,LoadOpenPositions,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.LoadOpenPositions(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetQuotes,The following statement contains a magic number: if (!autoResetEvent.WaitOne(ResponseTimeout))                  throw new TimeoutException(string.Format("FxcmBrokerage.GetQuotes(): Operation took longer than {0} seconds."' (decimal)ResponseTimeout / 1000));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,GetUsdConversion,The following statement contains a magic number: var rate = (decimal)(quotes[0].getBidClose() + quotes[0].getAskClose()) / 2;
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmBrokerageFactory,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerageFactory.cs,CreateBrokerageMessageHandler,The following statement contains a magic number: return new DefaultBrokerageMessageHandler(algorithm' job' api' openThreshold: TimeSpan.FromMinutes(-30));
Magic Number,QuantConnect.Brokerages.Fxcm,FxcmSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmSymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: return tokens.Length == 2 && KnownCurrencies.Contains(tokens[0]) && KnownCurrencies.Contains(tokens[1])                  ? SecurityType.Forex                  : SecurityType.Cfd;
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ConvertSymbol,The following statement contains a magic number: return symbol.Value.Substring(0' 3).ToLower() + "-" + symbol.Value.Substring(3' 3).ToLower();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ConvertSymbol,The following statement contains a magic number: return symbol.Value.Substring(0' 3).ToLower() + "-" + symbol.Value.Substring(3' 3).ToLower();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,ConvertSymbol,The following statement contains a magic number: return symbol.Value.Substring(0' 3).ToLower() + "-" + symbol.Value.Substring(3' 3).ToLower();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,OnL2Update,The following statement contains a magic number: try              {                  var message = JsonConvert.DeserializeObject<Messages.L2Update>(data);                    var symbol = ConvertProductId(message.ProductId);                    var orderBook = _orderBooks[symbol];                    foreach (var row in message.Changes)                  {                      var side = row[0];                      var price = Convert.ToDecimal(row[1]' CultureInfo.InvariantCulture);                      var size = decimal.Parse(row[2]' NumberStyles.Float' CultureInfo.InvariantCulture);                      if (side == "buy")                      {                          if (size == 0)                          {                              orderBook.RemoveBidRow(price);                          }                          else                          {                              orderBook.UpdateBidRow(price' size);                          }                      }                      else if (side == "sell")                      {                          if (size == 0)                          {                              orderBook.RemoveAskRow(price);                          }                          else                          {                              orderBook.UpdateAskRow(price' size);                          }                      }                    }              }              catch (Exception e)              {                  Log.Error(e' "Data: " + data);                  throw;              }
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,Subscribe,The following statement contains a magic number: var products = ChannelList.Select(s => s.Value.Symbol.Substring(0' 3) + "-" + s.Value.Symbol.Substring(3)).ToArray();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,Subscribe,The following statement contains a magic number: var products = ChannelList.Select(s => s.Value.Symbol.Substring(0' 3) + "-" + s.Value.Symbol.Substring(3)).ToArray();
Magic Number,QuantConnect.Brokerages.GDAX,GDAXBrokerage,C:\repos\QuantConnect_Lean\Brokerages\GDAX\GDAXBrokerage.Utility.cs,PollTick,The following statement contains a magic number: int delay = 36000000;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following statement contains a magic number: if (!faResetEvent.WaitOne(2000))              {                  Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Aliases failed. Operation took longer than 2 seconds.");                  return false;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following statement contains a magic number: if (!faResetEvent.WaitOne(2000))              {                  Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Groups failed. Operation took longer than 2 seconds.");                  return false;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following statement contains a magic number: if (!faResetEvent.WaitOne(2000))              {                  Log.Trace("InteractiveBrokersBrokerage.DownloadFinancialAdvisorConfiguration(): Download FA Profiles failed. Operation took longer than 2 seconds.");                  return false;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,InteractiveBrokersBrokerage,The following statement contains a magic number: new Thread(() =>              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.ResetHandler(): thread started.");                        while (!_ctsRestartGateway.IsCancellationRequested)                      {                          if (_resetEventRestartGateway.WaitOne(1000' _ctsRestartGateway.Token))                          {                              Log.Trace("InteractiveBrokersBrokerage.ResetHandler(): Reset sequence start.");                                try                              {                                  ResetGatewayConnection();                              }                              catch (Exception exception)                              {                                  Log.Error("InteractiveBrokersBrokerage.ResetHandler(): Error in ResetGatewayConnection: " + exception);                              }                                Log.Trace("InteractiveBrokersBrokerage.ResetHandler(): Reset sequence end.");                          }                      }                        Log.Trace("InteractiveBrokersBrokerage.ResetHandler(): thread ended.");                  }                  catch (Exception exception)                  {                      Log.Error("InteractiveBrokersBrokerage.ResetHandler(): Error in reset handler thread: " + exception);                  }              }) { IsBackground = true }.Start();
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetOpenOrders,The following statement contains a magic number: if (!manualResetEvent.WaitOne(15000))              {                  throw new TimeoutException("InteractiveBrokersBrokerage.GetOpenOrders(): Operation took longer than 15 seconds.");              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetAccountHoldings,The following statement contains a magic number: var tasks = holdings.Select(local =>              {                  // we need to resolve the conversion rate for non-USD currencies                  if (local.Type != SecurityType.Forex)                  {                      // this assumes all non-forex are us denominated' we should add the currency to 'holding'                      local.ConversionRate = 1m;                      return null;                  }                  // if quote currency is in USD don't bother making the request                  var currency = local.Symbol.Value.Substring(3);                  if (currency == "USD")                  {                      local.ConversionRate = 1m;                      return null;                  }                    // this will allow us to do this in parallel                  return Task.Factory.StartNew(() => local.ConversionRate = GetUsdConversion(currency));              }).Where(x => x != null).ToArray();
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetAccountHoldings,The following statement contains a magic number: Task.WaitAll(tasks' 5000);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetExecutions,The following statement contains a magic number: if (!manualResetEvent.WaitOne(5000))              {                  throw new TimeoutException("InteractiveBrokersBrokerage.GetExecutions(): Operation took longer than 5 seconds.");              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: const int maxAttempts = 5;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.Connect(): Attempting to connect ({0}/{1}) ..."' attempt' maxAttempts);                        // if message processing thread is still running' wait until it terminates                      Disconnect();                        // we're going to try and connect several times' if successful break                      _client.ClientSocket.eConnect(_host' _port' _clientId);                        // create the message processing thread                      var reader = new EReader(_client.ClientSocket' _signal);                      reader.Start();                        _messageProcessingThread = new Thread(() =>                      {                          Log.Trace("IB message processing thread started: #" + Thread.CurrentThread.ManagedThreadId);                            while (_client.ClientSocket.IsConnected())                          {                              try                              {                                  _signal.waitForSignal();                                  reader.processMsgs();                              }                              catch (Exception error)                              {                                  // error in message processing thread' log error and disconnect                                  Log.Error("Error in message processing thread #" + Thread.CurrentThread.ManagedThreadId + ": " + error);                              }                          }                            Log.Trace("IB message processing thread ended: #" + Thread.CurrentThread.ManagedThreadId);                      }) { IsBackground = true };                        _messageProcessingThread.Start();                        // pause for a moment to receive next valid ID message from gateway                      if (!_waitForNextValidId.WaitOne(15000))                      {                          Log.Trace("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                            // no response' disconnect and retry                          Disconnect();                            var ibcLogContent = LoadCurrentIbControllerLogFile();                            // if existing session detected from IBController log file' log error and throw exception                          if (ExistingSessionDetected(ibcLogContent))                          {                              existingSessionDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): An existing session was detected and will not be automatically disconnected. Please close the existing session manually.");                          }                            // if security dialog detected from IBController log file' log error and throw exception                          if (SecurityDialogDetected(ibcLogContent))                          {                              securityDialogDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): A security dialog was detected for Second Factor/Code Card Authentication. Please opt out of the Secure Login System: Manage Account > Security > Secure Login System > SLS Opt Out");                          }                            // max out at 5 attempts to connect ~1 minute                          if (attempt++ < maxAttempts)                          {                              Thread.Sleep(1000);                              continue;                          }                            throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                      }                        Log.Trace("IB next valid id received.");                        if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state.");                        if (IsFinancialAdvisor)                      {                          if (!DownloadFinancialAdvisorAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                          }                      }                      else                      {                          if (!DownloadAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed. Operation took longer than 15 seconds.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed.");                          }                      }                        // enable detailed logging                      _client.ClientSocket.setServerLogLevel(5);                        break;                  }                  catch (Exception err)                  {                      // if existing session or security dialog detected from IBController log file' log error and throw exception                      if (existingSessionDetected || securityDialogDetected)                      {                          Log.Error(err);                          throw;                      }                        // max out at 5 attempts to connect ~1 minute                      if (attempt++ < maxAttempts)                      {                          Thread.Sleep(15000);                          continue;                      }                        // we couldn't connect after several attempts' log the error and throw an exception                      Log.Error(err);                        throw;                  }              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.Connect(): Attempting to connect ({0}/{1}) ..."' attempt' maxAttempts);                        // if message processing thread is still running' wait until it terminates                      Disconnect();                        // we're going to try and connect several times' if successful break                      _client.ClientSocket.eConnect(_host' _port' _clientId);                        // create the message processing thread                      var reader = new EReader(_client.ClientSocket' _signal);                      reader.Start();                        _messageProcessingThread = new Thread(() =>                      {                          Log.Trace("IB message processing thread started: #" + Thread.CurrentThread.ManagedThreadId);                            while (_client.ClientSocket.IsConnected())                          {                              try                              {                                  _signal.waitForSignal();                                  reader.processMsgs();                              }                              catch (Exception error)                              {                                  // error in message processing thread' log error and disconnect                                  Log.Error("Error in message processing thread #" + Thread.CurrentThread.ManagedThreadId + ": " + error);                              }                          }                            Log.Trace("IB message processing thread ended: #" + Thread.CurrentThread.ManagedThreadId);                      }) { IsBackground = true };                        _messageProcessingThread.Start();                        // pause for a moment to receive next valid ID message from gateway                      if (!_waitForNextValidId.WaitOne(15000))                      {                          Log.Trace("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                            // no response' disconnect and retry                          Disconnect();                            var ibcLogContent = LoadCurrentIbControllerLogFile();                            // if existing session detected from IBController log file' log error and throw exception                          if (ExistingSessionDetected(ibcLogContent))                          {                              existingSessionDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): An existing session was detected and will not be automatically disconnected. Please close the existing session manually.");                          }                            // if security dialog detected from IBController log file' log error and throw exception                          if (SecurityDialogDetected(ibcLogContent))                          {                              securityDialogDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): A security dialog was detected for Second Factor/Code Card Authentication. Please opt out of the Secure Login System: Manage Account > Security > Secure Login System > SLS Opt Out");                          }                            // max out at 5 attempts to connect ~1 minute                          if (attempt++ < maxAttempts)                          {                              Thread.Sleep(1000);                              continue;                          }                            throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                      }                        Log.Trace("IB next valid id received.");                        if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state.");                        if (IsFinancialAdvisor)                      {                          if (!DownloadFinancialAdvisorAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                          }                      }                      else                      {                          if (!DownloadAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed. Operation took longer than 15 seconds.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed.");                          }                      }                        // enable detailed logging                      _client.ClientSocket.setServerLogLevel(5);                        break;                  }                  catch (Exception err)                  {                      // if existing session or security dialog detected from IBController log file' log error and throw exception                      if (existingSessionDetected || securityDialogDetected)                      {                          Log.Error(err);                          throw;                      }                        // max out at 5 attempts to connect ~1 minute                      if (attempt++ < maxAttempts)                      {                          Thread.Sleep(15000);                          continue;                      }                        // we couldn't connect after several attempts' log the error and throw an exception                      Log.Error(err);                        throw;                  }              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.Connect(): Attempting to connect ({0}/{1}) ..."' attempt' maxAttempts);                        // if message processing thread is still running' wait until it terminates                      Disconnect();                        // we're going to try and connect several times' if successful break                      _client.ClientSocket.eConnect(_host' _port' _clientId);                        // create the message processing thread                      var reader = new EReader(_client.ClientSocket' _signal);                      reader.Start();                        _messageProcessingThread = new Thread(() =>                      {                          Log.Trace("IB message processing thread started: #" + Thread.CurrentThread.ManagedThreadId);                            while (_client.ClientSocket.IsConnected())                          {                              try                              {                                  _signal.waitForSignal();                                  reader.processMsgs();                              }                              catch (Exception error)                              {                                  // error in message processing thread' log error and disconnect                                  Log.Error("Error in message processing thread #" + Thread.CurrentThread.ManagedThreadId + ": " + error);                              }                          }                            Log.Trace("IB message processing thread ended: #" + Thread.CurrentThread.ManagedThreadId);                      }) { IsBackground = true };                        _messageProcessingThread.Start();                        // pause for a moment to receive next valid ID message from gateway                      if (!_waitForNextValidId.WaitOne(15000))                      {                          Log.Trace("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                            // no response' disconnect and retry                          Disconnect();                            var ibcLogContent = LoadCurrentIbControllerLogFile();                            // if existing session detected from IBController log file' log error and throw exception                          if (ExistingSessionDetected(ibcLogContent))                          {                              existingSessionDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): An existing session was detected and will not be automatically disconnected. Please close the existing session manually.");                          }                            // if security dialog detected from IBController log file' log error and throw exception                          if (SecurityDialogDetected(ibcLogContent))                          {                              securityDialogDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): A security dialog was detected for Second Factor/Code Card Authentication. Please opt out of the Secure Login System: Manage Account > Security > Secure Login System > SLS Opt Out");                          }                            // max out at 5 attempts to connect ~1 minute                          if (attempt++ < maxAttempts)                          {                              Thread.Sleep(1000);                              continue;                          }                            throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                      }                        Log.Trace("IB next valid id received.");                        if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state.");                        if (IsFinancialAdvisor)                      {                          if (!DownloadFinancialAdvisorAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                          }                      }                      else                      {                          if (!DownloadAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed. Operation took longer than 15 seconds.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed.");                          }                      }                        // enable detailed logging                      _client.ClientSocket.setServerLogLevel(5);                        break;                  }                  catch (Exception err)                  {                      // if existing session or security dialog detected from IBController log file' log error and throw exception                      if (existingSessionDetected || securityDialogDetected)                      {                          Log.Error(err);                          throw;                      }                        // max out at 5 attempts to connect ~1 minute                      if (attempt++ < maxAttempts)                      {                          Thread.Sleep(15000);                          continue;                      }                        // we couldn't connect after several attempts' log the error and throw an exception                      Log.Error(err);                        throw;                  }              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.Connect(): Attempting to connect ({0}/{1}) ..."' attempt' maxAttempts);                        // if message processing thread is still running' wait until it terminates                      Disconnect();                        // we're going to try and connect several times' if successful break                      _client.ClientSocket.eConnect(_host' _port' _clientId);                        // create the message processing thread                      var reader = new EReader(_client.ClientSocket' _signal);                      reader.Start();                        _messageProcessingThread = new Thread(() =>                      {                          Log.Trace("IB message processing thread started: #" + Thread.CurrentThread.ManagedThreadId);                            while (_client.ClientSocket.IsConnected())                          {                              try                              {                                  _signal.waitForSignal();                                  reader.processMsgs();                              }                              catch (Exception error)                              {                                  // error in message processing thread' log error and disconnect                                  Log.Error("Error in message processing thread #" + Thread.CurrentThread.ManagedThreadId + ": " + error);                              }                          }                            Log.Trace("IB message processing thread ended: #" + Thread.CurrentThread.ManagedThreadId);                      }) { IsBackground = true };                        _messageProcessingThread.Start();                        // pause for a moment to receive next valid ID message from gateway                      if (!_waitForNextValidId.WaitOne(15000))                      {                          Log.Trace("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                            // no response' disconnect and retry                          Disconnect();                            var ibcLogContent = LoadCurrentIbControllerLogFile();                            // if existing session detected from IBController log file' log error and throw exception                          if (ExistingSessionDetected(ibcLogContent))                          {                              existingSessionDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): An existing session was detected and will not be automatically disconnected. Please close the existing session manually.");                          }                            // if security dialog detected from IBController log file' log error and throw exception                          if (SecurityDialogDetected(ibcLogContent))                          {                              securityDialogDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): A security dialog was detected for Second Factor/Code Card Authentication. Please opt out of the Secure Login System: Manage Account > Security > Secure Login System > SLS Opt Out");                          }                            // max out at 5 attempts to connect ~1 minute                          if (attempt++ < maxAttempts)                          {                              Thread.Sleep(1000);                              continue;                          }                            throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                      }                        Log.Trace("IB next valid id received.");                        if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state.");                        if (IsFinancialAdvisor)                      {                          if (!DownloadFinancialAdvisorAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                          }                      }                      else                      {                          if (!DownloadAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed. Operation took longer than 15 seconds.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed.");                          }                      }                        // enable detailed logging                      _client.ClientSocket.setServerLogLevel(5);                        break;                  }                  catch (Exception err)                  {                      // if existing session or security dialog detected from IBController log file' log error and throw exception                      if (existingSessionDetected || securityDialogDetected)                      {                          Log.Error(err);                          throw;                      }                        // max out at 5 attempts to connect ~1 minute                      if (attempt++ < maxAttempts)                      {                          Thread.Sleep(15000);                          continue;                      }                        // we couldn't connect after several attempts' log the error and throw an exception                      Log.Error(err);                        throw;                  }              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.Connect(): Attempting to connect ({0}/{1}) ..."' attempt' maxAttempts);                        // if message processing thread is still running' wait until it terminates                      Disconnect();                        // we're going to try and connect several times' if successful break                      _client.ClientSocket.eConnect(_host' _port' _clientId);                        // create the message processing thread                      var reader = new EReader(_client.ClientSocket' _signal);                      reader.Start();                        _messageProcessingThread = new Thread(() =>                      {                          Log.Trace("IB message processing thread started: #" + Thread.CurrentThread.ManagedThreadId);                            while (_client.ClientSocket.IsConnected())                          {                              try                              {                                  _signal.waitForSignal();                                  reader.processMsgs();                              }                              catch (Exception error)                              {                                  // error in message processing thread' log error and disconnect                                  Log.Error("Error in message processing thread #" + Thread.CurrentThread.ManagedThreadId + ": " + error);                              }                          }                            Log.Trace("IB message processing thread ended: #" + Thread.CurrentThread.ManagedThreadId);                      }) { IsBackground = true };                        _messageProcessingThread.Start();                        // pause for a moment to receive next valid ID message from gateway                      if (!_waitForNextValidId.WaitOne(15000))                      {                          Log.Trace("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                            // no response' disconnect and retry                          Disconnect();                            var ibcLogContent = LoadCurrentIbControllerLogFile();                            // if existing session detected from IBController log file' log error and throw exception                          if (ExistingSessionDetected(ibcLogContent))                          {                              existingSessionDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): An existing session was detected and will not be automatically disconnected. Please close the existing session manually.");                          }                            // if security dialog detected from IBController log file' log error and throw exception                          if (SecurityDialogDetected(ibcLogContent))                          {                              securityDialogDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): A security dialog was detected for Second Factor/Code Card Authentication. Please opt out of the Secure Login System: Manage Account > Security > Secure Login System > SLS Opt Out");                          }                            // max out at 5 attempts to connect ~1 minute                          if (attempt++ < maxAttempts)                          {                              Thread.Sleep(1000);                              continue;                          }                            throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                      }                        Log.Trace("IB next valid id received.");                        if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state.");                        if (IsFinancialAdvisor)                      {                          if (!DownloadFinancialAdvisorAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                          }                      }                      else                      {                          if (!DownloadAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed. Operation took longer than 15 seconds.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed.");                          }                      }                        // enable detailed logging                      _client.ClientSocket.setServerLogLevel(5);                        break;                  }                  catch (Exception err)                  {                      // if existing session or security dialog detected from IBController log file' log error and throw exception                      if (existingSessionDetected || securityDialogDetected)                      {                          Log.Error(err);                          throw;                      }                        // max out at 5 attempts to connect ~1 minute                      if (attempt++ < maxAttempts)                      {                          Thread.Sleep(15000);                          continue;                      }                        // we couldn't connect after several attempts' log the error and throw an exception                      Log.Error(err);                        throw;                  }              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,Connect,The following statement contains a magic number: while (true)              {                  try                  {                      Log.Trace("InteractiveBrokersBrokerage.Connect(): Attempting to connect ({0}/{1}) ..."' attempt' maxAttempts);                        // if message processing thread is still running' wait until it terminates                      Disconnect();                        // we're going to try and connect several times' if successful break                      _client.ClientSocket.eConnect(_host' _port' _clientId);                        // create the message processing thread                      var reader = new EReader(_client.ClientSocket' _signal);                      reader.Start();                        _messageProcessingThread = new Thread(() =>                      {                          Log.Trace("IB message processing thread started: #" + Thread.CurrentThread.ManagedThreadId);                            while (_client.ClientSocket.IsConnected())                          {                              try                              {                                  _signal.waitForSignal();                                  reader.processMsgs();                              }                              catch (Exception error)                              {                                  // error in message processing thread' log error and disconnect                                  Log.Error("Error in message processing thread #" + Thread.CurrentThread.ManagedThreadId + ": " + error);                              }                          }                            Log.Trace("IB message processing thread ended: #" + Thread.CurrentThread.ManagedThreadId);                      }) { IsBackground = true };                        _messageProcessingThread.Start();                        // pause for a moment to receive next valid ID message from gateway                      if (!_waitForNextValidId.WaitOne(15000))                      {                          Log.Trace("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                            // no response' disconnect and retry                          Disconnect();                            var ibcLogContent = LoadCurrentIbControllerLogFile();                            // if existing session detected from IBController log file' log error and throw exception                          if (ExistingSessionDetected(ibcLogContent))                          {                              existingSessionDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): An existing session was detected and will not be automatically disconnected. Please close the existing session manually.");                          }                            // if security dialog detected from IBController log file' log error and throw exception                          if (SecurityDialogDetected(ibcLogContent))                          {                              securityDialogDetected = true;                              throw new Exception("InteractiveBrokersBrokerage.Connect(): A security dialog was detected for Second Factor/Code Card Authentication. Please opt out of the Secure Login System: Manage Account > Security > Secure Login System > SLS Opt Out");                          }                            // max out at 5 attempts to connect ~1 minute                          if (attempt++ < maxAttempts)                          {                              Thread.Sleep(1000);                              continue;                          }                            throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): Operation took longer than 15 seconds.");                      }                        Log.Trace("IB next valid id received.");                        if (!_client.Connected) throw new Exception("InteractiveBrokersBrokerage.Connect(): Connection returned but was not in connected state.");                        if (IsFinancialAdvisor)                      {                          if (!DownloadFinancialAdvisorAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadFinancialAdvisorAccount failed.");                          }                      }                      else                      {                          if (!DownloadAccount(_account))                          {                              Log.Trace("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed. Operation took longer than 15 seconds.");                                Disconnect();                                if (attempt++ < maxAttempts)                              {                                  Thread.Sleep(1000);                                  continue;                              }                                throw new TimeoutException("InteractiveBrokersBrokerage.Connect(): DownloadAccount failed.");                          }                      }                        // enable detailed logging                      _client.ClientSocket.setServerLogLevel(5);                        break;                  }                  catch (Exception err)                  {                      // if existing session or security dialog detected from IBController log file' log error and throw exception                      if (existingSessionDetected || securityDialogDetected)                      {                          Log.Error(err);                          throw;                      }                        // max out at 5 attempts to connect ~1 minute                      if (attempt++ < maxAttempts)                      {                          Thread.Sleep(15000);                          continue;                      }                        // we couldn't connect after several attempts' log the error and throw an exception                      Log.Error(err);                        throw;                  }              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,DownloadAccount,The following statement contains a magic number: firstAccountUpdateReceived.WaitOne(2500);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,DownloadAccount,The following statement contains a magic number: Thread.Sleep(2500);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,DownloadAccount,The following statement contains a magic number: if (!_accountHoldingsResetEvent.WaitOne(15000))              {                  // remove our event handlers                  _client.AccountDownloadEnd -= clientOnAccountDownloadEnd;                  _client.UpdateAccountValue -= clientOnUpdateAccountValue;                    Log.Trace("InteractiveBrokersBrokerage.DownloadAccount(): Operation took longer than 15 seconds.");                    return false;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetContractDetails,The following statement contains a magic number: const int timeout = 60;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetContractDetails,The following statement contains a magic number: if (!manualResetEvent.WaitOne(timeout * 1000))              {                  Log.Error("InteractiveBrokersBrokerage.GetContractDetails(): failed to receive response from IB within {0} seconds"' timeout);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,FindContracts,The following statement contains a magic number: const int timeout = 60;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,FindContracts,The following statement contains a magic number: if (!manualResetEvent.WaitOne(timeout * 1000))              {                  Log.Error("InteractiveBrokersBrokerage.FindContracts(): failed to receive response from IB within {0} seconds"' timeout);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The following statement contains a magic number: const int requestTimeout = 60;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The following statement contains a magic number: if (!manualResetEvent.WaitOne(requestTimeout * 1000))              {                  Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The following statement contains a magic number: if (rate <= 0)              {                  string errorMessage;                  bool pacingViolation;                  const int pacingDelaySeconds = 60;                    do                  {                      errorMessage = string.Empty;                      pacingViolation = false;                      manualResetEvent.Reset();                        var data = new List<IB.HistoricalDataEventArgs>();                      var historicalTicker = GetNextTickerId();                        _requestInformation[historicalTicker] = "GetUsdConversion.Historical: " + contract;                        EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              data.Add(args);                          }                      };                        EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              manualResetEvent.Set();                          }                      };                        EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                      {                          if (args.Code == 162 && args.Message.Contains("pacing violation"))                          {                              // pacing violation happened                              pacingViolation = true;                          }                          else                          {                              errorMessage = $"Code: {args.Code} - ErrorMessage: {args.Message}";                          }                      };                        Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Requesting historical data for " + currencyPair);                      _client.HistoricalData += clientOnHistoricalData;                      _client.HistoricalDataEnd += clientOnHistoricalDataEnd;                      _client.Error += clientOnError;                        // request some historical data' IB's api takes into account weekends/market opening hours                      const string requestSpan = "100 S";                      _client.ClientSocket.reqHistoricalData(historicalTicker' contract' DateTime.UtcNow.ToString("yyyyMMdd HH:mm:ss UTC")'                          requestSpan' IB.BarSize.OneSecond' HistoricalDataType.Ask' 0' 2' false' new List<TagValue>());                        if (!manualResetEvent.WaitOne(requestTimeout * 1000))                      {                          Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout);                      }                        if (pacingViolation)                      {                          // we received 'pacing violation' error from IB' so we have to wait                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion() Pacing violation' pausing for {0} secs."' pacingDelaySeconds);                          Thread.Sleep(pacingDelaySeconds * 1000);                      }                      else                      {                          // check for history                          var ordered = data.OrderByDescending(x => x.Bar.Time);                          var mostRecentQuote = ordered.FirstOrDefault();                          if (mostRecentQuote == null)                          {                              throw new Exception("Unable to get recent quote for " + currencyPair + " - " + errorMessage);                          }                            rate = Convert.ToDecimal(mostRecentQuote.Bar.Close);                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Last historical price rate is " + rate + " for currency " + currency);                      }                        // be sure to unwire our history handler as well                      _client.HistoricalData -= clientOnHistoricalData;                      _client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                      _client.Error -= clientOnError;                    } while (pacingViolation);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The following statement contains a magic number: if (rate <= 0)              {                  string errorMessage;                  bool pacingViolation;                  const int pacingDelaySeconds = 60;                    do                  {                      errorMessage = string.Empty;                      pacingViolation = false;                      manualResetEvent.Reset();                        var data = new List<IB.HistoricalDataEventArgs>();                      var historicalTicker = GetNextTickerId();                        _requestInformation[historicalTicker] = "GetUsdConversion.Historical: " + contract;                        EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              data.Add(args);                          }                      };                        EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              manualResetEvent.Set();                          }                      };                        EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                      {                          if (args.Code == 162 && args.Message.Contains("pacing violation"))                          {                              // pacing violation happened                              pacingViolation = true;                          }                          else                          {                              errorMessage = $"Code: {args.Code} - ErrorMessage: {args.Message}";                          }                      };                        Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Requesting historical data for " + currencyPair);                      _client.HistoricalData += clientOnHistoricalData;                      _client.HistoricalDataEnd += clientOnHistoricalDataEnd;                      _client.Error += clientOnError;                        // request some historical data' IB's api takes into account weekends/market opening hours                      const string requestSpan = "100 S";                      _client.ClientSocket.reqHistoricalData(historicalTicker' contract' DateTime.UtcNow.ToString("yyyyMMdd HH:mm:ss UTC")'                          requestSpan' IB.BarSize.OneSecond' HistoricalDataType.Ask' 0' 2' false' new List<TagValue>());                        if (!manualResetEvent.WaitOne(requestTimeout * 1000))                      {                          Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout);                      }                        if (pacingViolation)                      {                          // we received 'pacing violation' error from IB' so we have to wait                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion() Pacing violation' pausing for {0} secs."' pacingDelaySeconds);                          Thread.Sleep(pacingDelaySeconds * 1000);                      }                      else                      {                          // check for history                          var ordered = data.OrderByDescending(x => x.Bar.Time);                          var mostRecentQuote = ordered.FirstOrDefault();                          if (mostRecentQuote == null)                          {                              throw new Exception("Unable to get recent quote for " + currencyPair + " - " + errorMessage);                          }                            rate = Convert.ToDecimal(mostRecentQuote.Bar.Close);                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Last historical price rate is " + rate + " for currency " + currency);                      }                        // be sure to unwire our history handler as well                      _client.HistoricalData -= clientOnHistoricalData;                      _client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                      _client.Error -= clientOnError;                    } while (pacingViolation);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The following statement contains a magic number: if (rate <= 0)              {                  string errorMessage;                  bool pacingViolation;                  const int pacingDelaySeconds = 60;                    do                  {                      errorMessage = string.Empty;                      pacingViolation = false;                      manualResetEvent.Reset();                        var data = new List<IB.HistoricalDataEventArgs>();                      var historicalTicker = GetNextTickerId();                        _requestInformation[historicalTicker] = "GetUsdConversion.Historical: " + contract;                        EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              data.Add(args);                          }                      };                        EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              manualResetEvent.Set();                          }                      };                        EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                      {                          if (args.Code == 162 && args.Message.Contains("pacing violation"))                          {                              // pacing violation happened                              pacingViolation = true;                          }                          else                          {                              errorMessage = $"Code: {args.Code} - ErrorMessage: {args.Message}";                          }                      };                        Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Requesting historical data for " + currencyPair);                      _client.HistoricalData += clientOnHistoricalData;                      _client.HistoricalDataEnd += clientOnHistoricalDataEnd;                      _client.Error += clientOnError;                        // request some historical data' IB's api takes into account weekends/market opening hours                      const string requestSpan = "100 S";                      _client.ClientSocket.reqHistoricalData(historicalTicker' contract' DateTime.UtcNow.ToString("yyyyMMdd HH:mm:ss UTC")'                          requestSpan' IB.BarSize.OneSecond' HistoricalDataType.Ask' 0' 2' false' new List<TagValue>());                        if (!manualResetEvent.WaitOne(requestTimeout * 1000))                      {                          Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout);                      }                        if (pacingViolation)                      {                          // we received 'pacing violation' error from IB' so we have to wait                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion() Pacing violation' pausing for {0} secs."' pacingDelaySeconds);                          Thread.Sleep(pacingDelaySeconds * 1000);                      }                      else                      {                          // check for history                          var ordered = data.OrderByDescending(x => x.Bar.Time);                          var mostRecentQuote = ordered.FirstOrDefault();                          if (mostRecentQuote == null)                          {                              throw new Exception("Unable to get recent quote for " + currencyPair + " - " + errorMessage);                          }                            rate = Convert.ToDecimal(mostRecentQuote.Bar.Close);                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Last historical price rate is " + rate + " for currency " + currency);                      }                        // be sure to unwire our history handler as well                      _client.HistoricalData -= clientOnHistoricalData;                      _client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                      _client.Error -= clientOnError;                    } while (pacingViolation);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The following statement contains a magic number: if (rate <= 0)              {                  string errorMessage;                  bool pacingViolation;                  const int pacingDelaySeconds = 60;                    do                  {                      errorMessage = string.Empty;                      pacingViolation = false;                      manualResetEvent.Reset();                        var data = new List<IB.HistoricalDataEventArgs>();                      var historicalTicker = GetNextTickerId();                        _requestInformation[historicalTicker] = "GetUsdConversion.Historical: " + contract;                        EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              data.Add(args);                          }                      };                        EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              manualResetEvent.Set();                          }                      };                        EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                      {                          if (args.Code == 162 && args.Message.Contains("pacing violation"))                          {                              // pacing violation happened                              pacingViolation = true;                          }                          else                          {                              errorMessage = $"Code: {args.Code} - ErrorMessage: {args.Message}";                          }                      };                        Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Requesting historical data for " + currencyPair);                      _client.HistoricalData += clientOnHistoricalData;                      _client.HistoricalDataEnd += clientOnHistoricalDataEnd;                      _client.Error += clientOnError;                        // request some historical data' IB's api takes into account weekends/market opening hours                      const string requestSpan = "100 S";                      _client.ClientSocket.reqHistoricalData(historicalTicker' contract' DateTime.UtcNow.ToString("yyyyMMdd HH:mm:ss UTC")'                          requestSpan' IB.BarSize.OneSecond' HistoricalDataType.Ask' 0' 2' false' new List<TagValue>());                        if (!manualResetEvent.WaitOne(requestTimeout * 1000))                      {                          Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout);                      }                        if (pacingViolation)                      {                          // we received 'pacing violation' error from IB' so we have to wait                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion() Pacing violation' pausing for {0} secs."' pacingDelaySeconds);                          Thread.Sleep(pacingDelaySeconds * 1000);                      }                      else                      {                          // check for history                          var ordered = data.OrderByDescending(x => x.Bar.Time);                          var mostRecentQuote = ordered.FirstOrDefault();                          if (mostRecentQuote == null)                          {                              throw new Exception("Unable to get recent quote for " + currencyPair + " - " + errorMessage);                          }                            rate = Convert.ToDecimal(mostRecentQuote.Bar.Close);                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Last historical price rate is " + rate + " for currency " + currency);                      }                        // be sure to unwire our history handler as well                      _client.HistoricalData -= clientOnHistoricalData;                      _client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                      _client.Error -= clientOnError;                    } while (pacingViolation);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetUsdConversion,The following statement contains a magic number: if (rate <= 0)              {                  string errorMessage;                  bool pacingViolation;                  const int pacingDelaySeconds = 60;                    do                  {                      errorMessage = string.Empty;                      pacingViolation = false;                      manualResetEvent.Reset();                        var data = new List<IB.HistoricalDataEventArgs>();                      var historicalTicker = GetNextTickerId();                        _requestInformation[historicalTicker] = "GetUsdConversion.Historical: " + contract;                        EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              data.Add(args);                          }                      };                        EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                      {                          if (args.RequestId == historicalTicker)                          {                              manualResetEvent.Set();                          }                      };                        EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                      {                          if (args.Code == 162 && args.Message.Contains("pacing violation"))                          {                              // pacing violation happened                              pacingViolation = true;                          }                          else                          {                              errorMessage = $"Code: {args.Code} - ErrorMessage: {args.Message}";                          }                      };                        Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Requesting historical data for " + currencyPair);                      _client.HistoricalData += clientOnHistoricalData;                      _client.HistoricalDataEnd += clientOnHistoricalDataEnd;                      _client.Error += clientOnError;                        // request some historical data' IB's api takes into account weekends/market opening hours                      const string requestSpan = "100 S";                      _client.ClientSocket.reqHistoricalData(historicalTicker' contract' DateTime.UtcNow.ToString("yyyyMMdd HH:mm:ss UTC")'                          requestSpan' IB.BarSize.OneSecond' HistoricalDataType.Ask' 0' 2' false' new List<TagValue>());                        if (!manualResetEvent.WaitOne(requestTimeout * 1000))                      {                          Log.Error("InteractiveBrokersBrokerage.GetUsdConversion(): failed to receive response from IB within {0} seconds"' requestTimeout);                      }                        if (pacingViolation)                      {                          // we received 'pacing violation' error from IB' so we have to wait                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion() Pacing violation' pausing for {0} secs."' pacingDelaySeconds);                          Thread.Sleep(pacingDelaySeconds * 1000);                      }                      else                      {                          // check for history                          var ordered = data.OrderByDescending(x => x.Bar.Time);                          var mostRecentQuote = ordered.FirstOrDefault();                          if (mostRecentQuote == null)                          {                              throw new Exception("Unable to get recent quote for " + currencyPair + " - " + errorMessage);                          }                            rate = Convert.ToDecimal(mostRecentQuote.Bar.Close);                          Log.Trace("InteractiveBrokersBrokerage.GetUsdConversion(): Last historical price rate is " + rate + " for currency " + currency);                      }                        // be sure to unwire our history handler as well                      _client.HistoricalData -= clientOnHistoricalData;                      _client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                      _client.Error -= clientOnError;                    } while (pacingViolation);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,The following statement contains a magic number: if (errorCode == 1100)              {                  if (!_disconnected1100Fired)                  {                      _disconnected1100Fired = true;                        // begin the try wait logic                      TryWaitForReconnect();                  }                  else                  {                      // The IB API sends many consecutive disconnect messages (1100) during nightly reset periods and weekends'                      // so we send the message event only when we transition from connected to disconnected state'                      // to avoid flooding the logs with the same message.                      return;                  }              }              else if (errorCode == 1102 || errorCode == 1101)              {                  // we've reconnected                  OnMessage(new BrokerageMessageEvent(brokerageMessageType' errorCode' errorMsg));                    // With IB Gateway v960.2a in the cloud' we are not receiving order fill events after the nightly reset'                  // so we execute the following sequence:                  // disconnect' kill IB Gateway' restart IB Gateway' reconnect' restore data subscriptions                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Reconnect message received. Restarting...");                    _resetEventRestartGateway.Set();                    return;              }              else if (errorCode == 506)              {                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Server Version: " + _client.ClientSocket.ServerVersion);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,The following statement contains a magic number: if (errorCode == 1100)              {                  if (!_disconnected1100Fired)                  {                      _disconnected1100Fired = true;                        // begin the try wait logic                      TryWaitForReconnect();                  }                  else                  {                      // The IB API sends many consecutive disconnect messages (1100) during nightly reset periods and weekends'                      // so we send the message event only when we transition from connected to disconnected state'                      // to avoid flooding the logs with the same message.                      return;                  }              }              else if (errorCode == 1102 || errorCode == 1101)              {                  // we've reconnected                  OnMessage(new BrokerageMessageEvent(brokerageMessageType' errorCode' errorMsg));                    // With IB Gateway v960.2a in the cloud' we are not receiving order fill events after the nightly reset'                  // so we execute the following sequence:                  // disconnect' kill IB Gateway' restart IB Gateway' reconnect' restore data subscriptions                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Reconnect message received. Restarting...");                    _resetEventRestartGateway.Set();                    return;              }              else if (errorCode == 506)              {                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Server Version: " + _client.ClientSocket.ServerVersion);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,The following statement contains a magic number: if (errorCode == 1100)              {                  if (!_disconnected1100Fired)                  {                      _disconnected1100Fired = true;                        // begin the try wait logic                      TryWaitForReconnect();                  }                  else                  {                      // The IB API sends many consecutive disconnect messages (1100) during nightly reset periods and weekends'                      // so we send the message event only when we transition from connected to disconnected state'                      // to avoid flooding the logs with the same message.                      return;                  }              }              else if (errorCode == 1102 || errorCode == 1101)              {                  // we've reconnected                  OnMessage(new BrokerageMessageEvent(brokerageMessageType' errorCode' errorMsg));                    // With IB Gateway v960.2a in the cloud' we are not receiving order fill events after the nightly reset'                  // so we execute the following sequence:                  // disconnect' kill IB Gateway' restart IB Gateway' reconnect' restore data subscriptions                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Reconnect message received. Restarting...");                    _resetEventRestartGateway.Set();                    return;              }              else if (errorCode == 506)              {                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Server Version: " + _client.ClientSocket.ServerVersion);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,HandleError,The following statement contains a magic number: if (errorCode == 1100)              {                  if (!_disconnected1100Fired)                  {                      _disconnected1100Fired = true;                        // begin the try wait logic                      TryWaitForReconnect();                  }                  else                  {                      // The IB API sends many consecutive disconnect messages (1100) during nightly reset periods and weekends'                      // so we send the message event only when we transition from connected to disconnected state'                      // to avoid flooding the logs with the same message.                      return;                  }              }              else if (errorCode == 1102 || errorCode == 1101)              {                  // we've reconnected                  OnMessage(new BrokerageMessageEvent(brokerageMessageType' errorCode' errorMsg));                    // With IB Gateway v960.2a in the cloud' we are not receiving order fill events after the nightly reset'                  // so we execute the following sequence:                  // disconnect' kill IB Gateway' restart IB Gateway' reconnect' restore data subscriptions                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Reconnect message received. Restarting...");                    _resetEventRestartGateway.Set();                    return;              }              else if (errorCode == 506)              {                  Log.Trace("InteractiveBrokersBrokerage.HandleError(): Server Version: " + _client.ClientSocket.ServerVersion);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,CreateContract,The following statement contains a magic number: if (symbol.ID.SecurityType == SecurityType.Forex)              {                  // forex is special' so rewrite some of the properties to make it work                  contract.Exchange = "IDEALPRO";                  contract.Symbol = ibSymbol.Substring(0' 3);                  contract.Currency = ibSymbol.Substring(3);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,CreateContract,The following statement contains a magic number: if (symbol.ID.SecurityType == SecurityType.Forex)              {                  // forex is special' so rewrite some of the properties to make it work                  contract.Exchange = "IDEALPRO";                  contract.Symbol = ibSymbol.Substring(0' 3);                  contract.Currency = ibSymbol.Substring(3);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The following statement contains a magic number: if (time.DayOfWeek == DayOfWeek.Saturday)              {                  result = true;              }              else              {                  var timeOfDay = time.TimeOfDay;                  // from 11:45 -> 12:45 is the IB reset times' we'll go from 11:00pm->1:30am for safety margin                  result = timeOfDay > new TimeSpan(23' 0' 0) || timeOfDay < new TimeSpan(1' 30' 0);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IsWithinScheduledServerResetTimes,The following statement contains a magic number: if (time.DayOfWeek == DayOfWeek.Saturday)              {                  result = true;              }              else              {                  var timeOfDay = time.TimeOfDay;                  // from 11:45 -> 12:45 is the IB reset times' we'll go from 11:00pm->1:30am for safety margin                  result = timeOfDay > new TimeSpan(23' 0' 0) || timeOfDay < new TimeSpan(1' 30' 0);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,AdjustQuantity,The following statement contains a magic number: switch (type)              {                  case SecurityType.Equity:                      return size * 100;                  default:                      return size;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: const int timeOut = 60;
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: while (endTime >= startTime)              {                  var pacing = false;                  var historyPiece = new List<TradeBar>();                  var historicalTicker = GetNextTickerId();                    _requestInformation[historicalTicker] = "GetHistory: " + contract;                    EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          var bar = ConvertTradeBar(request.Symbol' request.Resolution' args);                          if (request.Resolution != Resolution.Daily)                          {                              bar.Time = bar.Time.ConvertFromUtc(exchangeTimeZone);                          }                            historyPiece.Add(bar);                          dataDownloading.Set();                      }                  };                    EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          dataDownloaded.Set();                      }                  };                    EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                  {                      if (args.Code == 162 && args.Message.Contains("pacing violation"))                      {                          // pacing violation happened                          pacing = true;                      }                      if (args.Code == 162 && args.Message.Contains("no data"))                      {                          dataDownloaded.Set();                      }                  };                    Client.Error += clientOnError;                  Client.HistoricalData += clientOnHistoricalData;                  Client.HistoricalDataEnd += clientOnHistoricalDataEnd;                    Client.ClientSocket.reqHistoricalData(historicalTicker' contract' endTime.ToString("yyyyMMdd HH:mm:ss UTC")'                      duration' resolution' dataType' useRegularTradingHours' 2' false' new List<TagValue>());                    var waitResult = 0;                  while (waitResult == 0)                  {                      waitResult = WaitHandle.WaitAny(new WaitHandle[] {dataDownloading' dataDownloaded}' timeOut*1000);                  }                    Client.Error -= clientOnError;                  Client.HistoricalData -= clientOnHistoricalData;                  Client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                    if (waitResult == WaitHandle.WaitTimeout)                  {                      if (pacing)                      {                          // we received 'pacing violation' error from IB. So we had to wait                          Log.Trace("InteractiveBrokersBrokerage::GetHistory() Pacing violation. Paused for {0} secs."' timeOut);                          continue;                      }                        Log.Trace("InteractiveBrokersBrokerage::GetHistory() History request timed out ({0} sec)"' timeOut);                      break;                  }                    // if no data has been received this time' we exit                  if (!historyPiece.Any())                  {                      break;                  }                    var filteredPiece = historyPiece.OrderBy(x => x.Time);                    history.AddRange(filteredPiece);                    // moving endTime to the new position to proceed with next request (if needed)                  endTime = filteredPiece.First().Time;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: while (endTime >= startTime)              {                  var pacing = false;                  var historyPiece = new List<TradeBar>();                  var historicalTicker = GetNextTickerId();                    _requestInformation[historicalTicker] = "GetHistory: " + contract;                    EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          var bar = ConvertTradeBar(request.Symbol' request.Resolution' args);                          if (request.Resolution != Resolution.Daily)                          {                              bar.Time = bar.Time.ConvertFromUtc(exchangeTimeZone);                          }                            historyPiece.Add(bar);                          dataDownloading.Set();                      }                  };                    EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          dataDownloaded.Set();                      }                  };                    EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                  {                      if (args.Code == 162 && args.Message.Contains("pacing violation"))                      {                          // pacing violation happened                          pacing = true;                      }                      if (args.Code == 162 && args.Message.Contains("no data"))                      {                          dataDownloaded.Set();                      }                  };                    Client.Error += clientOnError;                  Client.HistoricalData += clientOnHistoricalData;                  Client.HistoricalDataEnd += clientOnHistoricalDataEnd;                    Client.ClientSocket.reqHistoricalData(historicalTicker' contract' endTime.ToString("yyyyMMdd HH:mm:ss UTC")'                      duration' resolution' dataType' useRegularTradingHours' 2' false' new List<TagValue>());                    var waitResult = 0;                  while (waitResult == 0)                  {                      waitResult = WaitHandle.WaitAny(new WaitHandle[] {dataDownloading' dataDownloaded}' timeOut*1000);                  }                    Client.Error -= clientOnError;                  Client.HistoricalData -= clientOnHistoricalData;                  Client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                    if (waitResult == WaitHandle.WaitTimeout)                  {                      if (pacing)                      {                          // we received 'pacing violation' error from IB. So we had to wait                          Log.Trace("InteractiveBrokersBrokerage::GetHistory() Pacing violation. Paused for {0} secs."' timeOut);                          continue;                      }                        Log.Trace("InteractiveBrokersBrokerage::GetHistory() History request timed out ({0} sec)"' timeOut);                      break;                  }                    // if no data has been received this time' we exit                  if (!historyPiece.Any())                  {                      break;                  }                    var filteredPiece = historyPiece.OrderBy(x => x.Time);                    history.AddRange(filteredPiece);                    // moving endTime to the new position to proceed with next request (if needed)                  endTime = filteredPiece.First().Time;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: while (endTime >= startTime)              {                  var pacing = false;                  var historyPiece = new List<TradeBar>();                  var historicalTicker = GetNextTickerId();                    _requestInformation[historicalTicker] = "GetHistory: " + contract;                    EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          var bar = ConvertTradeBar(request.Symbol' request.Resolution' args);                          if (request.Resolution != Resolution.Daily)                          {                              bar.Time = bar.Time.ConvertFromUtc(exchangeTimeZone);                          }                            historyPiece.Add(bar);                          dataDownloading.Set();                      }                  };                    EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          dataDownloaded.Set();                      }                  };                    EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                  {                      if (args.Code == 162 && args.Message.Contains("pacing violation"))                      {                          // pacing violation happened                          pacing = true;                      }                      if (args.Code == 162 && args.Message.Contains("no data"))                      {                          dataDownloaded.Set();                      }                  };                    Client.Error += clientOnError;                  Client.HistoricalData += clientOnHistoricalData;                  Client.HistoricalDataEnd += clientOnHistoricalDataEnd;                    Client.ClientSocket.reqHistoricalData(historicalTicker' contract' endTime.ToString("yyyyMMdd HH:mm:ss UTC")'                      duration' resolution' dataType' useRegularTradingHours' 2' false' new List<TagValue>());                    var waitResult = 0;                  while (waitResult == 0)                  {                      waitResult = WaitHandle.WaitAny(new WaitHandle[] {dataDownloading' dataDownloaded}' timeOut*1000);                  }                    Client.Error -= clientOnError;                  Client.HistoricalData -= clientOnHistoricalData;                  Client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                    if (waitResult == WaitHandle.WaitTimeout)                  {                      if (pacing)                      {                          // we received 'pacing violation' error from IB. So we had to wait                          Log.Trace("InteractiveBrokersBrokerage::GetHistory() Pacing violation. Paused for {0} secs."' timeOut);                          continue;                      }                        Log.Trace("InteractiveBrokersBrokerage::GetHistory() History request timed out ({0} sec)"' timeOut);                      break;                  }                    // if no data has been received this time' we exit                  if (!historyPiece.Any())                  {                      break;                  }                    var filteredPiece = historyPiece.OrderBy(x => x.Time);                    history.AddRange(filteredPiece);                    // moving endTime to the new position to proceed with next request (if needed)                  endTime = filteredPiece.First().Time;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,GetHistory,The following statement contains a magic number: while (endTime >= startTime)              {                  var pacing = false;                  var historyPiece = new List<TradeBar>();                  var historicalTicker = GetNextTickerId();                    _requestInformation[historicalTicker] = "GetHistory: " + contract;                    EventHandler<IB.HistoricalDataEventArgs> clientOnHistoricalData = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          var bar = ConvertTradeBar(request.Symbol' request.Resolution' args);                          if (request.Resolution != Resolution.Daily)                          {                              bar.Time = bar.Time.ConvertFromUtc(exchangeTimeZone);                          }                            historyPiece.Add(bar);                          dataDownloading.Set();                      }                  };                    EventHandler<IB.HistoricalDataEndEventArgs> clientOnHistoricalDataEnd = (sender' args) =>                  {                      if (args.RequestId == historicalTicker)                      {                          dataDownloaded.Set();                      }                  };                    EventHandler<IB.ErrorEventArgs> clientOnError = (sender' args) =>                  {                      if (args.Code == 162 && args.Message.Contains("pacing violation"))                      {                          // pacing violation happened                          pacing = true;                      }                      if (args.Code == 162 && args.Message.Contains("no data"))                      {                          dataDownloaded.Set();                      }                  };                    Client.Error += clientOnError;                  Client.HistoricalData += clientOnHistoricalData;                  Client.HistoricalDataEnd += clientOnHistoricalDataEnd;                    Client.ClientSocket.reqHistoricalData(historicalTicker' contract' endTime.ToString("yyyyMMdd HH:mm:ss UTC")'                      duration' resolution' dataType' useRegularTradingHours' 2' false' new List<TagValue>());                    var waitResult = 0;                  while (waitResult == 0)                  {                      waitResult = WaitHandle.WaitAny(new WaitHandle[] {dataDownloading' dataDownloaded}' timeOut*1000);                  }                    Client.Error -= clientOnError;                  Client.HistoricalData -= clientOnHistoricalData;                  Client.HistoricalDataEnd -= clientOnHistoricalDataEnd;                    if (waitResult == WaitHandle.WaitTimeout)                  {                      if (pacing)                      {                          // we received 'pacing violation' error from IB. So we had to wait                          Log.Trace("InteractiveBrokersBrokerage::GetHistory() Pacing violation. Paused for {0} secs."' timeOut);                          continue;                      }                        Log.Trace("InteractiveBrokersBrokerage::GetHistory() History request timed out ({0} sec)"' timeOut);                      break;                  }                    // if no data has been received this time' we exit                  if (!historyPiece.Any())                  {                      break;                  }                    var filteredPiece = historyPiece.OrderBy(x => x.Time);                    history.AddRange(filteredPiece);                    // moving endTime to the new position to proceed with next request (if needed)                  endTime = filteredPiece.First().Time;              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerage,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerage.cs,IbControllerLogContainsMessage,The following statement contains a magic number: var separatorLine = new string('-'' 60);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersBrokerageFactory,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersBrokerageFactory.cs,CreateBrokerage,The following statement contains a magic number: var port = Config.GetInt("ib-port"' 4001);
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Start,The following statement contains a magic number: try              {                  var file = OS.IsWindows ? batchFilename : bashFilename;                  var arguments = string.Format("{0} {1} {2} {3} {4} {5} {6}"' file' ibControllerDirectory' twsDirectory' userId' password' useTwsSwitch' tradingMode);                    Log.Trace($"InteractiveBrokersGatewayRunner.Start(): Launching IBController: {file} {ibControllerDirectory} {twsDirectory} {userId} XXX {useTwsSwitch} {tradingMode}");                    var processStartInfo = OS.IsWindows ? new ProcessStartInfo("cmd.exe"' "/C " + arguments) : new ProcessStartInfo("bash"' arguments);                    processStartInfo.UseShellExecute = false;                  processStartInfo.RedirectStandardOutput = false;                  var process = Process.Start(processStartInfo);                  _scriptProcessId = process != null ? process.Id : 0;                    // wait a few seconds for IB to start up                  Thread.Sleep(TimeSpan.FromSeconds(30));              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Stop,The following statement contains a magic number: try              {                  Log.Trace("InteractiveBrokersGatewayRunner.Stop(): Stopping IBController...");                    if (OS.IsWindows)                  {                      if (_useTws)                      {                          foreach (var process in Process.GetProcessesByName("java"))                          {                              if (process.MainWindowTitle.Contains("Interactive Brokers"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                          foreach (var process in Process.GetProcessesByName("cmd"))                          {                              if (process.MainWindowTitle.ToLower().Contains("ibcontroller"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                      }                      else                      {                          foreach (var process in Process.GetProcesses())                          {                              try                              {                                  if (process.MainWindowTitle.ToLower().Contains("ibcontroller") ||                                      process.MainWindowTitle.ToLower().Contains("ib gateway"))                                  {                                      process.Kill();                                      Thread.Sleep(2500);                                  }                              }                              catch (Exception)                              {                                  // ignored                              }                          }                      }                  }                  else                  {                      try                      {                          Process.Start("pkill"' "xvfb-run");                          Process.Start("pkill"' "java");                          Process.Start("pkill"' "Xvfb");                          Thread.Sleep(2500);                      }                      catch (Exception)                      {                          // ignored                      }                  }                    _scriptProcessId = 0;              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Stop,The following statement contains a magic number: try              {                  Log.Trace("InteractiveBrokersGatewayRunner.Stop(): Stopping IBController...");                    if (OS.IsWindows)                  {                      if (_useTws)                      {                          foreach (var process in Process.GetProcessesByName("java"))                          {                              if (process.MainWindowTitle.Contains("Interactive Brokers"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                          foreach (var process in Process.GetProcessesByName("cmd"))                          {                              if (process.MainWindowTitle.ToLower().Contains("ibcontroller"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                      }                      else                      {                          foreach (var process in Process.GetProcesses())                          {                              try                              {                                  if (process.MainWindowTitle.ToLower().Contains("ibcontroller") ||                                      process.MainWindowTitle.ToLower().Contains("ib gateway"))                                  {                                      process.Kill();                                      Thread.Sleep(2500);                                  }                              }                              catch (Exception)                              {                                  // ignored                              }                          }                      }                  }                  else                  {                      try                      {                          Process.Start("pkill"' "xvfb-run");                          Process.Start("pkill"' "java");                          Process.Start("pkill"' "Xvfb");                          Thread.Sleep(2500);                      }                      catch (Exception)                      {                          // ignored                      }                  }                    _scriptProcessId = 0;              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Stop,The following statement contains a magic number: try              {                  Log.Trace("InteractiveBrokersGatewayRunner.Stop(): Stopping IBController...");                    if (OS.IsWindows)                  {                      if (_useTws)                      {                          foreach (var process in Process.GetProcessesByName("java"))                          {                              if (process.MainWindowTitle.Contains("Interactive Brokers"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                          foreach (var process in Process.GetProcessesByName("cmd"))                          {                              if (process.MainWindowTitle.ToLower().Contains("ibcontroller"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                      }                      else                      {                          foreach (var process in Process.GetProcesses())                          {                              try                              {                                  if (process.MainWindowTitle.ToLower().Contains("ibcontroller") ||                                      process.MainWindowTitle.ToLower().Contains("ib gateway"))                                  {                                      process.Kill();                                      Thread.Sleep(2500);                                  }                              }                              catch (Exception)                              {                                  // ignored                              }                          }                      }                  }                  else                  {                      try                      {                          Process.Start("pkill"' "xvfb-run");                          Process.Start("pkill"' "java");                          Process.Start("pkill"' "Xvfb");                          Thread.Sleep(2500);                      }                      catch (Exception)                      {                          // ignored                      }                  }                    _scriptProcessId = 0;              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersGatewayRunner,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersGatewayRunner.cs,Stop,The following statement contains a magic number: try              {                  Log.Trace("InteractiveBrokersGatewayRunner.Stop(): Stopping IBController...");                    if (OS.IsWindows)                  {                      if (_useTws)                      {                          foreach (var process in Process.GetProcessesByName("java"))                          {                              if (process.MainWindowTitle.Contains("Interactive Brokers"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                          foreach (var process in Process.GetProcessesByName("cmd"))                          {                              if (process.MainWindowTitle.ToLower().Contains("ibcontroller"))                              {                                  process.Kill();                                  Thread.Sleep(2500);                              }                          }                      }                      else                      {                          foreach (var process in Process.GetProcesses())                          {                              try                              {                                  if (process.MainWindowTitle.ToLower().Contains("ibcontroller") ||                                      process.MainWindowTitle.ToLower().Contains("ib gateway"))                                  {                                      process.Kill();                                      Thread.Sleep(2500);                                  }                              }                              catch (Exception)                              {                                  // ignored                              }                          }                      }                  }                  else                  {                      try                      {                          Process.Start("pkill"' "xvfb-run");                          Process.Start("pkill"' "java");                          Process.Start("pkill"' "Xvfb");                          Thread.Sleep(2500);                      }                      catch (Exception)                      {                          // ignored                      }                  }                    _scriptProcessId = 0;              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetBrokerageSymbol,The following statement contains a magic number: if (symbol.ID.SecurityType == SecurityType.Forex && symbol.Value.Length != 6)                  throw new ArgumentException("Forex symbol length must be equal to 6: " + symbol.Value);
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,Connect,The following statement contains a magic number: _connectionMonitorThread = new Thread(() =>              {                  var nextReconnectionAttemptUtcTime = DateTime.UtcNow;                  double nextReconnectionAttemptSeconds = 1;                    lock (LockerConnectionMonitor)                  {                      LastHeartbeatUtcTime = DateTime.UtcNow;                  }                    try                  {                      while (!_cancellationTokenSource.IsCancellationRequested)                      {                          TimeSpan elapsed;                          lock (LockerConnectionMonitor)                          {                              elapsed = DateTime.UtcNow - LastHeartbeatUtcTime;                          }                            if (!_connectionLost && elapsed > TimeSpan.FromSeconds(20))                          {                              _connectionLost = true;                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                OnMessage(BrokerageMessageEvent.Disconnected("Connection with Oanda server lost. " +                                                                           "This could be because of internet connectivity issues. "));                          }                          else if (_connectionLost)                          {                              try                              {                                  if (elapsed <= TimeSpan.FromSeconds(20))                                  {                                      _connectionLost = false;                                      nextReconnectionAttemptSeconds = 1;                                        OnMessage(BrokerageMessageEvent.Reconnected("Connection with Oanda server restored."));                                  }                                  else                                  {                                      if (DateTime.UtcNow > nextReconnectionAttemptUtcTime)                                      {                                          try                                          {                                              // check if we have a connection                                              GetInstrumentList();                                                // restore events session                                              StopTransactionStream();                                              StartTransactionStream();                                                // restore rates session                                              List<Symbol> symbolsToSubscribe;                                              lock (LockerSubscriptions)                                              {                                                  symbolsToSubscribe = SubscribedSymbols.ToList();                                              }                                              SubscribeSymbols(symbolsToSubscribe);                                          }                                          catch (Exception)                                          {                                              // double the interval between attempts (capped to 1 minute)                                              nextReconnectionAttemptSeconds = Math.Min(nextReconnectionAttemptSeconds * 2' 60);                                              nextReconnectionAttemptUtcTime = DateTime.UtcNow.AddSeconds(nextReconnectionAttemptSeconds);                                          }                                      }                                  }                              }                              catch (Exception exception)                              {                                  Log.Error(exception);                              }                          }                            Thread.Sleep(1000);                      }                  }                  catch (Exception exception)                  {                      Log.Error(exception);                  }              }) { IsBackground = true };
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,ProcessSubscriptionRequest,The following statement contains a magic number: Task.Run(() =>              {                  while (true)                  {                      DateTime requestTime;                      List<Symbol> symbolsToSubscribe;                      lock (LockerSubscriptions)                      {                          requestTime = _lastSubscribeRequestUtcTime.Add(SubscribeDelay);                          symbolsToSubscribe = SubscribedSymbols.ToList();                      }                        if (DateTime.UtcNow > requestTime)                      {                          // restart streaming session                          SubscribeSymbols(symbolsToSubscribe);                            lock (LockerSubscriptions)                          {                              _lastSubscribeRequestUtcTime = DateTime.UtcNow;                              if (SubscribedSymbols.Count == symbolsToSubscribe.Count)                              {                                  // no more subscriptions pending' task finished                                  _subscriptionsPending = false;                                  break;                              }                          }                      }                        Thread.Sleep(200);                  }              });
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiBase,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiBase.cs,GetUsdConversion,The following statement contains a magic number: var rate = (quote.BidPrice + quote.AskPrice) / 2;
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,DownloadQuoteBars,The following statement contains a magic number: var period = resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following statement contains a magic number: if (order.Type == OrderType.Limit)              {                  requestParams.Add("type"' "limit");                  requestParams.Add("price"' ((LimitOrder)order).LimitPrice.ToString(CultureInfo.InvariantCulture));                    switch (order.Direction)                  {                      case OrderDirection.Buy:                          //Limit Order Does not like Lower Bound Values == Limit Price value                          //Don't set bounds when placing limit orders.                           //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled.                          break;                        case OrderDirection.Sell:                          //Limit Order Does not like Lower Bound Values == Limit Price value                          //Don't set bounds when placing limit orders.                           //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled.                          break;                  }                    //3 months is the max expiry for Oanda' and OrderDuration.GTC is only currently available                  requestParams.Add("expiry"' XmlConvert.ToString(DateTime.Now.AddMonths(3)' XmlDateTimeSerializationMode.Utc));              }
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following statement contains a magic number: if (order.Type == OrderType.StopLimit)              {                  requestParams.Add("type"' "stop");                  requestParams.Add("price"' ((StopLimitOrder)order).StopPrice.ToString(CultureInfo.InvariantCulture));                    switch (order.Direction)                  {                      case OrderDirection.Buy:                          requestParams.Add("upperBound"' ((StopLimitOrder)order).LimitPrice.ToString(CultureInfo.InvariantCulture));                          break;                        case OrderDirection.Sell:                          requestParams.Add("lowerBound"' ((StopLimitOrder)order).LimitPrice.ToString(CultureInfo.InvariantCulture));                          break;                  }                    //3 months is the max expiry for Oanda' and OrderDuration.GTC is only currently available                  requestParams.Add("expiry"' XmlConvert.ToString(DateTime.Now.AddMonths(3)' XmlDateTimeSerializationMode.Utc));              }
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following statement contains a magic number: if (order.Type == OrderType.StopMarket)              {                  requestParams.Add("type"' "marketIfTouched");                  requestParams.Add("price"' ((StopMarketOrder)order).StopPrice.ToString(CultureInfo.InvariantCulture));                    //3 months is the max expiry for Oanda' and OrderDuration.GTC is only currently available                  requestParams.Add("expiry"' XmlConvert.ToString(DateTime.Now.AddMonths(3)' XmlDateTimeSerializationMode.Utc));              }
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,GetTickDateTimeFromString,The following statement contains a magic number: return OandaBrokerage.GetDateTimeFromString(time.Remove(25' 3));
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,GetTickDateTimeFromString,The following statement contains a magic number: return OandaBrokerage.GetDateTimeFromString(time.Remove(25' 3));
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadTradeBars,The following statement contains a magic number: var period = resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,DownloadQuoteBars,The following statement contains a magic number: var period = resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetAccountHoldings,The following statement contains a magic number: if (oandaSymbols.Count > 0)              {                  var quotes = _api.GetRates(oandaSymbols);                  foreach (var holding in holdings)                  {                      var oandaSymbol = _symbolMapper.GetBrokerageSymbol(holding.Symbol);                      Tick tick;                      if (quotes.TryGetValue(oandaSymbol' out tick))                      {                          holding.MarketPrice = (tick.BidPrice + tick.AskPrice) / 2;                      }                  }              }
Magic Number,QuantConnect.Brokerages.Oanda,OandaBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaBrokerage.cs,GetHistory,The following statement contains a magic number: var period = request.Resolution == Resolution.Second ? TimeSpan.FromSeconds(5) : request.Resolution.ToTimeSpan();
Magic Number,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,GetBrokerageSecurityType,The following statement contains a magic number: if (tokens.Length != 2)                  throw new ArgumentException("Unable to determine SecurityType for Oanda symbol: " + brokerageSymbol);
Magic Number,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,IsKnownLeanSymbol,The following statement contains a magic number: if (symbol == null || string.IsNullOrWhiteSpace(symbol.Value) || symbol.Value.Length <= 3)                   return false;
Magic Number,QuantConnect.Brokerages.Oanda,OandaSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaSymbolMapper.cs,ConvertLeanSymbolToOandaSymbol,The following statement contains a magic number: return leanSymbol.Insert(leanSymbol.Length - 3' "_");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CancelOrderAsyncWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->CancelOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: if (instrument == null)                  throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionWithHttpInfo,The following statement contains a magic number: if (closePositionBody == null)                  throw new ApiException(400' "Missing required parameter 'closePositionBody' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: if (instrument == null)                  throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ClosePositionAsyncWithHttpInfo,The following statement contains a magic number: if (closePositionBody == null)                  throw new ApiException(400' "Missing required parameter 'closePositionBody' when calling DefaultApi->ClosePosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeWithHttpInfo,The following statement contains a magic number: if (closeTradeBody == null)                  throw new ApiException(400' "Missing required parameter 'closeTradeBody' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CloseTradeAsyncWithHttpInfo,The following statement contains a magic number: if (closeTradeBody == null)                  throw new ApiException(400' "Missing required parameter 'closeTradeBody' when calling DefaultApi->CloseTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ConfigureAccountAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ConfigureAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderWithHttpInfo,The following statement contains a magic number: if (createOrderBody == null)                  throw new ApiException(400' "Missing required parameter 'createOrderBody' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrderAsyncWithHttpInfo,The following statement contains a magic number: if (createOrderBody == null)                  throw new ApiException(400' "Missing required parameter 'createOrderBody' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccount");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountChangesAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountChanges");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountInstrumentsAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountInstruments");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetAccountSummaryAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetAccountSummary");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoWithHttpInfo,The following statement contains a magic number: if (userSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetExternalUserInfoAsyncWithHttpInfo,The following statement contains a magic number: if (userSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetExternalUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesWithHttpInfo,The following statement contains a magic number: if (instrument == null)                  throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetInstrumentCandlesAsyncWithHttpInfo,The following statement contains a magic number: if (instrument == null)                  throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetInstrumentCandles");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetOrderAsyncWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->GetOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionWithHttpInfo,The following statement contains a magic number: if (instrument == null)                  throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPositionAsyncWithHttpInfo,The following statement contains a magic number: if (instrument == null)                  throw new ApiException(400' "Missing required parameter 'instrument' when calling DefaultApi->GetPosition");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesWithHttpInfo,The following statement contains a magic number: if (instruments == null)                  throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetPricesAsyncWithHttpInfo,The following statement contains a magic number: if (instruments == null)                  throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->GetPrices");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTradeAsyncWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->GetTrade");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionWithHttpInfo,The following statement contains a magic number: if (transactionID == null)                  throw new ApiException(400' "Missing required parameter 'transactionID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionAsyncWithHttpInfo,The following statement contains a magic number: if (transactionID == null)                  throw new ApiException(400' "Missing required parameter 'transactionID' when calling DefaultApi->GetTransaction");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: if (from == null)                  throw new ApiException(400' "Missing required parameter 'from' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeWithHttpInfo,The following statement contains a magic number: if (to == null)                  throw new ApiException(400' "Missing required parameter 'to' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: if (from == null)                  throw new ApiException(400' "Missing required parameter 'from' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionRangeAsyncWithHttpInfo,The following statement contains a magic number: if (to == null)                  throw new ApiException(400' "Missing required parameter 'to' when calling DefaultApi->GetTransactionRange");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdWithHttpInfo,The following statement contains a magic number: if (id == null)                  throw new ApiException(400' "Missing required parameter 'id' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetTransactionsSinceIdAsyncWithHttpInfo,The following statement contains a magic number: if (id == null)                  throw new ApiException(400' "Missing required parameter 'id' when calling DefaultApi->GetTransactionsSinceId");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoWithHttpInfo,The following statement contains a magic number: if (userSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,GetUserInfoAsyncWithHttpInfo,The following statement contains a magic number: if (userSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'userSpecifier' when calling DefaultApi->GetUserInfo");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListAccounts");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListAccountsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListAccounts");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenPositionsAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOpenTradesAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOpenTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPositionsAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPositions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTradesAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTrades");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListTransactionsAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderWithHttpInfo,The following statement contains a magic number: if (replaceOrderBody == null)                  throw new ApiException(400' "Missing required parameter 'replaceOrderBody' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrderAsyncWithHttpInfo,The following statement contains a magic number: if (replaceOrderBody == null)                  throw new ApiException(400' "Missing required parameter 'replaceOrderBody' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsWithHttpInfo,The following statement contains a magic number: if (setOrderClientExtensionsBody == null)                  throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetOrderClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (setOrderClientExtensionsBody == null)                  throw new ApiException(400' "Missing required parameter 'setOrderClientExtensionsBody' when calling DefaultApi->SetOrderClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsWithHttpInfo,The following statement contains a magic number: if (setTradeClientExtensionsBody == null)                  throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeClientExtensionsAsyncWithHttpInfo,The following statement contains a magic number: if (setTradeClientExtensionsBody == null)                  throw new ApiException(400' "Missing required parameter 'setTradeClientExtensionsBody' when calling DefaultApi->SetTradeClientExtensions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersWithHttpInfo,The following statement contains a magic number: if (setTradeDependentOrdersBody == null)                  throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (tradeSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'tradeSpecifier' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,SetTradeDependentOrdersAsyncWithHttpInfo,The following statement contains a magic number: if (setTradeDependentOrdersBody == null)                  throw new ApiException(400' "Missing required parameter 'setTradeDependentOrdersBody' when calling DefaultApi->SetTradeDependentOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingWithHttpInfo,The following statement contains a magic number: if (instruments == null)                  throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamPricingAsyncWithHttpInfo,The following statement contains a magic number: if (instruments == null)                  throw new ApiException(400' "Missing required parameter 'instruments' when calling DefaultApi->StreamPricing");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,StreamTransactionsAsyncWithHttpInfo,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->StreamTransactions");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ListPendingOrdersAsJson,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ListPendingOrders");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,CreateOrder,The following statement contains a magic number: if (createOrderBody == null)                  throw new ApiException(400' "Missing required parameter 'createOrderBody' when calling DefaultApi->CreateOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: if (authorization == null)                  throw new ApiException(400' "Missing required parameter 'authorization' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: if (accountID == null)                  throw new ApiException(400' "Missing required parameter 'accountID' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: if (orderSpecifier == null)                  throw new ApiException(400' "Missing required parameter 'orderSpecifier' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Api,DefaultApi,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Api\DefaultApi.cs,ReplaceOrder,The following statement contains a magic number: if (replaceOrderBody == null)                  throw new ApiException(400' "Missing required parameter 'replaceOrderBody' when calling DefaultApi->ReplaceOrder");
Magic Number,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,Deserialize,The following statement contains a magic number: try              {                  return JsonConvert.DeserializeObject(response.Content' type' serializerSettings);              }              catch (Exception e)              {                  throw new ApiException(500' e.Message);              }
Magic Number,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,Serialize,The following statement contains a magic number: try              {                  return obj != null ? JsonConvert.SerializeObject(obj) : null;              }              catch (Exception e)              {                  throw new ApiException(500' e.Message);              }
Magic Number,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,ReadAsBytes,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,ReadAsBytes,The following statement contains a magic number: byte[] buffer = new byte[16*1024];
Magic Number,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,UrlEncode,The following statement contains a magic number: const int maxLength = 32766;
Magic Number,Oanda.RestV20.Client,ApiClient,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Client\ApiClient.cs,UrlEncode,The following statement contains a magic number: StringBuilder sb = new StringBuilder(input.Length * 2);
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Account,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Account.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChanges,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChanges.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrdersCreated != null)                      hash = hash * 59 + this.OrdersCreated.GetHashCode();                  if (this.OrdersCancelled != null)                      hash = hash * 59 + this.OrdersCancelled.GetHashCode();                  if (this.OrdersFilled != null)                      hash = hash * 59 + this.OrdersFilled.GetHashCode();                  if (this.OrdersTriggered != null)                      hash = hash * 59 + this.OrdersTriggered.GetHashCode();                  if (this.TradesOpened != null)                      hash = hash * 59 + this.TradesOpened.GetHashCode();                  if (this.TradesReduced != null)                      hash = hash * 59 + this.TradesReduced.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountChangesState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountChangesState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountID,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountID.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Mt4AccountID != null)                      hash = hash * 59 + this.Mt4AccountID.GetHashCode();                  if (this.Tags != null)                      hash = hash * 59 + this.Tags.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Mt4AccountID != null)                      hash = hash * 59 + this.Mt4AccountID.GetHashCode();                  if (this.Tags != null)                      hash = hash * 59 + this.Tags.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Mt4AccountID != null)                      hash = hash * 59 + this.Mt4AccountID.GetHashCode();                  if (this.Tags != null)                      hash = hash * 59 + this.Tags.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountProperties,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountProperties.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Mt4AccountID != null)                      hash = hash * 59 + this.Mt4AccountID.GetHashCode();                  if (this.Tags != null)                      hash = hash * 59 + this.Tags.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.Currency != null)                      hash = hash * 59 + this.Currency.GetHashCode();                  if (this.Balance != null)                      hash = hash * 59 + this.Balance.GetHashCode();                  if (this.CreatedByUserID != null)                      hash = hash * 59 + this.CreatedByUserID.GetHashCode();                  if (this.CreatedTime != null)                      hash = hash * 59 + this.CreatedTime.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this.ResettabledPLTime != null)                      hash = hash * 59 + this.ResettabledPLTime.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.MarginCallEnterTime != null)                      hash = hash * 59 + this.MarginCallEnterTime.GetHashCode();                  if (this.MarginCallExtensionCount != null)                      hash = hash * 59 + this.MarginCallExtensionCount.GetHashCode();                  if (this.LastMarginCallExtensionTime != null)                      hash = hash * 59 + this.LastMarginCallExtensionTime.GetHashCode();                  if (this.OpenTradeCount != null)                      hash = hash * 59 + this.OpenTradeCount.GetHashCode();                  if (this.OpenPositionCount != null)                      hash = hash * 59 + this.OpenPositionCount.GetHashCode();                  if (this.PendingOrderCount != null)                      hash = hash * 59 + this.PendingOrderCount.GetHashCode();                  if (this.HedgingEnabled != null)                      hash = hash * 59 + this.HedgingEnabled.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.NAV != null)                      hash = hash * 59 + this.NAV.GetHashCode();                  if (this.MarginUsed != null)                      hash = hash * 59 + this.MarginUsed.GetHashCode();                  if (this.MarginAvailable != null)                      hash = hash * 59 + this.MarginAvailable.GetHashCode();                  if (this.PositionValue != null)                      hash = hash * 59 + this.PositionValue.GetHashCode();                  if (this.MarginCloseoutUnrealizedPL != null)                      hash = hash * 59 + this.MarginCloseoutUnrealizedPL.GetHashCode();                  if (this.MarginCloseoutNAV != null)                      hash = hash * 59 + this.MarginCloseoutNAV.GetHashCode();                  if (this.MarginCloseoutMarginUsed != null)                      hash = hash * 59 + this.MarginCloseoutMarginUsed.GetHashCode();                  if (this.MarginCloseoutPercent != null)                      hash = hash * 59 + this.MarginCloseoutPercent.GetHashCode();                  if (this.MarginCloseoutPositionValue != null)                      hash = hash * 59 + this.MarginCloseoutPositionValue.GetHashCode();                  if (this.WithdrawalLimit != null)                      hash = hash * 59 + this.WithdrawalLimit.GetHashCode();                  if (this.MarginCallMarginUsed != null)                      hash = hash * 59 + this.MarginCallMarginUsed.GetHashCode();                  if (this.MarginCallPercent != null)                      hash = hash * 59 + this.MarginCallPercent.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,AccountUnits,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\AccountUnits.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.NetUnrealizedPL != null)                      hash = hash * 59 + this.NetUnrealizedPL.GetHashCode();                  if (this.LongUnrealizedPL != null)                      hash = hash * 59 + this.LongUnrealizedPL.GetHashCode();                  if (this.ShortUnrealizedPL != null)                      hash = hash * 59 + this.ShortUnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.NetUnrealizedPL != null)                      hash = hash * 59 + this.NetUnrealizedPL.GetHashCode();                  if (this.LongUnrealizedPL != null)                      hash = hash * 59 + this.LongUnrealizedPL.GetHashCode();                  if (this.ShortUnrealizedPL != null)                      hash = hash * 59 + this.ShortUnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.NetUnrealizedPL != null)                      hash = hash * 59 + this.NetUnrealizedPL.GetHashCode();                  if (this.LongUnrealizedPL != null)                      hash = hash * 59 + this.LongUnrealizedPL.GetHashCode();                  if (this.ShortUnrealizedPL != null)                      hash = hash * 59 + this.ShortUnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.NetUnrealizedPL != null)                      hash = hash * 59 + this.NetUnrealizedPL.GetHashCode();                  if (this.LongUnrealizedPL != null)                      hash = hash * 59 + this.LongUnrealizedPL.GetHashCode();                  if (this.ShortUnrealizedPL != null)                      hash = hash * 59 + this.ShortUnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedPositionState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedPositionState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.NetUnrealizedPL != null)                      hash = hash * 59 + this.NetUnrealizedPL.GetHashCode();                  if (this.LongUnrealizedPL != null)                      hash = hash * 59 + this.LongUnrealizedPL.GetHashCode();                  if (this.ShortUnrealizedPL != null)                      hash = hash * 59 + this.ShortUnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedTradeState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedTradeState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedTradeState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedTradeState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CalculatedTradeState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CalculatedTradeState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Bid != null)                      hash = hash * 59 + this.Bid.GetHashCode();                  if (this.Ask != null)                      hash = hash * 59 + this.Ask.GetHashCode();                  if (this.Mid != null)                      hash = hash * 59 + this.Mid.GetHashCode();                  if (this.Volume != null)                      hash = hash * 59 + this.Volume.GetHashCode();                  if (this.Complete != null)                      hash = hash * 59 + this.Complete.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Bid != null)                      hash = hash * 59 + this.Bid.GetHashCode();                  if (this.Ask != null)                      hash = hash * 59 + this.Ask.GetHashCode();                  if (this.Mid != null)                      hash = hash * 59 + this.Mid.GetHashCode();                  if (this.Volume != null)                      hash = hash * 59 + this.Volume.GetHashCode();                  if (this.Complete != null)                      hash = hash * 59 + this.Complete.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Bid != null)                      hash = hash * 59 + this.Bid.GetHashCode();                  if (this.Ask != null)                      hash = hash * 59 + this.Ask.GetHashCode();                  if (this.Mid != null)                      hash = hash * 59 + this.Mid.GetHashCode();                  if (this.Volume != null)                      hash = hash * 59 + this.Volume.GetHashCode();                  if (this.Complete != null)                      hash = hash * 59 + this.Complete.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Bid != null)                      hash = hash * 59 + this.Bid.GetHashCode();                  if (this.Ask != null)                      hash = hash * 59 + this.Ask.GetHashCode();                  if (this.Mid != null)                      hash = hash * 59 + this.Mid.GetHashCode();                  if (this.Volume != null)                      hash = hash * 59 + this.Volume.GetHashCode();                  if (this.Complete != null)                      hash = hash * 59 + this.Complete.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Bid != null)                      hash = hash * 59 + this.Bid.GetHashCode();                  if (this.Ask != null)                      hash = hash * 59 + this.Ask.GetHashCode();                  if (this.Mid != null)                      hash = hash * 59 + this.Mid.GetHashCode();                  if (this.Volume != null)                      hash = hash * 59 + this.Volume.GetHashCode();                  if (this.Complete != null)                      hash = hash * 59 + this.Complete.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Bid != null)                      hash = hash * 59 + this.Bid.GetHashCode();                  if (this.Ask != null)                      hash = hash * 59 + this.Ask.GetHashCode();                  if (this.Mid != null)                      hash = hash * 59 + this.Mid.GetHashCode();                  if (this.Volume != null)                      hash = hash * 59 + this.Volume.GetHashCode();                  if (this.Complete != null)                      hash = hash * 59 + this.Complete.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Candlestick,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Candlestick.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Bid != null)                      hash = hash * 59 + this.Bid.GetHashCode();                  if (this.Ask != null)                      hash = hash * 59 + this.Ask.GetHashCode();                  if (this.Mid != null)                      hash = hash * 59 + this.Mid.GetHashCode();                  if (this.Volume != null)                      hash = hash * 59 + this.Volume.GetHashCode();                  if (this.Complete != null)                      hash = hash * 59 + this.Complete.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.O != null)                      hash = hash * 59 + this.O.GetHashCode();                  if (this.H != null)                      hash = hash * 59 + this.H.GetHashCode();                  if (this.L != null)                      hash = hash * 59 + this.L.GetHashCode();                  if (this.C != null)                      hash = hash * 59 + this.C.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.O != null)                      hash = hash * 59 + this.O.GetHashCode();                  if (this.H != null)                      hash = hash * 59 + this.H.GetHashCode();                  if (this.L != null)                      hash = hash * 59 + this.L.GetHashCode();                  if (this.C != null)                      hash = hash * 59 + this.C.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.O != null)                      hash = hash * 59 + this.O.GetHashCode();                  if (this.H != null)                      hash = hash * 59 + this.H.GetHashCode();                  if (this.L != null)                      hash = hash * 59 + this.L.GetHashCode();                  if (this.C != null)                      hash = hash * 59 + this.C.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.O != null)                      hash = hash * 59 + this.O.GetHashCode();                  if (this.H != null)                      hash = hash * 59 + this.H.GetHashCode();                  if (this.L != null)                      hash = hash * 59 + this.L.GetHashCode();                  if (this.C != null)                      hash = hash * 59 + this.C.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CandlestickData,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CandlestickData.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.O != null)                      hash = hash * 59 + this.O.GetHashCode();                  if (this.H != null)                      hash = hash * 59 + this.H.GetHashCode();                  if (this.L != null)                      hash = hash * 59 + this.L.GetHashCode();                  if (this.C != null)                      hash = hash * 59 + this.C.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientComment,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientComment.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientConfigureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientConfigureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Tag != null)                      hash = hash * 59 + this.Tag.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Tag != null)                      hash = hash * 59 + this.Tag.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Tag != null)                      hash = hash * 59 + this.Tag.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientExtensions,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientExtensions.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Tag != null)                      hash = hash * 59 + this.Tag.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientID,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientID.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClientTag,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClientTag.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongUnits != null)                      hash = hash * 59 + this.LongUnits.GetHashCode();                  if (this.LongClientExtensions != null)                      hash = hash * 59 + this.LongClientExtensions.GetHashCode();                  if (this.ShortUnits != null)                      hash = hash * 59 + this.ShortUnits.GetHashCode();                  if (this.ShortClientExtensions != null)                      hash = hash * 59 + this.ShortClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongUnits != null)                      hash = hash * 59 + this.LongUnits.GetHashCode();                  if (this.LongClientExtensions != null)                      hash = hash * 59 + this.LongClientExtensions.GetHashCode();                  if (this.ShortUnits != null)                      hash = hash * 59 + this.ShortUnits.GetHashCode();                  if (this.ShortClientExtensions != null)                      hash = hash * 59 + this.ShortClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongUnits != null)                      hash = hash * 59 + this.LongUnits.GetHashCode();                  if (this.LongClientExtensions != null)                      hash = hash * 59 + this.LongClientExtensions.GetHashCode();                  if (this.ShortUnits != null)                      hash = hash * 59 + this.ShortUnits.GetHashCode();                  if (this.ShortClientExtensions != null)                      hash = hash * 59 + this.ShortClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongUnits != null)                      hash = hash * 59 + this.LongUnits.GetHashCode();                  if (this.LongClientExtensions != null)                      hash = hash * 59 + this.LongClientExtensions.GetHashCode();                  if (this.ShortUnits != null)                      hash = hash * 59 + this.ShortUnits.GetHashCode();                  if (this.ShortClientExtensions != null)                      hash = hash * 59 + this.ShortClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ClosePositionBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ClosePositionBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongUnits != null)                      hash = hash * 59 + this.LongUnits.GetHashCode();                  if (this.LongClientExtensions != null)                      hash = hash * 59 + this.LongClientExtensions.GetHashCode();                  if (this.ShortUnits != null)                      hash = hash * 59 + this.ShortUnits.GetHashCode();                  if (this.ShortClientExtensions != null)                      hash = hash * 59 + this.ShortClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTradeBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTradeBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTradeBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTradeBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CloseTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CloseTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ConfigureAccountBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ConfigureAccountBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ConfigureAccountBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ConfigureAccountBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ConfigureAccountBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ConfigureAccountBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Alias != null)                      hash = hash * 59 + this.Alias.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateOrderBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateOrderBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Order != null)                      hash = hash * 59 + this.Order.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateOrderBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateOrderBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Order != null)                      hash = hash * 59 + this.Order.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,CreateTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\CreateTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DivisionID != null)                      hash = hash * 59 + this.DivisionID.GetHashCode();                  if (this.SiteID != null)                      hash = hash * 59 + this.SiteID.GetHashCode();                  if (this.AccountUserID != null)                      hash = hash * 59 + this.AccountUserID.GetHashCode();                  if (this.AccountNumber != null)                      hash = hash * 59 + this.AccountNumber.GetHashCode();                  if (this.HomeCurrency != null)                      hash = hash * 59 + this.HomeCurrency.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Currency,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Currency.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DailyFinancingTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DailyFinancingTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.AccountFinancingMode != null)                      hash = hash * 59 + this.AccountFinancingMode.GetHashCode();                  if (this.PositionFinancings != null)                      hash = hash * 59 + this.PositionFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DateTime,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DateTime.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,DecimalNumber,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DecimalNumber.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DelayedTradeClosureTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DelayedTradeClosureTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.TriggerDistance != null)                      hash = hash * 59 + this.TriggerDistance.GetHashCode();                  if (this.IsTriggerDistanceExact != null)                      hash = hash * 59 + this.IsTriggerDistanceExact.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.TriggerDistance != null)                      hash = hash * 59 + this.TriggerDistance.GetHashCode();                  if (this.IsTriggerDistanceExact != null)                      hash = hash * 59 + this.IsTriggerDistanceExact.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.TriggerDistance != null)                      hash = hash * 59 + this.TriggerDistance.GetHashCode();                  if (this.IsTriggerDistanceExact != null)                      hash = hash * 59 + this.IsTriggerDistanceExact.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.TriggerDistance != null)                      hash = hash * 59 + this.TriggerDistance.GetHashCode();                  if (this.IsTriggerDistanceExact != null)                      hash = hash * 59 + this.IsTriggerDistanceExact.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,DynamicOrderState,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\DynamicOrderState.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.TriggerDistance != null)                      hash = hash * 59 + this.TriggerDistance.GetHashCode();                  if (this.IsTriggerDistanceExact != null)                      hash = hash * 59 + this.IsTriggerDistanceExact.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse200,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse200.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Accounts != null)                      hash = hash * 59 + this.Accounts.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse200,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse200.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Accounts != null)                      hash = hash * 59 + this.Accounts.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Account != null)                      hash = hash * 59 + this.Account.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Account != null)                      hash = hash * 59 + this.Account.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Account != null)                      hash = hash * 59 + this.Account.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20010,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20010.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20012,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20012.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20012,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20012.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20012,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20012.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Positions != null)                      hash = hash * 59 + this.Positions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20013,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20013.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Position != null)                      hash = hash * 59 + this.Position.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20013,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20013.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Position != null)                      hash = hash * 59 + this.Position.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20013,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20013.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Position != null)                      hash = hash * 59 + this.Position.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20014,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20014.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderCreateTransaction != null)                      hash = hash * 59 + this.LongOrderCreateTransaction.GetHashCode();                  if (this.LongOrderFillTransaction != null)                      hash = hash * 59 + this.LongOrderFillTransaction.GetHashCode();                  if (this.LongOrderCancelTransaction != null)                      hash = hash * 59 + this.LongOrderCancelTransaction.GetHashCode();                  if (this.ShortOrderCreateTransaction != null)                      hash = hash * 59 + this.ShortOrderCreateTransaction.GetHashCode();                  if (this.ShortOrderFillTransaction != null)                      hash = hash * 59 + this.ShortOrderFillTransaction.GetHashCode();                  if (this.ShortOrderCancelTransaction != null)                      hash = hash * 59 + this.ShortOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20015,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20015.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserInfo != null)                      hash = hash * 59 + this.UserInfo.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20015,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20015.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserInfo != null)                      hash = hash * 59 + this.UserInfo.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20016,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20016.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserInfo != null)                      hash = hash * 59 + this.UserInfo.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20016,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20016.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserInfo != null)                      hash = hash * 59 + this.UserInfo.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20017,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20017.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.From != null)                      hash = hash * 59 + this.From.GetHashCode();                  if (this.To != null)                      hash = hash * 59 + this.To.GetHashCode();                  if (this.PageSize != null)                      hash = hash * 59 + this.PageSize.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Count != null)                      hash = hash * 59 + this.Count.GetHashCode();                  if (this.Pages != null)                      hash = hash * 59 + this.Pages.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20018,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20018.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transaction != null)                      hash = hash * 59 + this.Transaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20018,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20018.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transaction != null)                      hash = hash * 59 + this.Transaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20018,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20018.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transaction != null)                      hash = hash * 59 + this.Transaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20019,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20019.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20019,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20019.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20019,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20019.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transactions != null)                      hash = hash * 59 + this.Transactions.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Account != null)                      hash = hash * 59 + this.Account.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Account != null)                      hash = hash * 59 + this.Account.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Account != null)                      hash = hash * 59 + this.Account.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20020,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20020.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transaction != null)                      hash = hash * 59 + this.Transaction.GetHashCode();                  if (this.Heartbeat != null)                      hash = hash * 59 + this.Heartbeat.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20020,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20020.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transaction != null)                      hash = hash * 59 + this.Transaction.GetHashCode();                  if (this.Heartbeat != null)                      hash = hash * 59 + this.Heartbeat.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20020,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20020.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Transaction != null)                      hash = hash * 59 + this.Transaction.GetHashCode();                  if (this.Heartbeat != null)                      hash = hash * 59 + this.Heartbeat.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20021,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20021.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Prices != null)                      hash = hash * 59 + this.Prices.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20021,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20021.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Prices != null)                      hash = hash * 59 + this.Prices.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20022,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20022.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Heartbeat != null)                      hash = hash * 59 + this.Heartbeat.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20022,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20022.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Heartbeat != null)                      hash = hash * 59 + this.Heartbeat.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20022,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20022.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Heartbeat != null)                      hash = hash * 59 + this.Heartbeat.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20023,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20023.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20023,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20023.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20023,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20023.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20024,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20024.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20024,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20024.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20024,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20024.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trades != null)                      hash = hash * 59 + this.Trades.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20025,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20025.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trade != null)                      hash = hash * 59 + this.Trade.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20025,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20025.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trade != null)                      hash = hash * 59 + this.Trade.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20025,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20025.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Trade != null)                      hash = hash * 59 + this.Trade.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20026,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20026.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20027,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20027.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20028,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20028.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelTransaction.GetHashCode();                  if (this.TakeProfitOrderTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderTransaction.GetHashCode();                  if (this.TakeProfitOrderFillTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderFillTransaction.GetHashCode();                  if (this.TakeProfitOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCreatedCancelTransaction.GetHashCode();                  if (this.StopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelTransaction.GetHashCode();                  if (this.StopLossOrderTransaction != null)                      hash = hash * 59 + this.StopLossOrderTransaction.GetHashCode();                  if (this.StopLossOrderFillTransaction != null)                      hash = hash * 59 + this.StopLossOrderFillTransaction.GetHashCode();                  if (this.StopLossOrderCreatedCancelTransaction != null)                      hash = hash * 59 + this.StopLossOrderCreatedCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelTransaction.GetHashCode();                  if (this.TrailingStopLossOrderTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Granularity != null)                      hash = hash * 59 + this.Granularity.GetHashCode();                  if (this.Candles != null)                      hash = hash * 59 + this.Candles.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Granularity != null)                      hash = hash * 59 + this.Granularity.GetHashCode();                  if (this.Candles != null)                      hash = hash * 59 + this.Candles.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Granularity != null)                      hash = hash * 59 + this.Granularity.GetHashCode();                  if (this.Candles != null)                      hash = hash * 59 + this.Candles.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse20029,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse20029.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Granularity != null)                      hash = hash * 59 + this.Granularity.GetHashCode();                  if (this.Candles != null)                      hash = hash * 59 + this.Candles.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instruments != null)                      hash = hash * 59 + this.Instruments.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instruments != null)                      hash = hash * 59 + this.Instruments.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instruments != null)                      hash = hash * 59 + this.Instruments.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureTransaction != null)                      hash = hash * 59 + this.ClientConfigureTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureTransaction != null)                      hash = hash * 59 + this.ClientConfigureTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureTransaction != null)                      hash = hash * 59 + this.ClientConfigureTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Changes != null)                      hash = hash * 59 + this.Changes.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Changes != null)                      hash = hash * 59 + this.Changes.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Changes != null)                      hash = hash * 59 + this.Changes.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Changes != null)                      hash = hash * 59 + this.Changes.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Orders != null)                      hash = hash * 59 + this.Orders.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2008,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2008.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Order != null)                      hash = hash * 59 + this.Order.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2008,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2008.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Order != null)                      hash = hash * 59 + this.Order.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2008,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2008.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Order != null)                      hash = hash * 59 + this.Order.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2009,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2009.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse201,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse201.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse2011,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse2011.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelTransaction != null)                      hash = hash * 59 + this.OrderCancelTransaction.GetHashCode();                  if (this.OrderCreateTransaction != null)                      hash = hash * 59 + this.OrderCreateTransaction.GetHashCode();                  if (this.OrderFillTransaction != null)                      hash = hash * 59 + this.OrderFillTransaction.GetHashCode();                  if (this.OrderReissueTransaction != null)                      hash = hash * 59 + this.OrderReissueTransaction.GetHashCode();                  if (this.OrderReissueRejectTransaction != null)                      hash = hash * 59 + this.OrderReissueRejectTransaction.GetHashCode();                  if (this.ReplacingOrderCancelTransaction != null)                      hash = hash * 59 + this.ReplacingOrderCancelTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureRejectTransaction != null)                      hash = hash * 59 + this.ClientConfigureRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureRejectTransaction != null)                      hash = hash * 59 + this.ClientConfigureRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureRejectTransaction != null)                      hash = hash * 59 + this.ClientConfigureRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureRejectTransaction != null)                      hash = hash * 59 + this.ClientConfigureRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse400,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse400.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientConfigureRejectTransaction != null)                      hash = hash * 59 + this.ClientConfigureRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4001,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4001.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4002,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4002.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4003,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4003.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4004,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4004.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4005,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4005.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4006,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4006.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4007,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4007.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfitOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderCancelRejectTransaction.GetHashCode();                  if (this.TakeProfitOrderRejectTransaction != null)                      hash = hash * 59 + this.TakeProfitOrderRejectTransaction.GetHashCode();                  if (this.StopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.StopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.StopLossOrderRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderCancelRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderCancelRejectTransaction.GetHashCode();                  if (this.TrailingStopLossOrderRejectTransaction != null)                      hash = hash * 59 + this.TrailingStopLossOrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse401,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse401.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse401,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse401.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse401,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse401.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse404,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse404.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4041,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4041.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4042,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4042.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderCancelRejectTransaction != null)                      hash = hash * 59 + this.OrderCancelRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4043,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4043.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.OrderClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4044,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4044.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.LongOrderRejectTransaction != null)                      hash = hash * 59 + this.LongOrderRejectTransaction.GetHashCode();                  if (this.ShortOrderRejectTransaction != null)                      hash = hash * 59 + this.ShortOrderRejectTransaction.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4045,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4045.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderRejectTransaction != null)                      hash = hash * 59 + this.OrderRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InlineResponse4046,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InlineResponse4046.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeClientExtensionsModifyRejectTransaction != null)                      hash = hash * 59 + this.TradeClientExtensionsModifyRejectTransaction.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.RelatedTransactionIDs != null)                      hash = hash * 59 + this.RelatedTransactionIDs.GetHashCode();                  if (this.ErrorCode != null)                      hash = hash * 59 + this.ErrorCode.GetHashCode();                  if (this.ErrorMessage != null)                      hash = hash * 59 + this.ErrorMessage.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Instrument,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Instrument.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Name != null)                      hash = hash * 59 + this.Name.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.DisplayName != null)                      hash = hash * 59 + this.DisplayName.GetHashCode();                  if (this.PipLocation != null)                      hash = hash * 59 + this.PipLocation.GetHashCode();                  if (this.DisplayPrecision != null)                      hash = hash * 59 + this.DisplayPrecision.GetHashCode();                  if (this.TradeUnitsPrecision != null)                      hash = hash * 59 + this.TradeUnitsPrecision.GetHashCode();                  if (this.MinimumTradeSize != null)                      hash = hash * 59 + this.MinimumTradeSize.GetHashCode();                  if (this.MaximumTrailingStopDistance != null)                      hash = hash * 59 + this.MaximumTrailingStopDistance.GetHashCode();                  if (this.MinimumTrailingStopDistance != null)                      hash = hash * 59 + this.MinimumTrailingStopDistance.GetHashCode();                  if (this.MaximumPositionSize != null)                      hash = hash * 59 + this.MaximumPositionSize.GetHashCode();                  if (this.MaximumOrderUnits != null)                      hash = hash * 59 + this.MaximumOrderUnits.GetHashCode();                  if (this.MarginRate != null)                      hash = hash * 59 + this.MarginRate.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,InstrumentName,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\InstrumentName.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LimitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LimitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationSchedule,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationSchedule.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Steps != null)                      hash = hash * 59 + this.Steps.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationSchedule,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationSchedule.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Steps != null)                      hash = hash * 59 + this.Steps.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Timestamp != null)                      hash = hash * 59 + this.Timestamp.GetHashCode();                  if (this.BidLiquidityUsed != null)                      hash = hash * 59 + this.BidLiquidityUsed.GetHashCode();                  if (this.AskLiquidityUsed != null)                      hash = hash * 59 + this.AskLiquidityUsed.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Timestamp != null)                      hash = hash * 59 + this.Timestamp.GetHashCode();                  if (this.BidLiquidityUsed != null)                      hash = hash * 59 + this.BidLiquidityUsed.GetHashCode();                  if (this.AskLiquidityUsed != null)                      hash = hash * 59 + this.AskLiquidityUsed.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Timestamp != null)                      hash = hash * 59 + this.Timestamp.GetHashCode();                  if (this.BidLiquidityUsed != null)                      hash = hash * 59 + this.BidLiquidityUsed.GetHashCode();                  if (this.AskLiquidityUsed != null)                      hash = hash * 59 + this.AskLiquidityUsed.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,LiquidityRegenerationScheduleStep,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\LiquidityRegenerationScheduleStep.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Timestamp != null)                      hash = hash * 59 + this.Timestamp.GetHashCode();                  if (this.BidLiquidityUsed != null)                      hash = hash * 59 + this.BidLiquidityUsed.GetHashCode();                  if (this.AskLiquidityUsed != null)                      hash = hash * 59 + this.AskLiquidityUsed.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallEnterTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallEnterTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExitTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExitTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarginCallExtendTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarginCallExtendTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.ExtensionNumber != null)                      hash = hash * 59 + this.ExtensionNumber.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.InitialMarketPrice != null)                      hash = hash * 59 + this.InitialMarketPrice.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketIfTouchedOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketIfTouchedOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.SourceTransactionID != null)                      hash = hash * 59 + this.SourceTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.SourceTransactionID != null)                      hash = hash * 59 + this.SourceTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.SourceTransactionID != null)                      hash = hash * 59 + this.SourceTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderDelayedTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderDelayedTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.SourceTransactionID != null)                      hash = hash * 59 + this.SourceTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderMarginCloseout,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderMarginCloseout.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderMarginCloseout,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderMarginCloseout.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderPositionCloseout,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderPositionCloseout.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderPositionCloseout,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderPositionCloseout.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderPositionCloseout,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderPositionCloseout.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTradeClose,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTradeClose.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,MarketOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\MarketOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TradeClose != null)                      hash = hash * 59 + this.TradeClose.GetHashCode();                  if (this.LongPositionCloseout != null)                      hash = hash * 59 + this.LongPositionCloseout.GetHashCode();                  if (this.ShortPositionCloseout != null)                      hash = hash * 59 + this.ShortPositionCloseout.GetHashCode();                  if (this.MarginCloseout != null)                      hash = hash * 59 + this.MarginCloseout.GetHashCode();                  if (this.DelayedTradeClose != null)                      hash = hash * 59 + this.DelayedTradeClose.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OpenTradeFinancing,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OpenTradeFinancing.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OpenTradeFinancing,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OpenTradeFinancing.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OpenTradeFinancing,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OpenTradeFinancing.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Order,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Order,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Order,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Order,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Order,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Order.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderCancelTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderCancelTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.ClientExtensionsModify != null)                      hash = hash * 59 + this.ClientExtensionsModify.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderFillTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderFillTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  if (this.TradeOpened != null)                      hash = hash * 59 + this.TradeOpened.GetHashCode();                  if (this.TradesClosed != null)                      hash = hash * 59 + this.TradesClosed.GetHashCode();                  if (this.TradeReduced != null)                      hash = hash * 59 + this.TradeReduced.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderID,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderID.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderIdentifier,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderIdentifier.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderIdentifier,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderIdentifier.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderIdentifier,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderIdentifier.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.OrderID != null)                      hash = hash * 59 + this.OrderID.GetHashCode();                  if (this.ClientOrderID != null)                      hash = hash * 59 + this.ClientOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,OrderSpecifier,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\OrderSpecifier.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Position,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Position.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.InstrumentID != null)                      hash = hash * 59 + this.InstrumentID.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.OpenTradeFinancings != null)                      hash = hash * 59 + this.OpenTradeFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.InstrumentID != null)                      hash = hash * 59 + this.InstrumentID.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.OpenTradeFinancings != null)                      hash = hash * 59 + this.OpenTradeFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.InstrumentID != null)                      hash = hash * 59 + this.InstrumentID.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.OpenTradeFinancings != null)                      hash = hash * 59 + this.OpenTradeFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionFinancing,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionFinancing.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.InstrumentID != null)                      hash = hash * 59 + this.InstrumentID.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.OpenTradeFinancings != null)                      hash = hash * 59 + this.OpenTradeFinancings.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.AveragePrice != null)                      hash = hash * 59 + this.AveragePrice.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.AveragePrice != null)                      hash = hash * 59 + this.AveragePrice.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.AveragePrice != null)                      hash = hash * 59 + this.AveragePrice.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.AveragePrice != null)                      hash = hash * 59 + this.AveragePrice.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.AveragePrice != null)                      hash = hash * 59 + this.AveragePrice.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.AveragePrice != null)                      hash = hash * 59 + this.AveragePrice.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PositionSide,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PositionSide.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.AveragePrice != null)                      hash = hash * 59 + this.AveragePrice.GetHashCode();                  if (this.TradeIDs != null)                      hash = hash * 59 + this.TradeIDs.GetHashCode();                  if (this.Pl != null)                      hash = hash * 59 + this.Pl.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.ResettablePL != null)                      hash = hash * 59 + this.ResettablePL.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Price,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Price.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.Status != null)                      hash = hash * 59 + this.Status.GetHashCode();                  if (this.Tradeable != null)                      hash = hash * 59 + this.Tradeable.GetHashCode();                  if (this.Bids != null)                      hash = hash * 59 + this.Bids.GetHashCode();                  if (this.Asks != null)                      hash = hash * 59 + this.Asks.GetHashCode();                  if (this.CloseoutBid != null)                      hash = hash * 59 + this.CloseoutBid.GetHashCode();                  if (this.CloseoutAsk != null)                      hash = hash * 59 + this.CloseoutAsk.GetHashCode();                  if (this.QuoteHomeConversionFactors != null)                      hash = hash * 59 + this.QuoteHomeConversionFactors.GetHashCode();                  if (this.UnitsAvailable != null)                      hash = hash * 59 + this.UnitsAvailable.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PriceBucket,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceBucket.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Liquidity != null)                      hash = hash * 59 + this.Liquidity.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PriceBucket,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceBucket.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Liquidity != null)                      hash = hash * 59 + this.Liquidity.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PriceBucket,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceBucket.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.Liquidity != null)                      hash = hash * 59 + this.Liquidity.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PriceValue,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PriceValue.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,PricingHeartbeat,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PricingHeartbeat.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PricingHeartbeat,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PricingHeartbeat.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,PricingHeartbeat,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\PricingHeartbeat.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,QuoteHomeConversionFactors,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\QuoteHomeConversionFactors.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.PositiveUnits != null)                      hash = hash * 59 + this.PositiveUnits.GetHashCode();                  if (this.NegativeUnits != null)                      hash = hash * 59 + this.NegativeUnits.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,QuoteHomeConversionFactors,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\QuoteHomeConversionFactors.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.PositiveUnits != null)                      hash = hash * 59 + this.PositiveUnits.GetHashCode();                  if (this.NegativeUnits != null)                      hash = hash * 59 + this.NegativeUnits.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,QuoteHomeConversionFactors,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\QuoteHomeConversionFactors.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.PositiveUnits != null)                      hash = hash * 59 + this.PositiveUnits.GetHashCode();                  if (this.NegativeUnits != null)                      hash = hash * 59 + this.NegativeUnits.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReopenTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReopenTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReplaceOrderBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReplaceOrderBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Order != null)                      hash = hash * 59 + this.Order.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ReplaceOrderBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ReplaceOrderBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Order != null)                      hash = hash * 59 + this.Order.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,RequestID,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\RequestID.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,ResetResettablePLTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\ResetResettablePLTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetOrderClientExtensionsBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetOrderClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetOrderClientExtensionsBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetOrderClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetOrderClientExtensionsBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetOrderClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetTradeClientExtensionsBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetTradeClientExtensionsBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeClientExtensionsBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfit != null)                      hash = hash * 59 + this.TakeProfit.GetHashCode();                  if (this.StopLoss != null)                      hash = hash * 59 + this.StopLoss.GetHashCode();                  if (this.TrailingStopLoss != null)                      hash = hash * 59 + this.TrailingStopLoss.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfit != null)                      hash = hash * 59 + this.TakeProfit.GetHashCode();                  if (this.StopLoss != null)                      hash = hash * 59 + this.StopLoss.GetHashCode();                  if (this.TrailingStopLoss != null)                      hash = hash * 59 + this.TrailingStopLoss.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfit != null)                      hash = hash * 59 + this.TakeProfit.GetHashCode();                  if (this.StopLoss != null)                      hash = hash * 59 + this.StopLoss.GetHashCode();                  if (this.TrailingStopLoss != null)                      hash = hash * 59 + this.TrailingStopLoss.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,SetTradeDependentOrdersBody,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\SetTradeDependentOrdersBody.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TakeProfit != null)                      hash = hash * 59 + this.TakeProfit.GetHashCode();                  if (this.StopLoss != null)                      hash = hash * 59 + this.StopLoss.GetHashCode();                  if (this.TrailingStopLoss != null)                      hash = hash * 59 + this.TrailingStopLoss.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,StopOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\StopOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.PriceBound != null)                      hash = hash * 59 + this.PriceBound.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.PositionFill != null)                      hash = hash * 59 + this.PositionFill.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOnFill != null)                      hash = hash * 59 + this.TakeProfitOnFill.GetHashCode();                  if (this.StopLossOnFill != null)                      hash = hash * 59 + this.StopLossOnFill.GetHashCode();                  if (this.TrailingStopLossOnFill != null)                      hash = hash * 59 + this.TrailingStopLossOnFill.GetHashCode();                  if (this.TradeClientExtensions != null)                      hash = hash * 59 + this.TradeClientExtensions.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TakeProfitOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TakeProfitOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Trade,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Trade.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrder != null)                      hash = hash * 59 + this.TakeProfitOrder.GetHashCode();                  if (this.StopLossOrder != null)                      hash = hash * 59 + this.StopLossOrder.GetHashCode();                  if (this.TrailingStopLossOrder != null)                      hash = hash * 59 + this.TrailingStopLossOrder.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeClientExtensionsModifyTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeClientExtensionsModifyTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.TradeClientExtensionsModify != null)                      hash = hash * 59 + this.TradeClientExtensionsModify.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeID,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeID.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeOpen,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeOpen.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeReduce,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeReduce.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSpecifier,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSpecifier.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TradeSummary,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TradeSummary.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Instrument != null)                      hash = hash * 59 + this.Instrument.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  if (this.OpenTime != null)                      hash = hash * 59 + this.OpenTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.InitialUnits != null)                      hash = hash * 59 + this.InitialUnits.GetHashCode();                  if (this.CurrentUnits != null)                      hash = hash * 59 + this.CurrentUnits.GetHashCode();                  if (this.RealizedPL != null)                      hash = hash * 59 + this.RealizedPL.GetHashCode();                  if (this.UnrealizedPL != null)                      hash = hash * 59 + this.UnrealizedPL.GetHashCode();                  if (this.AverageClosePrice != null)                      hash = hash * 59 + this.AverageClosePrice.GetHashCode();                  if (this.ClosingTransactionIDs != null)                      hash = hash * 59 + this.ClosingTransactionIDs.GetHashCode();                  if (this.Financing != null)                      hash = hash * 59 + this.Financing.GetHashCode();                  if (this.CloseTime != null)                      hash = hash * 59 + this.CloseTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.TakeProfitOrderID != null)                      hash = hash * 59 + this.TakeProfitOrderID.GetHashCode();                  if (this.StopLossOrderID != null)                      hash = hash * 59 + this.StopLossOrderID.GetHashCode();                  if (this.TrailingStopLossOrderID != null)                      hash = hash * 59 + this.TrailingStopLossOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrder,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrder.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.CreateTime != null)                      hash = hash * 59 + this.CreateTime.GetHashCode();                  if (this.State != null)                      hash = hash * 59 + this.State.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.TrailingStopValue != null)                      hash = hash * 59 + this.TrailingStopValue.GetHashCode();                  if (this.FillingTransactionID != null)                      hash = hash * 59 + this.FillingTransactionID.GetHashCode();                  if (this.FilledTime != null)                      hash = hash * 59 + this.FilledTime.GetHashCode();                  if (this.TradeOpenedID != null)                      hash = hash * 59 + this.TradeOpenedID.GetHashCode();                  if (this.TradeReducedID != null)                      hash = hash * 59 + this.TradeReducedID.GetHashCode();                  if (this.TradeClosedIDs != null)                      hash = hash * 59 + this.TradeClosedIDs.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  if (this.CancelledTime != null)                      hash = hash * 59 + this.CancelledTime.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.ReplacedByOrderID != null)                      hash = hash * 59 + this.ReplacedByOrderID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.IntendedReplacesOrderID != null)                      hash = hash * 59 + this.IntendedReplacesOrderID.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderRequest,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderRequest.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TrailingStopLossOrderTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TrailingStopLossOrderTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.TradeID != null)                      hash = hash * 59 + this.TradeID.GetHashCode();                  if (this.ClientTradeID != null)                      hash = hash * 59 + this.ClientTradeID.GetHashCode();                  if (this.Distance != null)                      hash = hash * 59 + this.Distance.GetHashCode();                  if (this.TimeInForce != null)                      hash = hash * 59 + this.TimeInForce.GetHashCode();                  if (this.GtdTime != null)                      hash = hash * 59 + this.GtdTime.GetHashCode();                  if (this.TriggerCondition != null)                      hash = hash * 59 + this.TriggerCondition.GetHashCode();                  if (this.Reason != null)                      hash = hash * 59 + this.Reason.GetHashCode();                  if (this.ClientExtensions != null)                      hash = hash * 59 + this.ClientExtensions.GetHashCode();                  if (this.OrderFillTransactionID != null)                      hash = hash * 59 + this.OrderFillTransactionID.GetHashCode();                  if (this.ReplacesOrderID != null)                      hash = hash * 59 + this.ReplacesOrderID.GetHashCode();                  if (this.CancellingTransactionID != null)                      hash = hash * 59 + this.CancellingTransactionID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\Transaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransactionHeartbeat,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionHeartbeat.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.LastTransactionID != null)                      hash = hash * 59 + this.LastTransactionID.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransactionID,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransactionID.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsRejectTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsRejectTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.RejectReason != null)                      hash = hash * 59 + this.RejectReason.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,TransferFundsTransaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\TransferFundsTransaction.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Id != null)                      hash = hash * 59 + this.Id.GetHashCode();                  if (this.Time != null)                      hash = hash * 59 + this.Time.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.AccountID != null)                      hash = hash * 59 + this.AccountID.GetHashCode();                  if (this.BatchID != null)                      hash = hash * 59 + this.BatchID.GetHashCode();                  if (this.RequestID != null)                      hash = hash * 59 + this.RequestID.GetHashCode();                  if (this.Type != null)                      hash = hash * 59 + this.Type.GetHashCode();                  if (this.Amount != null)                      hash = hash * 59 + this.Amount.GetHashCode();                  if (this.FundingReason != null)                      hash = hash * 59 + this.FundingReason.GetHashCode();                  if (this.Comment != null)                      hash = hash * 59 + this.Comment.GetHashCode();                  if (this.AccountBalance != null)                      hash = hash * 59 + this.AccountBalance.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Default != null)                      hash = hash * 59 + this._Default.GetHashCode();                  if (this.ReduceFirst != null)                      hash = hash * 59 + this.ReduceFirst.GetHashCode();                  if (this.ReduceOnly != null)                      hash = hash * 59 + this.ReduceOnly.GetHashCode();                  if (this.OpenOnly != null)                      hash = hash * 59 + this.OpenOnly.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Default != null)                      hash = hash * 59 + this._Default.GetHashCode();                  if (this.ReduceFirst != null)                      hash = hash * 59 + this.ReduceFirst.GetHashCode();                  if (this.ReduceOnly != null)                      hash = hash * 59 + this.ReduceOnly.GetHashCode();                  if (this.OpenOnly != null)                      hash = hash * 59 + this.OpenOnly.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Default != null)                      hash = hash * 59 + this._Default.GetHashCode();                  if (this.ReduceFirst != null)                      hash = hash * 59 + this.ReduceFirst.GetHashCode();                  if (this.ReduceOnly != null)                      hash = hash * 59 + this.ReduceOnly.GetHashCode();                  if (this.OpenOnly != null)                      hash = hash * 59 + this.OpenOnly.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Default != null)                      hash = hash * 59 + this._Default.GetHashCode();                  if (this.ReduceFirst != null)                      hash = hash * 59 + this.ReduceFirst.GetHashCode();                  if (this.ReduceOnly != null)                      hash = hash * 59 + this.ReduceOnly.GetHashCode();                  if (this.OpenOnly != null)                      hash = hash * 59 + this.OpenOnly.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailable,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailable.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Default != null)                      hash = hash * 59 + this._Default.GetHashCode();                  if (this.ReduceFirst != null)                      hash = hash * 59 + this.ReduceFirst.GetHashCode();                  if (this.ReduceOnly != null)                      hash = hash * 59 + this.ReduceOnly.GetHashCode();                  if (this.OpenOnly != null)                      hash = hash * 59 + this.OpenOnly.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailableDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailableDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailableDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailableDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UnitsAvailableDetails,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UnitsAvailableDetails.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this._Long != null)                      hash = hash * 59 + this._Long.GetHashCode();                  if (this._Short != null)                      hash = hash * 59 + this._Short.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfo,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Username != null)                      hash = hash * 59 + this.Username.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.EmailAddress != null)                      hash = hash * 59 + this.EmailAddress.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfo,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Username != null)                      hash = hash * 59 + this.Username.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.EmailAddress != null)                      hash = hash * 59 + this.EmailAddress.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfo,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Username != null)                      hash = hash * 59 + this.Username.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.EmailAddress != null)                      hash = hash * 59 + this.EmailAddress.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfo,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Username != null)                      hash = hash * 59 + this.Username.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.EmailAddress != null)                      hash = hash * 59 + this.EmailAddress.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfo,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfo.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Username != null)                      hash = hash * 59 + this.Username.GetHashCode();                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.EmailAddress != null)                      hash = hash * 59 + this.EmailAddress.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.FIFO != null)                      hash = hash * 59 + this.FIFO.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.FIFO != null)                      hash = hash * 59 + this.FIFO.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.FIFO != null)                      hash = hash * 59 + this.FIFO.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserInfoExternal,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserInfoExternal.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.UserID != null)                      hash = hash * 59 + this.UserID.GetHashCode();                  if (this.Country != null)                      hash = hash * 59 + this.Country.GetHashCode();                  if (this.FIFO != null)                      hash = hash * 59 + this.FIFO.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,UserSpecifier,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\UserSpecifier.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  return hash;              }
Magic Number,Oanda.RestV20.Model,VWAPReceipt,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\VWAPReceipt.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,VWAPReceipt,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\VWAPReceipt.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  return hash;              }
Magic Number,Oanda.RestV20.Model,VWAPReceipt,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV20\Model\VWAPReceipt.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 41;                  // Suitable nullity checks etc' of course :)                  if (this.Units != null)                      hash = hash * 59 + this.Units.GetHashCode();                  if (this.Price != null)                      hash = hash * 59 + this.Price.GetHashCode();                  return hash;              }
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,GetNextTicks,The following statement contains a magic number: do              {                  if (_subscriptions.IsEmpty)                  {                      Thread.Sleep(10);                      continue;                  }                    //If there's been an update to the subscriptions list; recreate the stream.                  if (_refresh)                  {                      var stream = Stream(GetTickers());                      pipe = stream.GetEnumerator();                      pipe.MoveNext();                      _refresh = false;                  }                                    if (pipe != null && pipe.Current != null)                  {                      var tsd = pipe.Current;                      if (tsd.Type == "trade")                      {                          var tick = CreateTick(tsd);                          if (tick != null)                          {                              yield return tick;                          }                      }                      pipe.MoveNext();                  }                } while (!_disconnect);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Refresh,The following statement contains a magic number: _refreshDelay = new Timer(5000);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CreateTick,The following statement contains a magic number: var unix = Convert.ToInt64(tsd.UnixDate) / 1000;
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CreateTick,The following statement contains a magic number: if (DateTime.UtcNow - utc > TimeSpan.FromSeconds(10)) return null;
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierBrokerage,The following statement contains a magic number: _rateLimitPeriod[TradierApiRequestType.Standard] = TimeSpan.FromMilliseconds(500);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierBrokerage,The following statement contains a magic number: _rateLimitPeriod[TradierApiRequestType.Data] = TimeSpan.FromMilliseconds(500);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,SetTokens,The following statement contains a magic number: var interval = (int)(1000*orderPollingIntervalInSeconds);
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The following statement contains a magic number: lock (_lockAccessCredentials)              {                  var client = new RestClient(RequestEndpoint);                  client.AddDefaultHeader("Accept"' "application/json");                  client.AddDefaultHeader("Authorization"' "Bearer " + AccessToken);                  //client.AddDefaultHeader("Content-Type"' "application/x-www-form-urlencoded");                    //Wait for the API rate limiting                  while (DateTime.Now < _rateLimitNextRequest[type]) Thread.Sleep(10);                  _rateLimitNextRequest[type] = DateTime.Now + _rateLimitPeriod[type];                    //Send the request:                  var raw = client.Execute(request);                  _previousResponseRaw = raw.Content;                  //Log.Trace("TradierBrokerage.Execute: " + raw.Content);                    try                  {                      if (rootName != "")                      {                          response = DeserializeRemoveRoot<T>(raw.Content' rootName);                      }                      else                      {                          response = JsonConvert.DeserializeObject<T>(raw.Content);                      }                  }                  catch(Exception err)                  {                      // tradier sometimes sends back poorly formed messages' response will be null                      // and we'll extract from it below                      Log.Error(err' "Poorly formed message. Content: " + raw.Content);                  }                    if (response == null)                  {                      TradierFaultContainer fault = null;                      try                      {                          fault = JsonConvert.DeserializeObject<TradierFaultContainer>(raw.Content);                      }                      catch                      {                          // tradier sometimes sends back poorly formed messages' response will be null                          // and we'll extract from it below                      }                      if (fault != null && fault.Fault != null)                      {                          // JSON Errors:                          Log.Trace(method + "(1): Parameters: " + string.Join("'"' parameters));                          Log.Error(method + "(1): " + fault.Fault.Description);                          OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "JsonError"' fault.Fault.Description));                      }                      else                      {                          // this happens when we try to cancel a filled order                          if (raw.Content.Contains("order already in finalized state: filled"))                          {                              if (request.Method == Method.DELETE)                              {                                  string orderId = "[unknown]";                                  var parameter = request.Parameters.FirstOrDefault(x => x.Name == "orderId");                                  if (parameter != null) orderId = parameter.Value.ToString();                                  OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "OrderAlreadyFilled"'                                      "Unable to cancel the order because it has already been filled. TradierOrderId: " + orderId                                      ));                              }                              return new T();                          }                            // this happens when a request for historical data should return an empty response                          if (type == TradierApiRequestType.Data && rootName == "series")                          {                              return new T();                          }                            // Text Errors:                          Log.Trace(method + "(2): Parameters: " + string.Join("'"' parameters));                          Log.Error(method + "(2): Response: " + raw.Content);                          OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "Unknown"' raw.Content));                      }                  }                    if (raw.ErrorException != null)                  {                      if (attempts++ < max)                      {                          Log.Trace(method + "(3): Attempting again...");                          // this will retry on time outs and other transport exception                          Thread.Sleep(3000);                          return Execute<T>(request' type' rootName' attempts' max);                      }                        Log.Trace(method + "(3): Parameters: " + string.Join("'"' parameters));                      OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' raw.ErrorException.GetType().Name' raw.ErrorException.ToString()));                        const string message = "Error retrieving response.  Check inner details for more info.";                      throw new ApplicationException(message' raw.ErrorException);                  }              }
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The following statement contains a magic number: lock (_lockAccessCredentials)              {                  var client = new RestClient(RequestEndpoint);                  client.AddDefaultHeader("Accept"' "application/json");                  client.AddDefaultHeader("Authorization"' "Bearer " + AccessToken);                  //client.AddDefaultHeader("Content-Type"' "application/x-www-form-urlencoded");                    //Wait for the API rate limiting                  while (DateTime.Now < _rateLimitNextRequest[type]) Thread.Sleep(10);                  _rateLimitNextRequest[type] = DateTime.Now + _rateLimitPeriod[type];                    //Send the request:                  var raw = client.Execute(request);                  _previousResponseRaw = raw.Content;                  //Log.Trace("TradierBrokerage.Execute: " + raw.Content);                    try                  {                      if (rootName != "")                      {                          response = DeserializeRemoveRoot<T>(raw.Content' rootName);                      }                      else                      {                          response = JsonConvert.DeserializeObject<T>(raw.Content);                      }                  }                  catch(Exception err)                  {                      // tradier sometimes sends back poorly formed messages' response will be null                      // and we'll extract from it below                      Log.Error(err' "Poorly formed message. Content: " + raw.Content);                  }                    if (response == null)                  {                      TradierFaultContainer fault = null;                      try                      {                          fault = JsonConvert.DeserializeObject<TradierFaultContainer>(raw.Content);                      }                      catch                      {                          // tradier sometimes sends back poorly formed messages' response will be null                          // and we'll extract from it below                      }                      if (fault != null && fault.Fault != null)                      {                          // JSON Errors:                          Log.Trace(method + "(1): Parameters: " + string.Join("'"' parameters));                          Log.Error(method + "(1): " + fault.Fault.Description);                          OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "JsonError"' fault.Fault.Description));                      }                      else                      {                          // this happens when we try to cancel a filled order                          if (raw.Content.Contains("order already in finalized state: filled"))                          {                              if (request.Method == Method.DELETE)                              {                                  string orderId = "[unknown]";                                  var parameter = request.Parameters.FirstOrDefault(x => x.Name == "orderId");                                  if (parameter != null) orderId = parameter.Value.ToString();                                  OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "OrderAlreadyFilled"'                                      "Unable to cancel the order because it has already been filled. TradierOrderId: " + orderId                                      ));                              }                              return new T();                          }                            // this happens when a request for historical data should return an empty response                          if (type == TradierApiRequestType.Data && rootName == "series")                          {                              return new T();                          }                            // Text Errors:                          Log.Trace(method + "(2): Parameters: " + string.Join("'"' parameters));                          Log.Error(method + "(2): Response: " + raw.Content);                          OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "Unknown"' raw.Content));                      }                  }                    if (raw.ErrorException != null)                  {                      if (attempts++ < max)                      {                          Log.Trace(method + "(3): Attempting again...");                          // this will retry on time outs and other transport exception                          Thread.Sleep(3000);                          return Execute<T>(request' type' rootName' attempts' max);                      }                        Log.Trace(method + "(3): Parameters: " + string.Join("'"' parameters));                      OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' raw.ErrorException.GetType().Name' raw.ErrorException.ToString()));                        const string message = "Error retrieving response.  Check inner details for more info.";                      throw new ApplicationException(message' raw.ErrorException);                  }              }
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,Execute,The following statement contains a magic number: if (response == null)              {                  if (attempts++ < max)                  {                      Log.Trace(method + "(4): Attempting again...");                      // this will retry on time outs and other transport exception                      Thread.Sleep(3000);                      return Execute<T>(request' type' rootName' attempts' max);                  }                    Log.Trace(method + "(4): Parameters: " + string.Join("'"' parameters));                  Log.Error(method + "(4): NULL Response: Raw Response: " + _previousResponseRaw);                  OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "NullResponse"' _previousResponseRaw));              }
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The following statement contains a magic number: if (price > 0) request.AddParameter("price"' Math.Round(price' 2));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,PlaceOrder,The following statement contains a magic number: if (stop > 0) request.AddParameter("stop"' Math.Round(stop' 2));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ChangeOrder,The following statement contains a magic number: if (price != 0) request.AddParameter("price"' Math.Round(price' 2).ToString(CultureInfo.InvariantCulture));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ChangeOrder,The following statement contains a magic number: if (stop != 0) request.AddParameter("stop"' Math.Round(stop' 2).ToString(CultureInfo.InvariantCulture));
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,TradierPlaceOrder,The following statement contains a magic number: if (response != null && response.Errors.Errors.IsNullOrEmpty())              {                  // send the submitted event                  const int orderFee = 0;                  order.QCOrder.PriceCurrency = "USD";                  OnOrderEvent(new OrderEvent(order.QCOrder' DateTime.UtcNow' orderFee) { Status = OrderStatus.Submitted });                    // mark this in our open orders before we submit so it's gauranteed to be there when we poll for updates                  UpdateCachedOpenOrder(response.Order.Id' new TradierOrderDetailed                  {                      Id = response.Order.Id'                      Quantity = order.Quantity'                      Status = TradierOrderStatus.Submitted'                      Symbol = order.Symbol'                      Type = order.Type'                      TransactionDate = DateTime.Now'                      AverageFillPrice = 0m'                      Class = classification'                      CreatedDate = DateTime.Now'                      Direction = order.Direction'                      Duration = order.Duration'                      LastFillPrice = 0m'                      LastFillQuantity = 0m'                      Legs = new List<TradierOrderLeg>()'                      NumberOfLegs = 0'                      Price = order.Price'                      QuantityExecuted = 0m'                      RemainingQuantity = order.Quantity'                      StopPrice = order.Stop                  });              }              else              {                  // invalidate the order' bad request                  const int orderFee = 0;                  OnOrderEvent(new OrderEvent(order.QCOrder' DateTime.UtcNow' orderFee) { Status = OrderStatus.Invalid });                    string message = _previousResponseRaw;                  if (response != null && response.Errors != null && !response.Errors.Errors.IsNullOrEmpty())                  {                      message = "Order " + order.QCOrder.Id + ": " + string.Join(Environment.NewLine' response.Errors.Errors);                      if (string.IsNullOrEmpty(order.QCOrder.Tag))                      {                          order.QCOrder.Tag = message;                      }                  }                    // send this error through to the console                  OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "OrderError"' message));                    // if we weren't given a broker ID' make an async request to fetch it and set the broker ID property on the qc order                  if (response == null || response.Order == null || response.Order.Id == 0)                  {                      Task.Run(() =>                      {                          var orders = GetIntradayAndPendingOrders()                              .Where(x => x.Status == TradierOrderStatus.Rejected)                              .Where(x => DateTime.UtcNow - x.TransactionDate < TimeSpan.FromSeconds(2));                            var recentOrder = orders.OrderByDescending(x => x.TransactionDate).FirstOrDefault(x => x.Symbol == order.Symbol && x.Quantity == order.Quantity && x.Direction == order.Direction && x.Type == order.Type);                          if (recentOrder == null)                          {                              // without this we're going to corrupt the algorithm state                              OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "OrderError"' "Unable to resolve rejected Tradier order id for QC order: " + order.QCOrder.Id));                              return;                          }                            order.QCOrder.BrokerId.Add(recentOrder.Id.ToString());                          Log.Trace("TradierBrokerage.TradierPlaceOrder(): Successfully resolved missing order ID: " + recentOrder.Id);                      });                  }              }
Magic Number,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,CheckForFills,The following statement contains a magic number: try              {                  var intradayAndPendingOrders = GetIntradayAndPendingOrders();                  if (intradayAndPendingOrders == null)                  {                      Log.Error("TradierBrokerage.CheckForFills(): Returned null response!");                      return;                  }                    var updatedOrders = intradayAndPendingOrders.ToDictionary(x => x.Id);                    // loop over our cache of orders looking for changes in status for fill quantities                  foreach (var cachedOrder in _cachedOpenOrdersByTradierOrderID)                  {                      TradierOrder updatedOrder;                      var hasUpdatedOrder = updatedOrders.TryGetValue(cachedOrder.Key' out updatedOrder);                      if (hasUpdatedOrder)                      {                          // determine if the order has been updated and produce fills accordingly                          ProcessPotentiallyUpdatedOrder(cachedOrder.Value' updatedOrder);                            // if the order is still open' update the cached value                          if (!OrderIsClosed(updatedOrder)) UpdateCachedOpenOrder(cachedOrder.Key' updatedOrder);                          continue;                      }                        // if we made it here this may be a canceled order via another portal' so we need to figure this one                       // out with its own rest call' do this async to not block this thread                      if (!_reentranceGuardByTradierOrderID.Add(cachedOrder.Key))                      {                          // we don't want to reenter this task' so we'll use a hashset to keep track of what orders are currently in there                          continue;                      }                        var cachedOrderLocal = cachedOrder;                      Task.Run(() =>                      {                          try                          {                              var updatedOrderLocal = GetOrder(cachedOrderLocal.Key);                              if (updatedOrderLocal == null)                              {                                  Log.Error(string.Format("TradierBrokerage.CheckForFills(): Unable to locate order {0} in cached open orders."' cachedOrderLocal.Key));                                  throw new Exception("TradierBrokerage.CheckForFills(): GetOrder() return null response");                              }                                UpdateCachedOpenOrder(cachedOrderLocal.Key' updatedOrderLocal);                              ProcessPotentiallyUpdatedOrder(cachedOrderLocal.Value' updatedOrderLocal);                          }                          catch (Exception err)                          {                              Log.Error(err);                              OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "PendingOrderNotReturned"'                                  "An error ocurred while trying to resolve fill events from Tradier orders: " + err));                          }                          finally                          {                              // signal that we've left the task                              _reentranceGuardByTradierOrderID.Remove(cachedOrderLocal.Key);                          }                      });                  }                    // if we get order updates for orders we're unaware of we need to bail' this can corrupt the algorithm state                  var unknownOrderIDs = updatedOrders.Where(IsUnknownOrderID).ToHashSet(x => x.Key);                  unknownOrderIDs.ExceptWith(_verifiedUnknownTradierOrderIDs);                  var fireTask = unknownOrderIDs.Count != 0 && _unknownTradierOrderIDs.Count == 0;                  foreach (var unknownOrderID in unknownOrderIDs)                  {                      _unknownTradierOrderIDs.Add(unknownOrderID);                  }                    if (fireTask)                  {                      // wait a second and then check the order provider to see if we have these broker IDs' maybe they came in later (ex' symbol denied for short trading)                      Task.Delay(TimeSpan.FromSeconds(2)).ContinueWith(t =>                      {                          var localUnknownTradierOrderIDs = _unknownTradierOrderIDs.ToHashSet();                          _unknownTradierOrderIDs.Clear();                          try                          {                              // verify we don't have them in the order provider                              Log.Trace("TradierBrokerage.CheckForFills(): Verifying missing brokerage IDs: " + string.Join("'"' localUnknownTradierOrderIDs));                              var orders = localUnknownTradierOrderIDs.Select(x => _orderProvider.GetOrderByBrokerageId(x)).Where(x => x != null);                              var stillUnknownOrderIDs = localUnknownTradierOrderIDs.Where(x => !orders.Any(y => y.BrokerId.Contains(x.ToString()))).ToList();                              if (stillUnknownOrderIDs.Count > 0)                              {                                  // fetch all rejected intraday orders within the last minute' we're going to exclude rejected orders from the error condition                                  var recentOrders = GetIntradayAndPendingOrders().Where(x => x.Status == TradierOrderStatus.Rejected)                                      .Where(x => DateTime.UtcNow - x.TransactionDate < TimeSpan.FromMinutes(1)).ToHashSet(x => x.Id);                                    // remove recently rejected orders' sometimes we'll get updates for these but we've already marked them as rejected                                  stillUnknownOrderIDs.RemoveAll(x => recentOrders.Contains(x));                                    if (stillUnknownOrderIDs.Count > 0)                                  {                                      // if we still have unknown IDs then we've gotta bail on the algorithm                                      var ids = string.Join("' "' stillUnknownOrderIDs);                                      Log.Error("TradierBrokerage.CheckForFills(): Unable to verify all missing brokerage IDs: " + ids);                                      OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Error' "UnknownOrderId"' "Received unknown Tradier order id(s): " + ids));                                      return;                                  }                              }                              foreach (var unknownTradierOrderID in localUnknownTradierOrderIDs)                              {                                  // add these to the verified list so we don't check them again                                  _verifiedUnknownTradierOrderIDs.Add(unknownTradierOrderID);                              }                              Log.Trace("TradierBrokerage.CheckForFills(): Verified all missing brokerage IDs.");                          }                          catch (Exception err)                          {                              // we need to recheck these order ids since we failed' so add them back to the set                              foreach (var id in localUnknownTradierOrderIDs) _unknownTradierOrderIDs.Add(id);                                Log.Error(err);                              OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "UnknownIdResolution"' "An error ocurred while trying to resolve unknown Tradier order IDs: " + err));                          }                      });                  }              }              catch (Exception err)              {                  Log.Error(err);                  OnMessage(new BrokerageMessageEvent(BrokerageMessageType.Warning' "CheckForFillsError"' "An error ocurred while checking for fills: " + err));              }              finally              {                  Monitor.Exit(_fillLock);              }
Missing Default,QuantConnect.Brokerages.Backtesting,BacktestingBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Backtesting\BacktestingBrokerage.cs,Scan,The following switch statement is missing a default case: switch (order.Type)                              {                                  case OrderType.Limit:                                      fills = new[] { model.LimitFill(security' order as LimitOrder) };                                      break;                                    case OrderType.StopMarket:                                      fills = new[] { model.StopMarketFill(security' order as StopMarketOrder) };                                      break;                                    case OrderType.Market:                                      fills = new[] { model.MarketFill(security' order as MarketOrder) };                                      break;                                    case OrderType.StopLimit:                                      fills = new[] { model.StopLimitFill(security' order as StopLimitOrder) };                                      break;                                    case OrderType.MarketOnOpen:                                      fills = new[] { model.MarketOnOpenFill(security' order as MarketOnOpenOrder) };                                      break;                                    case OrderType.MarketOnClose:                                      fills = new[] { model.MarketOnCloseFill(security' order as MarketOnCloseOrder) };                                      break;                                    case OrderType.OptionExercise:                                      var option = (Option)security;                                      fills = option.OptionExerciseModel.OptionExercise(option' order as OptionExerciseOrder).ToArray();                                      break;                              }
Missing Default,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,messageArrived,The following switch statement is missing a default case: switch (message.getStatusCode())              {                  case ISessionStatus.__Fields.STATUSCODE_READY:                      lock (_lockerConnectionMonitor)                      {                          _lastReadyMessageTime = DateTime.UtcNow;                      }                      break;              }
Missing Default,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,ConvertOrderStatus,The following switch statement is missing a default case: switch (status.getCode())              {                  case IFixValueDefs.__Fields.FXCMORDSTATUS_INPROCESS:                  case IFixValueDefs.__Fields.FXCMORDSTATUS_WAITING:                  case IFixValueDefs.__Fields.FXCMORDSTATUS_EXECUTING:                      result = OrderStatus.Submitted;                      break;                    case IFixValueDefs.__Fields.FXCMORDSTATUS_EXECUTED:                      result = OrderStatus.Filled;                      break;                    case IFixValueDefs.__Fields.FXCMORDSTATUS_CANCELLED:                  case IFixValueDefs.__Fields.FXCMORDSTATUS_EXPIRED:                      result = OrderStatus.Canceled;                      break;                    case IFixValueDefs.__Fields.FXCMORDSTATUS_REJECTED:                      result = OrderStatus.Invalid;                      break;              }
Missing Default,QuantConnect.Brokerages.Fxcm,FxcmBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Fxcm\FxcmBrokerage.cs,ToFxcmInterval,The following switch statement is missing a default case: switch (resolution)              {                  case Resolution.Tick:                      interval = FXCMTimingIntervalFactory.TICK;                        break;                  case Resolution.Second:                      interval = FXCMTimingIntervalFactory.SEC10;                        break;                  case Resolution.Minute:                      interval = FXCMTimingIntervalFactory.MIN1;                        break;                  case Resolution.Hour:                      interval = FXCMTimingIntervalFactory.HOUR1;                        break;                  case Resolution.Daily:                      interval = FXCMTimingIntervalFactory.DAY1;                        break;              }
Missing Default,QuantConnect.Brokerages.InteractiveBrokers.FinancialAdvisor,FinancialAdvisorConfiguration,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\FinancialAdvisor\FinancialAdvisorConfiguration.cs,Load,The following switch statement is missing a default case: switch (e.FaDataType)                  {                      case Constants.FaAliases:                          xmlAliases = e.FaXmlData;                          break;                        case Constants.FaGroups:                          xmlGroups = e.FaXmlData;                          break;                        case Constants.FaProfiles:                          xmlProfiles = e.FaXmlData;                          break;                  }
Missing Default,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetBrokerageSymbol,The following switch statement is missing a default case: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      return symbol.Underlying.Value;                    case SecurityType.Future:                      return GetBrokerageRootSymbol(symbol.ID.Symbol);                    case SecurityType.Equity:                      return symbol.Value.Replace("."' " ");              }
Missing Default,QuantConnect.Brokerages.InteractiveBrokers,InteractiveBrokersSymbolMapper,C:\repos\QuantConnect_Lean\Brokerages\InteractiveBrokers\InteractiveBrokersSymbolMapper.cs,GetLeanSymbol,The following switch statement is missing a default case: switch (securityType)                  {                      case SecurityType.Future:                          return Symbol.CreateFuture(GetLeanRootSymbol(brokerageSymbol)' market' expirationDate);                        case SecurityType.Option:                          return Symbol.CreateOption(brokerageSymbol' market' OptionStyle.American' optionRight' strike' expirationDate);                        case SecurityType.Equity:                          brokerageSymbol = brokerageSymbol.Replace(" "' ".");                          break;                  }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following switch statement is missing a default case: switch (order.Direction)                  {                      case OrderDirection.Buy:                          //Limit Order Does not like Lower Bound Values == Limit Price value                          //Don't set bounds when placing limit orders.                           //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled.                          break;                        case OrderDirection.Sell:                          //Limit Order Does not like Lower Bound Values == Limit Price value                          //Don't set bounds when placing limit orders.                           //Orders can be submitted with lower and upper bounds. If the market price on execution falls outside these bounds' it is considered a "Bounds Violation" and the order is cancelled.                          break;                  }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV1,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV1.cs,PopulateOrderRequestParameters,The following switch statement is missing a default case: switch (order.Direction)                  {                      case OrderDirection.Buy:                          requestParams.Add("upperBound"' ((StopLimitOrder)order).LimitPrice.ToString(CultureInfo.InvariantCulture));                          break;                        case OrderDirection.Sell:                          requestParams.Add("lowerBound"' ((StopLimitOrder)order).LimitPrice.ToString(CultureInfo.InvariantCulture));                          break;                  }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,OnTransactionDataReceived,The following switch statement is missing a default case: switch (type)              {                  case "HEARTBEAT":                      lock (LockerConnectionMonitor)                      {                          LastHeartbeatUtcTime = DateTime.UtcNow;                      }                      break;                    case "ORDER_FILL":                      var transaction = obj.ToObject<OrderFillTransaction>();                        var order = OrderProvider.GetOrderByBrokerageId(transaction.OrderID);                      if (order != null && (order.Type != OrderType.Market || order.Status != OrderStatus.Filled))                      {                          order.Status = OrderStatus.Filled;                            order.PriceCurrency = SecurityProvider.GetSecurity(order.Symbol).SymbolProperties.QuoteCurrency;                            const int orderFee = 0;                          OnOrderEvent(new OrderEvent(order' DateTime.UtcNow' orderFee' "Oanda Fill Event")                          {                              Status = OrderStatus.Filled'                              FillPrice = transaction.Price.ToDecimal()'                              FillQuantity = Convert.ToInt32(transaction.Units)                          });                      }                      break;              }
Missing Default,QuantConnect.Brokerages.Oanda,OandaRestApiV20,C:\repos\QuantConnect_Lean\Brokerages\Oanda\OandaRestApiV20.cs,OnPricingDataReceived,The following switch statement is missing a default case: switch (type)              {                  case "HEARTBEAT":                      lock (LockerConnectionMonitor)                      {                          LastHeartbeatUtcTime = DateTime.UtcNow;                      }                      break;                    case "PRICE":                      var data = obj.ToObject<Price>();                        var securityType = SymbolMapper.GetBrokerageSecurityType(data.Instrument);                      var symbol = SymbolMapper.GetLeanSymbol(data.Instrument' securityType' Market.Oanda);                      var time = GetTickDateTimeFromString(data.Time);                        // live ticks timestamps must be in exchange time zone                      DateTimeZone exchangeTimeZone;                      if (!_symbolExchangeTimeZones.TryGetValue(symbol' out exchangeTimeZone))                      {                          exchangeTimeZone = MarketHoursDatabase.FromDataFolder().GetExchangeHours(Market.Oanda' symbol' securityType).TimeZone;                          _symbolExchangeTimeZones.Add(symbol' exchangeTimeZone);                      }                      time = time.ConvertFromUtc(exchangeTimeZone);                        var bidPrice = Convert.ToDecimal(data.Bids.Last().Price);                      var askPrice = Convert.ToDecimal(data.Asks.Last().Price);                      var tick = new Tick(time' symbol' bidPrice' askPrice);                        lock (Ticks)                      {                          Ticks.Add(tick);                      }                      break;              }
Missing Default,QuantConnect.Brokerages.Oanda.RestV1.DataType,Transaction,C:\repos\QuantConnect_Lean\Brokerages\Oanda\RestV1\DataType\Transaction.cs,GetTitle,The following switch statement is missing a default case: switch ( type )              {                  case "CloseOrder":                      return "Order Closed";                  case "SellLimit":                      return "Sell Limit Order Created";                  case "BuyLimit":                      return "Buy Limit Order Created";              }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,GetHistory,The following switch statement is missing a default case: switch (request.Resolution)                  {                      case Resolution.Tick:                          history = GetHistoryTick(request.Symbol' start' end);                          break;                        case Resolution.Second:                          history = GetHistorySecond(request.Symbol' start' end);                          break;                        case Resolution.Minute:                          history = GetHistoryMinute(request.Symbol' start' end);                          break;                        case Resolution.Hour:                          history = GetHistoryHour(request.Symbol' start' end);                          break;                        case Resolution.Daily:                          history = GetHistoryDaily(request.Symbol' start' end);                          break;                  }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ConvertDirection,The following switch statement is missing a default case: switch (direction)                  {                      case OrderDirection.Buy:                          return TradierOrderDirection.Buy;                      case OrderDirection.Sell:                          return TradierOrderDirection.SellShort;                  }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ConvertDirection,The following switch statement is missing a default case: switch (direction)                  {                      case OrderDirection.Buy:                          //Increasing existing position:                          return TradierOrderDirection.Buy;                      case OrderDirection.Sell:                          //Reducing existing position:                          return TradierOrderDirection.Sell;                  }
Missing Default,QuantConnect.Brokerages.Tradier,TradierBrokerage,C:\repos\QuantConnect_Lean\Brokerages\Tradier\TradierBrokerage.HistoryProvider.cs,ConvertDirection,The following switch statement is missing a default case: switch (direction)                  {                      case OrderDirection.Buy:                          //Reducing existing short position:                          return TradierOrderDirection.BuyToCover;                      case OrderDirection.Sell:                          //Increasing existing short position:                          return TradierOrderDirection.SellShort;                  }
