Implementation smell,Namespace,Class,File,Method,Description
Long Statement,QuantConnect.Messaging,Messaging,C:\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The length of the statement  "                    var rstack = (!string.IsNullOrEmpty(runtime.StackTrace) ? (Environment.NewLine + " " + runtime.StackTrace) : string.Empty); " is 123.
Long Statement,QuantConnect.Messaging,Messaging,C:\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The length of the statement  "                    var hstack = (!string.IsNullOrEmpty(handled.StackTrace) ? (Environment.NewLine + " " + handled.StackTrace) : string.Empty); " is 123.
Long Statement,QuantConnect.Messaging,Messaging,C:\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The length of the statement  "                        //    Log.Trace("ROLLINGSTATS:: " + pair.Key + " SharpeRatio: " + Math.Round(pair.Value.PortfolioStatistics.SharpeRatio' 3)); " is 125.
Long Statement,QuantConnect.Messaging,StreamingApi,C:\repos\QuantConnect_Lean\Messaging\StreamingApi.cs,Transmit,The length of the statement  "                    Log.Error("StreamingApi.Transmit(): API Access token not set. Check your config.json file 'api-access-token' property."); " is 121.
Magic Number,QuantConnect.Messaging,StreamingApi,C:\repos\QuantConnect_Lean\Messaging\StreamingApi.cs,Transmit,The following statement contains a magic number: try              {                  var tx = JsonConvert.SerializeObject(packet);                  if (tx.Length > 10000)                  {                      Log.Trace("StreamingApi.Transmit(): Packet too long: " + packet.GetType());                      return;                  }                  if (userId == 0)                  {                      Log.Error("StreamingApi.Transmit(): UserId is not set. Check your config.json file 'job-user-id' property.");                      return;                  }                  if (apiToken == "")                  {                      Log.Error("StreamingApi.Transmit(): API Access token not set. Check your config.json file 'api-access-token' property.");                      return;                  }                    var request = new RestRequest();                  request.AddParameter("uid"' userId);                  request.AddParameter("token"' apiToken);                  request.AddParameter("tx"' tx);                  Client.ExecuteAsyncPost(request' (response' handle) =>                  {                      try                      {                          var result = JsonConvert.DeserializeObject<Response>(response.Content);                          if (result.Type == "error")                          {                              Log.Error(new Exception(result.Message)' "PacketType: " + packet.Type);                          }                      }                      catch                      {                          Log.Error("StreamingApi.Client.ExecuteAsyncPost(): Error deserializing JSON content.");                      }                  }' "POST");              }              catch (Exception err)              {                  Log.Error(err' "PacketType: " + packet.Type);              }
Missing Default,QuantConnect.Messaging,EventMessagingHandler,C:\repos\QuantConnect_Lean\Messaging\EventMessagingHandler.cs,ProcessPacket,The following switch statement is missing a default case: switch (packet.Type)              {                  case PacketType.Debug:                      var debug = (DebugPacket)packet;                      OnDebugEvent(debug);                      break;                    case PacketType.SystemDebug:                      var systemDebug = (SystemDebugPacket)packet;                      OnSystemDebugEvent(systemDebug);                      break;                    case PacketType.Log:                      var log = (LogPacket)packet;                      OnLogEvent(log);                      break;                    case PacketType.RuntimeError:                      var runtime = (RuntimeErrorPacket)packet;                      OnRuntimeErrorEvent(runtime);                      break;                    case PacketType.HandledError:                      var handled = (HandledErrorPacket)packet;                      OnHandledErrorEvent(handled);                      break;                    case PacketType.BacktestResult:                      var result = (BacktestResultPacket)packet;                      OnBacktestResultEvent(result);                      break;              }
Missing Default,QuantConnect.Messaging,Messaging,C:\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The following switch statement is missing a default case: switch (packet.Type)              {                  case PacketType.Debug:                      var debug = (DebugPacket) packet;                      Log.Trace("Debug: " + debug.Message);                      break;                    case PacketType.SystemDebug:                      var systemDebug = (SystemDebugPacket)packet;                      Log.Trace("Debug: " + systemDebug.Message);                      break;                    case PacketType.Log:                      var log = (LogPacket) packet;                      Log.Trace("Log: " + log.Message);                      break;                    case PacketType.RuntimeError:                      var runtime = (RuntimeErrorPacket) packet;                      var rstack = (!string.IsNullOrEmpty(runtime.StackTrace) ? (Environment.NewLine + " " + runtime.StackTrace) : string.Empty);                      Log.Error(runtime.Message + rstack);                      break;                    case PacketType.HandledError:                      var handled = (HandledErrorPacket) packet;                      var hstack = (!string.IsNullOrEmpty(handled.StackTrace) ? (Environment.NewLine + " " + handled.StackTrace) : string.Empty);                      Log.Error(handled.Message + hstack);                      break;                    case PacketType.BacktestResult:                      var result = (BacktestResultPacket) packet;                        if (result.Progress == 1)                      {                          // uncomment these code traces to help write regression tests                          //Console.WriteLine("new Dictionary<string' string>");                          //Console.WriteLine("\t\t\t{");                          foreach (var pair in result.Results.Statistics)                          {                              Log.Trace("STATISTICS:: " + pair.Key + " " + pair.Value);                              //Console.WriteLine("\t\t\t\t{{\"{0}\"'\"{1}\"}}'"' pair.Key' pair.Value);                          }                          //Console.WriteLine("\t\t\t};");                            //foreach (var pair in statisticsResults.RollingPerformances)                          //{                          //    Log.Trace("ROLLINGSTATS:: " + pair.Key + " SharpeRatio: " + Math.Round(pair.Value.PortfolioStatistics.SharpeRatio' 3));                          //}                      }                      break;              }
