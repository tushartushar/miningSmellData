Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QuantConnect.Messaging,Messaging,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Messaging,Messaging,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\Messaging.cs,UpdateRegressionStatisticsInSourceFile,Cyclomatic complexity of the method is 10
Long Statement,QuantConnect.Messaging,Messaging,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The length of the statement  "                    var rstack = (!string.IsNullOrEmpty(runtime.StackTrace) ? (Environment.NewLine + " " + runtime.StackTrace) : string.Empty); " is 123.
Long Statement,QuantConnect.Messaging,Messaging,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The length of the statement  "                    var hstack = (!string.IsNullOrEmpty(handled.StackTrace) ? (Environment.NewLine + " " + handled.StackTrace) : string.Empty); " is 123.
Long Statement,QuantConnect.Messaging,Messaging,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The length of the statement  "                        var alphaStatistics = result.Results.AlphaRuntimeStatistics?.ToDictionary().ToList() ?? new List<KeyValuePair<string' string>>(); " is 129.
Long Statement,QuantConnect.Messaging,StreamingApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\StreamingApi.cs,Transmit,The length of the statement  "                    Log.Error("StreamingApi.Transmit(): API Access token not set. Check your config.json file 'api-access-token' property."); " is 121.
Magic Number,QuantConnect.Messaging,StreamingApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\StreamingApi.cs,Transmit,The following statement contains a magic number: tx.Length > 10000
Missing Default,QuantConnect.Messaging,EventMessagingHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\EventMessagingHandler.cs,ProcessPacket,The following switch statement is missing a default case: switch (packet.Type)              {                  case PacketType.Debug:                      var debug = (DebugPacket)packet;                      OnDebugEvent(debug);                      break;                    case PacketType.SystemDebug:                      var systemDebug = (SystemDebugPacket)packet;                      OnSystemDebugEvent(systemDebug);                      break;                    case PacketType.Log:                      var log = (LogPacket)packet;                      OnLogEvent(log);                      break;                    case PacketType.RuntimeError:                      var runtime = (RuntimeErrorPacket)packet;                      OnRuntimeErrorEvent(runtime);                      break;                    case PacketType.HandledError:                      var handled = (HandledErrorPacket)packet;                      OnHandledErrorEvent(handled);                      break;                    case PacketType.BacktestResult:                      var result = (BacktestResultPacket)packet;                      OnBacktestResultEvent(result);                      break;              }
Missing Default,QuantConnect.Messaging,Messaging,C:\research\architectureSmells\repos\QuantConnect_Lean\Messaging\Messaging.cs,Send,The following switch statement is missing a default case: switch (packet.Type)              {                  case PacketType.Debug:                      var debug = (DebugPacket) packet;                      Log.Trace("Debug: " + debug.Message);                      break;                    case PacketType.SystemDebug:                      var systemDebug = (SystemDebugPacket)packet;                      Log.Trace("Debug: " + systemDebug.Message);                      break;                    case PacketType.Log:                      var log = (LogPacket) packet;                      Log.Trace("Log: " + log.Message);                      break;                    case PacketType.RuntimeError:                      var runtime = (RuntimeErrorPacket) packet;                      var rstack = (!string.IsNullOrEmpty(runtime.StackTrace) ? (Environment.NewLine + " " + runtime.StackTrace) : string.Empty);                      Log.Error(runtime.Message + rstack);                      break;                    case PacketType.HandledError:                      var handled = (HandledErrorPacket) packet;                      var hstack = (!string.IsNullOrEmpty(handled.StackTrace) ? (Environment.NewLine + " " + handled.StackTrace) : string.Empty);                      Log.Error(handled.Message + hstack);                      break;                    case PacketType.AlphaResult:                      // spams the logs                      //var insights = ((AlphaResultPacket) packet).Insights;                      //foreach (var insight in insights)                      //{                      //    Log.Trace("Insight: " + insight);                      //}                      break;                    case PacketType.BacktestResult:                      var result = (BacktestResultPacket) packet;                        if (result.Progress == 1)                      {                          // inject alpha statistics into backtesting result statistics                          // this is primarily so we can easily regression test these values                          var alphaStatistics = result.Results.AlphaRuntimeStatistics?.ToDictionary().ToList() ?? new List<KeyValuePair<string' string>>();                          alphaStatistics.ForEach(kvp => result.Results.Statistics.Add(kvp));                            if (UpdateRegressionStatistics && _job.Language == Language.CSharp)                          {                              UpdateRegressionStatisticsInSourceFile(result);                          }                            var statisticsStr = $"{Environment.NewLine}" +                              $"{string.Join(Environment.NewLine'result.Results.Statistics.Select(x => $"STATISTICS:: {x.Key} {x.Value}"))}";                          Log.Trace(statisticsStr);                      }                      break;              }
