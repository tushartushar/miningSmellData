Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 5 parameters. Parameters: indicator' symbol' period' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 5 parameters. Parameters: indicator' symbol' period' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 5 parameters. Parameters: indicator' symbol' period' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 5 parameters. Parameters: indicator' symbol' span' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 5 parameters. Parameters: indicator' symbol' span' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 5 parameters. Parameters: indicator' symbol' span' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 6 parameters. Parameters: indicator' symbol' start' end' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 6 parameters. Parameters: indicator' symbol' start' end' resolution' selector
Long Parameter List,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,Indicator,The method has 6 parameters. Parameters: indicator' symbol' start' end' resolution' selector
Long Statement,QuantConnect.Jupyter,AlgorithmAnalysis,C:\repos\QuantConnect_Lean\Jupyter\AlgorithmAnalysis.cs,GetOrders,The length of the statement  "                    return _pandas.DataFrame(pyDict' columns: new[] { "Time"' "Symbol"' "Quantity"' "Price"' "Type"' "Status"' "Tag" }.ToList()); " is 125.
Long Statement,QuantConnect.Jupyter,FutureHistory,C:\repos\QuantConnect_Lean\Jupyter\FutureHistory.cs,GetExpiryDates,The length of the statement  "            var expiry = _data.SelectMany(x => x.FuturesChains.SelectMany(y => y.Value.Contracts.Keys.Select(z => z.ID.Date).Distinct())); " is 126.
Long Statement,QuantConnect.Jupyter,OptionHistory,C:\repos\QuantConnect_Lean\Jupyter\OptionHistory.cs,GetStrikes,The length of the statement  "            var strikes = _data.SelectMany(x => x.OptionChains.SelectMany(y => y.Value.Contracts.Keys.Select(z => (double)z.ID.StrikePrice).Distinct())); " is 141.
Long Statement,QuantConnect.Jupyter,OptionHistory,C:\repos\QuantConnect_Lean\Jupyter\OptionHistory.cs,GetExpiryDates,The length of the statement  "            var expiry = _data.SelectMany(x => x.OptionChains.SelectMany(y => y.Value.Contracts.Keys.Select(z => z.ID.Date).Distinct())); " is 125.
Long Statement,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetFundamental,The length of the statement  "                    var dir = new DirectoryInfo(Path.Combine(Globals.DataFolder' "equity"' symbol.ID.Market' "fundamental"' "fine"' symbol.Value.ToLower())); " is 137.
Long Statement,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetFundamental,The length of the statement  "                    var config = new SubscriptionDataConfig(typeof(FineFundamental)' symbol' Resolution.Daily' TimeZones.NewYork' TimeZones.NewYork' false' false' false); " is 150.
Long Statement,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetOptionHistory,The length of the statement  "            requests = requests.Union(new[] { new HistoryRequest(underlying.Subscriptions.FirstOrDefault()' underlying.Exchange.Hours' date.AddDays(-1)' date) }); " is 150.
Long Statement,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetOptionHistory,The length of the statement  "            return new OptionHistory(HistoryProvider.GetHistory(requests.OrderByDescending(x => x.Symbol.SecurityType)' TimeZone).Memoize()); " is 129.
Long Statement,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The length of the statement  "                var equity = new SortedDictionary<DateTime' decimal>(dictEquity.ToDictionary(kvp => kvp.Key' kvp => (decimal)kvp.Value)); " is 121.
Long Statement,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The length of the statement  "                var profitLoss = new SortedDictionary<DateTime' decimal>(dictPL.ToDictionary(kvp => kvp.Key' kvp => double.IsNaN(kvp.Value) ? 0 : (decimal)kvp.Value)); " is 151.
Magic Number,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetFundamental,The following statement contains a magic number: using (Py.GIL())              {                  // If tickers are not a PyList' we create one                  if (!PyList.IsListType(tickers))                  {                      var tmp = new PyList();                      tmp.Append(tickers);                      tickers = tmp;                  }                    var list = new List<Tuple<Symbol' DateTime' object>>();                    foreach (var ticker in tickers)                  {                      var symbol = QuantConnect.Symbol.Create(ticker.ToString()' SecurityType.Equity' Market.USA);                      var dir = new DirectoryInfo(Path.Combine(Globals.DataFolder' "equity"' symbol.ID.Market' "fundamental"' "fine"' symbol.Value.ToLower()));                      if (!dir.Exists) continue;                        var config = new SubscriptionDataConfig(typeof(FineFundamental)' symbol' Resolution.Daily' TimeZones.NewYork' TimeZones.NewYork' false' false' false);                        foreach (var fileName in dir.EnumerateFiles())                      {                          var date = DateTime.ParseExact(fileName.Name.Substring(0' 8)' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          if (date < start || date > end) continue;                            var factory = new TextSubscriptionDataSourceReader(_dataCacheProvider' config' date' false);                          var source = new SubscriptionDataSource(fileName.FullName' SubscriptionTransportMedium.LocalFile);                          var value = factory.Read(source).Select(x => GetPropertyValue(x' selector)).First();                            list.Add(Tuple.Create(symbol' date' value));                      }                  }                    var data = new PyDict();                  foreach (var item in list.GroupBy(x => x.Item1))                  {                      var index = item.Select(x => x.Item2);                      data.SetItem(item.Key' _pandas.Series(item.Select(x => x.Item3).ToList()' index));                  }                    return _pandas.DataFrame(data);              }
Magic Number,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The following statement contains a magic number: using (Py.GIL())              {                  var result = new PyDict();                    try                  {                      // Converts the data from pandas.DataFrame into dictionaries keyed by time                      var df = ((dynamic)dataFrame).dropna();                      dictBenchmark = GetDictionaryFromSeries((PyObject)df["benchmark"]);                      dictEquity = GetDictionaryFromSeries((PyObject)df["equity"]);                      dictPL = GetDictionaryFromSeries((PyObject)df["equity"].pct_change());                  }                  catch (PythonException e)                  {                      result.SetItem("Runtime Error"' e.Message.ToPython());                      return result;                  }                    // Convert the double into decimal                  var equity = new SortedDictionary<DateTime' decimal>(dictEquity.ToDictionary(kvp => kvp.Key' kvp => (decimal)kvp.Value));                  var profitLoss = new SortedDictionary<DateTime' decimal>(dictPL.ToDictionary(kvp => kvp.Key' kvp => double.IsNaN(kvp.Value) ? 0 : (decimal)kvp.Value));                    // Gets the last value of the day of the benchmark and equity                  var listBenchmark = CalculateDailyRateOfChange(dictBenchmark);                  var listPerformance = CalculateDailyRateOfChange(dictEquity);                    // Gets the startting capital                  var startingCapital = Convert.ToDecimal(dictEquity.FirstOrDefault().Value);                    // Compute portfolio statistics                  var stats = new PortfolioStatistics(profitLoss' equity' listPerformance' listBenchmark' startingCapital);                    result.SetItem("Average Win (%)"' Convert.ToDouble(stats.AverageWinRate * 100).ToPython());                  result.SetItem("Average Loss (%)"' Convert.ToDouble(stats.AverageLossRate * 100).ToPython());                  result.SetItem("Compounding Annual Return (%)"' Convert.ToDouble(stats.CompoundingAnnualReturn * 100m).ToPython());                  result.SetItem("Drawdown (%)"' Convert.ToDouble(stats.Drawdown * 100).ToPython());                  result.SetItem("Expectancy"' Convert.ToDouble(stats.Expectancy).ToPython());                  result.SetItem("Net Profit (%)"' Convert.ToDouble(stats.TotalNetProfit * 100).ToPython());                  result.SetItem("Sharpe Ratio"' Convert.ToDouble(stats.SharpeRatio).ToPython());                  result.SetItem("Win Rate (%)"' Convert.ToDouble(stats.WinRate * 100).ToPython());                  result.SetItem("Loss Rate (%)"' Convert.ToDouble(stats.LossRate * 100).ToPython());                  result.SetItem("Profit-Loss Ratio"' Convert.ToDouble(stats.ProfitLossRatio).ToPython());                  result.SetItem("Alpha"' Convert.ToDouble(stats.Alpha).ToPython());                  result.SetItem("Beta"' Convert.ToDouble(stats.Beta).ToPython());                  result.SetItem("Annual Standard Deviation"' Convert.ToDouble(stats.AnnualStandardDeviation).ToPython());                  result.SetItem("Annual Variance"' Convert.ToDouble(stats.AnnualVariance).ToPython());                  result.SetItem("Information Ratio"' Convert.ToDouble(stats.InformationRatio).ToPython());                  result.SetItem("Tracking Error"' Convert.ToDouble(stats.TrackingError).ToPython());                  result.SetItem("Treynor Ratio"' Convert.ToDouble(stats.TreynorRatio).ToPython());                    return result;              }
Magic Number,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The following statement contains a magic number: using (Py.GIL())              {                  var result = new PyDict();                    try                  {                      // Converts the data from pandas.DataFrame into dictionaries keyed by time                      var df = ((dynamic)dataFrame).dropna();                      dictBenchmark = GetDictionaryFromSeries((PyObject)df["benchmark"]);                      dictEquity = GetDictionaryFromSeries((PyObject)df["equity"]);                      dictPL = GetDictionaryFromSeries((PyObject)df["equity"].pct_change());                  }                  catch (PythonException e)                  {                      result.SetItem("Runtime Error"' e.Message.ToPython());                      return result;                  }                    // Convert the double into decimal                  var equity = new SortedDictionary<DateTime' decimal>(dictEquity.ToDictionary(kvp => kvp.Key' kvp => (decimal)kvp.Value));                  var profitLoss = new SortedDictionary<DateTime' decimal>(dictPL.ToDictionary(kvp => kvp.Key' kvp => double.IsNaN(kvp.Value) ? 0 : (decimal)kvp.Value));                    // Gets the last value of the day of the benchmark and equity                  var listBenchmark = CalculateDailyRateOfChange(dictBenchmark);                  var listPerformance = CalculateDailyRateOfChange(dictEquity);                    // Gets the startting capital                  var startingCapital = Convert.ToDecimal(dictEquity.FirstOrDefault().Value);                    // Compute portfolio statistics                  var stats = new PortfolioStatistics(profitLoss' equity' listPerformance' listBenchmark' startingCapital);                    result.SetItem("Average Win (%)"' Convert.ToDouble(stats.AverageWinRate * 100).ToPython());                  result.SetItem("Average Loss (%)"' Convert.ToDouble(stats.AverageLossRate * 100).ToPython());                  result.SetItem("Compounding Annual Return (%)"' Convert.ToDouble(stats.CompoundingAnnualReturn * 100m).ToPython());                  result.SetItem("Drawdown (%)"' Convert.ToDouble(stats.Drawdown * 100).ToPython());                  result.SetItem("Expectancy"' Convert.ToDouble(stats.Expectancy).ToPython());                  result.SetItem("Net Profit (%)"' Convert.ToDouble(stats.TotalNetProfit * 100).ToPython());                  result.SetItem("Sharpe Ratio"' Convert.ToDouble(stats.SharpeRatio).ToPython());                  result.SetItem("Win Rate (%)"' Convert.ToDouble(stats.WinRate * 100).ToPython());                  result.SetItem("Loss Rate (%)"' Convert.ToDouble(stats.LossRate * 100).ToPython());                  result.SetItem("Profit-Loss Ratio"' Convert.ToDouble(stats.ProfitLossRatio).ToPython());                  result.SetItem("Alpha"' Convert.ToDouble(stats.Alpha).ToPython());                  result.SetItem("Beta"' Convert.ToDouble(stats.Beta).ToPython());                  result.SetItem("Annual Standard Deviation"' Convert.ToDouble(stats.AnnualStandardDeviation).ToPython());                  result.SetItem("Annual Variance"' Convert.ToDouble(stats.AnnualVariance).ToPython());                  result.SetItem("Information Ratio"' Convert.ToDouble(stats.InformationRatio).ToPython());                  result.SetItem("Tracking Error"' Convert.ToDouble(stats.TrackingError).ToPython());                  result.SetItem("Treynor Ratio"' Convert.ToDouble(stats.TreynorRatio).ToPython());                    return result;              }
Magic Number,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The following statement contains a magic number: using (Py.GIL())              {                  var result = new PyDict();                    try                  {                      // Converts the data from pandas.DataFrame into dictionaries keyed by time                      var df = ((dynamic)dataFrame).dropna();                      dictBenchmark = GetDictionaryFromSeries((PyObject)df["benchmark"]);                      dictEquity = GetDictionaryFromSeries((PyObject)df["equity"]);                      dictPL = GetDictionaryFromSeries((PyObject)df["equity"].pct_change());                  }                  catch (PythonException e)                  {                      result.SetItem("Runtime Error"' e.Message.ToPython());                      return result;                  }                    // Convert the double into decimal                  var equity = new SortedDictionary<DateTime' decimal>(dictEquity.ToDictionary(kvp => kvp.Key' kvp => (decimal)kvp.Value));                  var profitLoss = new SortedDictionary<DateTime' decimal>(dictPL.ToDictionary(kvp => kvp.Key' kvp => double.IsNaN(kvp.Value) ? 0 : (decimal)kvp.Value));                    // Gets the last value of the day of the benchmark and equity                  var listBenchmark = CalculateDailyRateOfChange(dictBenchmark);                  var listPerformance = CalculateDailyRateOfChange(dictEquity);                    // Gets the startting capital                  var startingCapital = Convert.ToDecimal(dictEquity.FirstOrDefault().Value);                    // Compute portfolio statistics                  var stats = new PortfolioStatistics(profitLoss' equity' listPerformance' listBenchmark' startingCapital);                    result.SetItem("Average Win (%)"' Convert.ToDouble(stats.AverageWinRate * 100).ToPython());                  result.SetItem("Average Loss (%)"' Convert.ToDouble(stats.AverageLossRate * 100).ToPython());                  result.SetItem("Compounding Annual Return (%)"' Convert.ToDouble(stats.CompoundingAnnualReturn * 100m).ToPython());                  result.SetItem("Drawdown (%)"' Convert.ToDouble(stats.Drawdown * 100).ToPython());                  result.SetItem("Expectancy"' Convert.ToDouble(stats.Expectancy).ToPython());                  result.SetItem("Net Profit (%)"' Convert.ToDouble(stats.TotalNetProfit * 100).ToPython());                  result.SetItem("Sharpe Ratio"' Convert.ToDouble(stats.SharpeRatio).ToPython());                  result.SetItem("Win Rate (%)"' Convert.ToDouble(stats.WinRate * 100).ToPython());                  result.SetItem("Loss Rate (%)"' Convert.ToDouble(stats.LossRate * 100).ToPython());                  result.SetItem("Profit-Loss Ratio"' Convert.ToDouble(stats.ProfitLossRatio).ToPython());                  result.SetItem("Alpha"' Convert.ToDouble(stats.Alpha).ToPython());                  result.SetItem("Beta"' Convert.ToDouble(stats.Beta).ToPython());                  result.SetItem("Annual Standard Deviation"' Convert.ToDouble(stats.AnnualStandardDeviation).ToPython());                  result.SetItem("Annual Variance"' Convert.ToDouble(stats.AnnualVariance).ToPython());                  result.SetItem("Information Ratio"' Convert.ToDouble(stats.InformationRatio).ToPython());                  result.SetItem("Tracking Error"' Convert.ToDouble(stats.TrackingError).ToPython());                  result.SetItem("Treynor Ratio"' Convert.ToDouble(stats.TreynorRatio).ToPython());                    return result;              }
Magic Number,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The following statement contains a magic number: using (Py.GIL())              {                  var result = new PyDict();                    try                  {                      // Converts the data from pandas.DataFrame into dictionaries keyed by time                      var df = ((dynamic)dataFrame).dropna();                      dictBenchmark = GetDictionaryFromSeries((PyObject)df["benchmark"]);                      dictEquity = GetDictionaryFromSeries((PyObject)df["equity"]);                      dictPL = GetDictionaryFromSeries((PyObject)df["equity"].pct_change());                  }                  catch (PythonException e)                  {                      result.SetItem("Runtime Error"' e.Message.ToPython());                      return result;                  }                    // Convert the double into decimal                  var equity = new SortedDictionary<DateTime' decimal>(dictEquity.ToDictionary(kvp => kvp.Key' kvp => (decimal)kvp.Value));                  var profitLoss = new SortedDictionary<DateTime' decimal>(dictPL.ToDictionary(kvp => kvp.Key' kvp => double.IsNaN(kvp.Value) ? 0 : (decimal)kvp.Value));                    // Gets the last value of the day of the benchmark and equity                  var listBenchmark = CalculateDailyRateOfChange(dictBenchmark);                  var listPerformance = CalculateDailyRateOfChange(dictEquity);                    // Gets the startting capital                  var startingCapital = Convert.ToDecimal(dictEquity.FirstOrDefault().Value);                    // Compute portfolio statistics                  var stats = new PortfolioStatistics(profitLoss' equity' listPerformance' listBenchmark' startingCapital);                    result.SetItem("Average Win (%)"' Convert.ToDouble(stats.AverageWinRate * 100).ToPython());                  result.SetItem("Average Loss (%)"' Convert.ToDouble(stats.AverageLossRate * 100).ToPython());                  result.SetItem("Compounding Annual Return (%)"' Convert.ToDouble(stats.CompoundingAnnualReturn * 100m).ToPython());                  result.SetItem("Drawdown (%)"' Convert.ToDouble(stats.Drawdown * 100).ToPython());                  result.SetItem("Expectancy"' Convert.ToDouble(stats.Expectancy).ToPython());                  result.SetItem("Net Profit (%)"' Convert.ToDouble(stats.TotalNetProfit * 100).ToPython());                  result.SetItem("Sharpe Ratio"' Convert.ToDouble(stats.SharpeRatio).ToPython());                  result.SetItem("Win Rate (%)"' Convert.ToDouble(stats.WinRate * 100).ToPython());                  result.SetItem("Loss Rate (%)"' Convert.ToDouble(stats.LossRate * 100).ToPython());                  result.SetItem("Profit-Loss Ratio"' Convert.ToDouble(stats.ProfitLossRatio).ToPython());                  result.SetItem("Alpha"' Convert.ToDouble(stats.Alpha).ToPython());                  result.SetItem("Beta"' Convert.ToDouble(stats.Beta).ToPython());                  result.SetItem("Annual Standard Deviation"' Convert.ToDouble(stats.AnnualStandardDeviation).ToPython());                  result.SetItem("Annual Variance"' Convert.ToDouble(stats.AnnualVariance).ToPython());                  result.SetItem("Information Ratio"' Convert.ToDouble(stats.InformationRatio).ToPython());                  result.SetItem("Tracking Error"' Convert.ToDouble(stats.TrackingError).ToPython());                  result.SetItem("Treynor Ratio"' Convert.ToDouble(stats.TreynorRatio).ToPython());                    return result;              }
Magic Number,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The following statement contains a magic number: using (Py.GIL())              {                  var result = new PyDict();                    try                  {                      // Converts the data from pandas.DataFrame into dictionaries keyed by time                      var df = ((dynamic)dataFrame).dropna();                      dictBenchmark = GetDictionaryFromSeries((PyObject)df["benchmark"]);                      dictEquity = GetDictionaryFromSeries((PyObject)df["equity"]);                      dictPL = GetDictionaryFromSeries((PyObject)df["equity"].pct_change());                  }                  catch (PythonException e)                  {                      result.SetItem("Runtime Error"' e.Message.ToPython());                      return result;                  }                    // Convert the double into decimal                  var equity = new SortedDictionary<DateTime' decimal>(dictEquity.ToDictionary(kvp => kvp.Key' kvp => (decimal)kvp.Value));                  var profitLoss = new SortedDictionary<DateTime' decimal>(dictPL.ToDictionary(kvp => kvp.Key' kvp => double.IsNaN(kvp.Value) ? 0 : (decimal)kvp.Value));                    // Gets the last value of the day of the benchmark and equity                  var listBenchmark = CalculateDailyRateOfChange(dictBenchmark);                  var listPerformance = CalculateDailyRateOfChange(dictEquity);                    // Gets the startting capital                  var startingCapital = Convert.ToDecimal(dictEquity.FirstOrDefault().Value);                    // Compute portfolio statistics                  var stats = new PortfolioStatistics(profitLoss' equity' listPerformance' listBenchmark' startingCapital);                    result.SetItem("Average Win (%)"' Convert.ToDouble(stats.AverageWinRate * 100).ToPython());                  result.SetItem("Average Loss (%)"' Convert.ToDouble(stats.AverageLossRate * 100).ToPython());                  result.SetItem("Compounding Annual Return (%)"' Convert.ToDouble(stats.CompoundingAnnualReturn * 100m).ToPython());                  result.SetItem("Drawdown (%)"' Convert.ToDouble(stats.Drawdown * 100).ToPython());                  result.SetItem("Expectancy"' Convert.ToDouble(stats.Expectancy).ToPython());                  result.SetItem("Net Profit (%)"' Convert.ToDouble(stats.TotalNetProfit * 100).ToPython());                  result.SetItem("Sharpe Ratio"' Convert.ToDouble(stats.SharpeRatio).ToPython());                  result.SetItem("Win Rate (%)"' Convert.ToDouble(stats.WinRate * 100).ToPython());                  result.SetItem("Loss Rate (%)"' Convert.ToDouble(stats.LossRate * 100).ToPython());                  result.SetItem("Profit-Loss Ratio"' Convert.ToDouble(stats.ProfitLossRatio).ToPython());                  result.SetItem("Alpha"' Convert.ToDouble(stats.Alpha).ToPython());                  result.SetItem("Beta"' Convert.ToDouble(stats.Beta).ToPython());                  result.SetItem("Annual Standard Deviation"' Convert.ToDouble(stats.AnnualStandardDeviation).ToPython());                  result.SetItem("Annual Variance"' Convert.ToDouble(stats.AnnualVariance).ToPython());                  result.SetItem("Information Ratio"' Convert.ToDouble(stats.InformationRatio).ToPython());                  result.SetItem("Tracking Error"' Convert.ToDouble(stats.TrackingError).ToPython());                  result.SetItem("Treynor Ratio"' Convert.ToDouble(stats.TreynorRatio).ToPython());                    return result;              }
Magic Number,QuantConnect.Jupyter,QuantBook,C:\repos\QuantConnect_Lean\Jupyter\QuantBook.cs,GetPortfolioStatistics,The following statement contains a magic number: using (Py.GIL())              {                  var result = new PyDict();                    try                  {                      // Converts the data from pandas.DataFrame into dictionaries keyed by time                      var df = ((dynamic)dataFrame).dropna();                      dictBenchmark = GetDictionaryFromSeries((PyObject)df["benchmark"]);                      dictEquity = GetDictionaryFromSeries((PyObject)df["equity"]);                      dictPL = GetDictionaryFromSeries((PyObject)df["equity"].pct_change());                  }                  catch (PythonException e)                  {                      result.SetItem("Runtime Error"' e.Message.ToPython());                      return result;                  }                    // Convert the double into decimal                  var equity = new SortedDictionary<DateTime' decimal>(dictEquity.ToDictionary(kvp => kvp.Key' kvp => (decimal)kvp.Value));                  var profitLoss = new SortedDictionary<DateTime' decimal>(dictPL.ToDictionary(kvp => kvp.Key' kvp => double.IsNaN(kvp.Value) ? 0 : (decimal)kvp.Value));                    // Gets the last value of the day of the benchmark and equity                  var listBenchmark = CalculateDailyRateOfChange(dictBenchmark);                  var listPerformance = CalculateDailyRateOfChange(dictEquity);                    // Gets the startting capital                  var startingCapital = Convert.ToDecimal(dictEquity.FirstOrDefault().Value);                    // Compute portfolio statistics                  var stats = new PortfolioStatistics(profitLoss' equity' listPerformance' listBenchmark' startingCapital);                    result.SetItem("Average Win (%)"' Convert.ToDouble(stats.AverageWinRate * 100).ToPython());                  result.SetItem("Average Loss (%)"' Convert.ToDouble(stats.AverageLossRate * 100).ToPython());                  result.SetItem("Compounding Annual Return (%)"' Convert.ToDouble(stats.CompoundingAnnualReturn * 100m).ToPython());                  result.SetItem("Drawdown (%)"' Convert.ToDouble(stats.Drawdown * 100).ToPython());                  result.SetItem("Expectancy"' Convert.ToDouble(stats.Expectancy).ToPython());                  result.SetItem("Net Profit (%)"' Convert.ToDouble(stats.TotalNetProfit * 100).ToPython());                  result.SetItem("Sharpe Ratio"' Convert.ToDouble(stats.SharpeRatio).ToPython());                  result.SetItem("Win Rate (%)"' Convert.ToDouble(stats.WinRate * 100).ToPython());                  result.SetItem("Loss Rate (%)"' Convert.ToDouble(stats.LossRate * 100).ToPython());                  result.SetItem("Profit-Loss Ratio"' Convert.ToDouble(stats.ProfitLossRatio).ToPython());                  result.SetItem("Alpha"' Convert.ToDouble(stats.Alpha).ToPython());                  result.SetItem("Beta"' Convert.ToDouble(stats.Beta).ToPython());                  result.SetItem("Annual Standard Deviation"' Convert.ToDouble(stats.AnnualStandardDeviation).ToPython());                  result.SetItem("Annual Variance"' Convert.ToDouble(stats.AnnualVariance).ToPython());                  result.SetItem("Information Ratio"' Convert.ToDouble(stats.InformationRatio).ToPython());                  result.SetItem("Tracking Error"' Convert.ToDouble(stats.TrackingError).ToPython());                  result.SetItem("Treynor Ratio"' Convert.ToDouble(stats.TreynorRatio).ToPython());                    return result;              }
