Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The method has 106 lines of code.
Complex Method,QuantConnect.Indicators,ParabolicStopAndReverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\ParabolicStopAndReverse.cs,HandleLongPosition,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Indicators,ParabolicStopAndReverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\ParabolicStopAndReverse.cs,HandleShortPosition,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Indicators,MovingAverageTypeExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MovingAverageTypeExtensions.cs,AsIndicator,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Indicators,MovingAverageTypeExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MovingAverageTypeExtensions.cs,AsIndicator,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,Cyclomatic complexity of the method is 10
Long Parameter List,QuantConnect.Indicators,IchimokuKinkoHyo,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IchimokuKinkoHyo.cs,IchimokuKinkoHyo,The method has 6 parameters. Parameters: tenkanPeriod' kijunPeriod' senkouAPeriod' senkouBPeriod' senkouADelayPeriod' senkouBDelayPeriod
Long Parameter List,QuantConnect.Indicators,IchimokuKinkoHyo,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IchimokuKinkoHyo.cs,IchimokuKinkoHyo,The method has 7 parameters. Parameters: name' tenkanPeriod' kijunPeriod' senkouAPeriod' senkouBPeriod' senkouADelayPeriod' senkouBDelayPeriod
Long Parameter List,QuantConnect.Indicators,MovingAverageConvergenceDivergence,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MovingAverageConvergenceDivergence.cs,MovingAverageConvergenceDivergence,The method has 5 parameters. Parameters: name' fastPeriod' slowPeriod' signalPeriod' type
Long Identifier,QuantConnect.Indicators,AverageDirectionalIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalIndex.cs,,The length of the parameter _smoothedDirectionalMovementPlus is 32.
Long Identifier,QuantConnect.Indicators,AverageDirectionalIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalIndex.cs,,The length of the parameter _smoothedDirectionalMovementMinus is 33.
Long Statement,QuantConnect.Indicators,AccumulationDistribution,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AccumulationDistribution.cs,ComputeNextValue,The length of the statement  "            return Current.Value + (range > 0 ? ((input.Close - input.Low) - (input.High - input.Close)) / range * input.Volume : 0m); " is 122.
Long Statement,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,ComputeNextValue,The length of the statement  "            var signal = _a0 * _c0 * (_b0 * _price[0] + _b1 * _price[1] + _b2 * _price[2]) + _a0 * (_a1 * _filt[0] + _a2 * _filt[1]); " is 121.
Long Statement,QuantConnect.Indicators,IndicatorBase<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IndicatorBase.cs,Update,The length of the statement  "                Log.Error($"This is a forward only indicator: {Name} Input: {input.Time:u} Previous: {_previousInput.Time:u}. It will not be updated with this input."); " is 152.
Long Statement,QuantConnect.Indicators,IndicatorBase<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IndicatorBase.cs,Update,The length of the statement  "                    throw new ArgumentException($"IndicatorBase.Update() 'input' expected to be of type {typeof(T)} but is of type {input.GetType()}"); " is 131.
Long Statement,QuantConnect.Indicators,IndicatorBase<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IndicatorBase.cs,Update,The length of the statement  "            throw new NotSupportedException($"{GetType().Name} does not support Update(DateTime' decimal) method overload. Use Update({typeof(T).Name}) instead."); " is 151.
Long Statement,QuantConnect.Indicators,IndicatorExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IndicatorExtensions.cs,Over,The length of the statement  "            return new CompositeIndicator<T>(left' right' (l' r) => r == 0m ? new IndicatorResult(0m' IndicatorStatus.MathError) : new IndicatorResult(l / r)); " is 147.
Long Statement,QuantConnect.Indicators,IndicatorExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IndicatorExtensions.cs,Over,The length of the statement  "            return new CompositeIndicator<T>(name' left' right' (l' r) => r == 0m ? new IndicatorResult(0m' IndicatorStatus.MathError) : new IndicatorResult(l / r)); " is 153.
Long Statement,QuantConnect.Indicators,IndicatorExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IndicatorExtensions.cs,EMA,The length of the statement  "            decimal k = smoothingFactor.HasValue ? k = smoothingFactor.Value : ExponentialMovingAverage.SmoothingFactorDefault(period); " is 123.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The length of the statement  "                    Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The length of the statement  "                    Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) && " is 122.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The length of the statement  "                input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The length of the statement  "                Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low && " is 122.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The length of the statement  "                Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low && " is 122.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The length of the statement  "                Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low && " is 122.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) && " is 122.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,KickingByLength,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\KickingByLength.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,KickingByLength,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\KickingByLength.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,Kicking,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Kicking.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,Kicking,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Kicking.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,HangingMan,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HangingMan.cs,ComputeNextValue,The length of the statement  "                Math.Min(input.Close' input.Open) >= window[1].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) " is 123.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,Hammer,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hammer.cs,ComputeNextValue,The length of the statement  "                Math.Min(input.Close' input.Open) <= window[1].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) " is 122.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The length of the statement  "                        GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) && " is 123.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The length of the statement  "                ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) || " is 130.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The length of the statement  "                  (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open) " is 126.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The length of the statement  "                window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) && " is 137.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The length of the statement  "                window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) && " is 137.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The length of the statement  "                window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) && " is 137.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The length of the statement  "                window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) && " is 137.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The length of the statement  "                GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The length of the statement  "                GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) && " is 125.
Long Statement,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The length of the statement  "                GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) && " is 123.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  // 3rd: engulfing prior rb                  input.Open > window[1].Open && input.Close < window[1].Close &&                  //      closing above 1st                  input.Close > window[2].Close"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      harami                  window[1].Close > window[2].Close && window[1].Open <= window[2].Open &&                  //      lower low                  window[1].Low < window[2].Low &&                  // 3rd: short                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white                  GetCandleColor(input) == CandleColor.White &&                  //      open not lower                  input.Open > window[1].Low"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Thrusting,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Thrusting.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[1]) == CandleColor.Black &&                  //      long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: white                  GetCandleColor(input) == CandleColor.White &&                  //      open below prior low                  input.Open < window[1].Low &&                  //      close into prior body                  input.Close > window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  //      under the midpoint                  input.Close <= window[1].Close + GetRealBody(window[1]) * 0.5m"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The conditional expression  "(                      // upside gap                          GetRealBodyGapUp(window[1]' window[2]) &&                      // 1st: white                      GetCandleColor(window[1]) == CandleColor.White &&                      // 2nd: black                      GetCandleColor(input) == CandleColor.Black &&                      //      that opens within the white rb                      input.Open < window[1].Close && input.Open > window[1].Open &&                      //      and closes under the white rb                      input.Close < window[1].Open &&                      //      inside the gap                      input.Close > Math.Max(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  ) ||                  (                      // downside gap                      GetRealBodyGapDown(window[1]' window[2]) &&                      // 1st: black                      GetCandleColor(window[1]) == CandleColor.Black &&                      // 2nd: white                      GetCandleColor(input) == CandleColor.White &&                      //      that opens within the black rb                      input.Open < window[1].Open && input.Open > window[1].Close &&                      //      and closes above the black rb                      input.Close > window[1].Open &&                      //      inside the gap                      input.Close < Math.Min(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.Black &&                  // second white                  GetCandleColor(window[1]) == CandleColor.White &&                  // third black                  GetCandleColor(input) == CandleColor.Black &&                  // 2nd low > prior close                  window[1].Low > window[2].Close &&                  // 1st and 3rd same close                  input.Close <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2]) &&                  input.Close >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ShootingStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ShootingStar.cs,ComputeNextValue,The conditional expression  "GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // long upper shadow                  GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input) &&                  // gap up                  GetRealBodyGapUp(input' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,SeparatingLines,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\SeparatingLines.cs,ComputeNextValue,The conditional expression  "(int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // same open                  input.Open <= window[1].Open + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Open >= window[1].Open - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  // belt hold: long body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' input) &&                  (                    // with no lower shadow if bullish                    (GetCandleColor(input) == CandleColor.White &&                      GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input)                    )                    ||                    // with no upper shadow if bearish                    (GetCandleColor(input) == CandleColor.Black &&                      GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input)                    )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,RickshawMan,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RickshawMan.cs,ComputeNextValue,The conditional expression  "GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' input) &&                  // long shadow                  GetLowerShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // long shadow                  GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // body near midpoint                  (                      Math.Min(input.Open' input.Close)                          <= input.Low + GetHighLowRange(input) / 2 + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' input)                      &&                      Math.Max(input.Open' input.Close)                          >= input.Low + GetHighLowRange(input) / 2 - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' input)                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Piercing,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Piercing.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[1]) == CandleColor.Black &&                  //      long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // 2nd: white                  GetCandleColor(input) == CandleColor.White &&                  //      long                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[0]' input) &&                  //      open below prior low                  input.Open < window[1].Low &&                  //      close within prior body                  input.Close < window[1].Open &&                  //      above midpoint                  input.Close > window[1].Close + GetRealBody(window[1]) * 0.5m"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,OnNeck,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\OnNeck.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[1]) == CandleColor.Black &&                  //      long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: white                  GetCandleColor(input) == CandleColor.White &&                  //      open below prior low                  input.Open < window[1].Low &&                  //      close equal to prior low                  input.Close <= window[1].Low + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Close >= window[1].Low - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,MatchingLow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatchingLow.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[1]) == CandleColor.Black &&                  // second black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st and 2nd same close                  input.Close <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Close >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,KickingByLength,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\KickingByLength.cs,ComputeNextValue,The conditional expression  "(int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 1st marubozu                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 2nd marubozu                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // gap                  (                    (GetCandleColor(window[1]) == CandleColor.Black && GetCandleGapUp(input' window[1]))                    ||                    (GetCandleColor(window[1]) == CandleColor.White && GetCandleGapDown(input' window[1]))                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Kicking,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Kicking.cs,ComputeNextValue,The conditional expression  "(int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 1st marubozu                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 2nd marubozu                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // gap                  (                    (GetCandleColor(window[1]) == CandleColor.Black && GetCandleGapUp(input' window[1]))                    ||                    (GetCandleColor(window[1]) == CandleColor.White && GetCandleGapDown(input' window[1]))                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,InvertedHammer,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\InvertedHammer.cs,ComputeNextValue,The conditional expression  "GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // long upper shadow                  GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input) &&                  // gap down                  GetRealBodyGapDown(input' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,InNeck,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\InNeck.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[1]) == CandleColor.Black &&                  //      long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: white                  GetCandleColor(input) == CandleColor.White &&                  //      open below prior low                  input.Open < window[1].Low &&                  //      close slightly into prior body                  input.Close <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Close >= window[1].Close"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,HomingPigeon,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HomingPigeon.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[1]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd short                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // 2nd engulfed by 1st                  input.Open < window[1].Open &&                  input.Close > window[1].Close"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,HaramiCross,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HaramiCross.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: doji                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' input) &&                  //      engulfed by 1st                  Math.Max(input.Close' input.Open) < Math.Max(window[1].Close' window[1].Open) &&                  Math.Min(input.Close' input.Open) > Math.Min(window[1].Close' window[1].Open)"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Harami,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Harami.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: short                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      engulfed by 1st                  Math.Max(input.Close' input.Open) < Math.Max(window[1].Close' window[1].Open) &&                  Math.Min(input.Close' input.Open) > Math.Min(window[1].Close' window[1].Open)"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,HangingMan,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HangingMan.cs,ComputeNextValue,The conditional expression  "GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // long lower shadow                  GetLowerShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input) &&                  // rb near the prior candle's highs                  Math.Min(input.Close' input.Open) >= window[1].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Hammer,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hammer.cs,ComputeNextValue,The conditional expression  "GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // long lower shadow                  GetLowerShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input) &&                  // rb near the prior candle's lows                  Math.Min(input.Close' input.Open) <= window[1].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,DojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\DojiStar.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: doji                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' input) &&                  //      that gaps up if 1st is white                  ((GetCandleColor(window[1]) == CandleColor.White && GetRealBodyGapUp(input' window[1]))                      ||                      //      or down if 1st is black                      (GetCandleColor(window[1]) == CandleColor.Black && GetRealBodyGapDown(input' window[1]))                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,DarkCloudCover,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\DarkCloudCover.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[1]) == CandleColor.White &&                  //      long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      open above prior high                  input.Open > window[1].High &&                  //      close within prior body                  input.Close > window[1].Open &&                  input.Close < window[1].Close - GetRealBody(window[1]) * _penetration"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ClosingMarubozu,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ClosingMarubozu.cs,ComputeNextValue,The conditional expression  "GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' input) &&                               (                    (                       // white body and very short upper shadow                      GetCandleColor(input) == CandleColor.White &&                      GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input)                    ) ||                    (                       // black body and very short lower shadow                      GetCandleColor(input) == CandleColor.Black &&                      GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input)                    )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,BeltHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\BeltHold.cs,ComputeNextValue,The conditional expression  "GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' input) &&                               (                    (                       // white body and very short lower shadow                      GetCandleColor(input) == CandleColor.White &&                      GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input)                    ) ||                    (                       // black body and very short upper shadow                      GetCandleColor(input) == CandleColor.Black &&                      GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' input)                    )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The conditional expression  "window[2].High < window[3].High && window[2].Low > window[3].Low &&                          // 3rd: lower high and higher low than 2nd                          window[1].High < window[2].High && window[1].Low > window[2].Low &&                          // (bull) 4th: lower high and lower low                          ((input.High < window[1].High && input.Low < window[1].Low &&                            // (bull) 2nd: close near the low                            window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                              )                           ||                           // (bear) 4th: higher high and higher low                           (input.High > window[1].High && input.Low > window[1].Low &&                            // (bull) 2nd: close near the top                            window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                               )                              )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The conditional expression  "Samples <= _patternIndex + 4 &&                              // close higher than the high of 3rd                              ((_patternResult > 0 && input.Close > window[(int) Samples - _patternIndex].High)                               ||                               // close lower than the low of 3rd                               (_patternResult < 0 && input.Close < window[(int) Samples - _patternIndex].Low))"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The conditional expression  "window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The conditional expression  "Samples <= _patternIndex + 4 &&                      // close higher than the high of 3rd                      ((_patternResult > 0 && input.Close > window[(int)Samples - _patternIndex].High)                       ||                       // close lower than the low of 3rd                       (_patternResult < 0 && input.Close < window[(int)Samples - _patternIndex].Low))"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,GapSideBySideWhite,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\GapSideBySideWhite.cs,ComputeNextValue,The conditional expression  "( // upside or downside gap between the 1st candle and both the next 2 candles                    (GetRealBodyGapUp(window[1]' window[2]) && GetRealBodyGapUp(input' window[2]))                    ||                    (GetRealBodyGapDown(window[1]' window[2]) && GetRealBodyGapDown(input' window[2]))                  ) &&                  // 2nd: white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd: white                  GetCandleColor(input) == CandleColor.White &&                  // same size 2 and 3                  GetRealBody(input) >= GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  GetRealBody(input) <= GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  // same open 2 and 3                  input.Open >= window[1].Open - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Open <= window[1].Open + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The conditional expression  "GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Engulfing,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Engulfing.cs,ComputeNextValue,The conditional expression  "(GetCandleColor(input) == CandleColor.White && GetCandleColor(window[1]) == CandleColor.Black &&                    input.Close > window[1].Open && input.Open < window[1].Close                  )                  ||                  // black engulfs white                  (GetCandleColor(input) == CandleColor.Black && GetCandleColor(window[1]) == CandleColor.White &&                    input.Open > window[1].Close && input.Close < window[1].Open                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The conditional expression  "window[1].High < window[2].High && window[1].Low > window[2].Low &&                          // (bull) 3rd: lower high and lower low                          ((input.High < window[1].High && input.Low < window[1].Low)                            ||                            // (bear) 3rd: higher high and higher low                            (input.High > window[1].High && input.Low > window[1].Low)                          )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The conditional expression  "Samples <= _patternIndex + 4 &&                              // close higher than the high of 2nd                              ((_patternResult > 0 && input.Close > window[(int)Samples - _patternIndex].High)                                ||                                // close lower than the low of 2nd                                (_patternResult < 0 && input.Close < window[(int)Samples - _patternIndex].Low)                              )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The conditional expression  "window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 3rd: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low)                   ||                   // (bear) 3rd: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low)                      )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The conditional expression  "Samples <= _patternIndex + 4 &&                      // close higher than the high of 2nd                      ((_patternResult > 0 && input.Close > window[(int) Samples - _patternIndex].High)                       ||                       // close lower than the low of 2nd                       (_patternResult < 0 && input.Close < window[(int) Samples - _patternIndex].Low)                          )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ThreeOutside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeOutside.cs,ComputeNextValue,The conditional expression  "(                    // white engulfs black                    GetCandleColor(window[1]) == CandleColor.White && GetCandleColor(window[2]) == CandleColor.Black &&                    window[1].Close > window[2].Open && window[1].Open < window[2].Close &&                    // third candle higher                    input.Close > window[1].Close                  )                  ||                  (                    // black engulfs white                    GetCandleColor(window[1]) == CandleColor.Black && GetCandleColor(window[2]) == CandleColor.White &&                    window[1].Open > window[2].Close && window[1].Close < window[2].Open &&                    // third candle lower                    input.Close < window[1].Close                  )"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,Counterattack,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Counterattack.cs,ComputeNextValue,The conditional expression  "(int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 1st long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // 2nd long                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[0]' input) &&                  // equal closes                  input.Close <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Close >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)"  is complex.
Complex Conditional,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The conditional expression  "GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      opening within 2nd rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  //      closing within 1st rb                  input.Close > window[2].Open && input.Close < window[2].Close"  is complex.
Magic Number,QuantConnect.Indicators,ArnaudLegouxMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\ArnaudLegouxMovingAverage.cs,ArnaudLegouxMovingAverage,The following statement contains a magic number: var tmpVector = Enumerable.Range(0' period)                  .Select(i => Math.Exp((double) (-(i - m) * (i - m) / (2 * s * s))))                  .ToArray();
Magic Number,QuantConnect.Indicators,AverageDirectionalIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalIndex.cs,AverageDirectionalIndex,The following statement contains a magic number: PositiveDirectionalIndex = new FunctionalIndicator<IndicatorDataPoint>(name + "_PositiveDirectionalIndex"'                  input =>                  {                      // Computes the Plus Directional Indicator(+DI period).                      if (_smoothedTrueRange != 0 && _smoothedDirectionalMovementPlus.IsReady)                      {                          return 100m * _smoothedDirectionalMovementPlus / _smoothedTrueRange;                      }                      return 0m;                  }'                  positiveDirectionalIndex => _smoothedDirectionalMovementPlus.IsReady'                  () =>                  {                      _directionalMovementPlus.Reset();                      _trueRange.Reset();                  }                  );
Magic Number,QuantConnect.Indicators,AverageDirectionalIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalIndex.cs,AverageDirectionalIndex,The following statement contains a magic number: NegativeDirectionalIndex = new FunctionalIndicator<IndicatorDataPoint>(name + "_NegativeDirectionalIndex"'                  input =>                  {                      // Computes the Minus Directional Indicator(-DI period).                      if (_smoothedTrueRange != 0 && _smoothedDirectionalMovementMinus.IsReady)                      {                          return 100m * _smoothedDirectionalMovementMinus / _smoothedTrueRange;                      }                      return 0m;                  }'                  negativeDirectionalIndex => _smoothedDirectionalMovementMinus.IsReady'                  () =>                  {                      _directionalMovementMinus.Reset();                      _trueRange.Reset();                  }                  );
Magic Number,QuantConnect.Indicators,AverageDirectionalIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalIndex.cs,ComputeNextValue,The following statement contains a magic number: return 50m;
Magic Number,QuantConnect.Indicators,AverageDirectionalIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalIndex.cs,ComputeNextValue,The following statement contains a magic number: _averageDirectionalIndex.Update(input.EndTime' 100m * diff / sum);
Magic Number,QuantConnect.Indicators,AverageDirectionalMovementIndexRating,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalMovementIndexRating.cs,ComputeNextValue,The following statement contains a magic number: return IsReady ? (_adx + _adxHistory[_period - 1]) / 2 : 50m;
Magic Number,QuantConnect.Indicators,AverageDirectionalMovementIndexRating,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AverageDirectionalMovementIndexRating.cs,ComputeNextValue,The following statement contains a magic number: return IsReady ? (_adx + _adxHistory[_period - 1]) / 2 : 50m;
Magic Number,QuantConnect.Indicators,ChandeMomentumOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\ChandeMomentumOscillator.cs,ComputeNextValue,The following statement contains a magic number: return sum != 0 ? 100m * ((_prevGain - _prevLoss) / sum) : 0m;
Magic Number,QuantConnect.Indicators,DetrendedPriceOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\DetrendedPriceOscillator.cs,DetrendedPriceOscillator,The following statement contains a magic number: var lagPeriod = period / 2 + 1;
Magic Number,QuantConnect.Indicators,DonchianChannel,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\DonchianChannel.cs,ComputeNextValue,The following statement contains a magic number: return (UpperBand + LowerBand) / 2;
Magic Number,QuantConnect.Indicators,IntradayVwap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IntradayVwap.cs,TryGetVolumeAndAveragePrice,The following statement contains a magic number: averagePrice = (tradeBar.High + tradeBar.Low + tradeBar.Close) / 3m;
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,FractalAdaptiveMovingAverage,The following statement contains a magic number: n % 2 > 0
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,FractalAdaptiveMovingAverage,The following statement contains a magic number: _w = Math.Log(2d / (1 + longPeriod));
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: var price = (input.High + input.Low) / 2;
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: var hh = _high.Take(_n / 2).Max();
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: var ll = _low.Take(_n / 2).Min();
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: var n1 = (hh - ll) / (_n / 2);
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: hh = _high.Skip(_n / 2).Take(_n / 2).Max();
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: hh = _high.Skip(_n / 2).Take(_n / 2).Max();
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: ll = _low.Skip(_n / 2).Take(_n / 2).Min();
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: ll = _low.Skip(_n / 2).Take(_n / 2).Min();
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: var n2 = (hh - ll) / (_n / 2);
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: dimen = Math.Log((n1 + n2) / n3) / Math.Log(2);
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: alpha = .01m;
Magic Number,QuantConnect.Indicators,FractalAdaptiveMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FractalAdaptiveMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: alpha < .01m
Magic Number,QuantConnect.Indicators,HullMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\HullMovingAverage.cs,HullMovingAverage,The following statement contains a magic number: period < 2
Magic Number,QuantConnect.Indicators,HullMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\HullMovingAverage.cs,HullMovingAverage,The following statement contains a magic number: _fastWma = new LinearWeightedMovingAverage((int) Math.Round(period * 1d / 2));
Magic Number,QuantConnect.Indicators,HullMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\HullMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: _hullMa.Update(new IndicatorDataPoint(input.Time' 2 * _fastWma - _slowWma));
Magic Number,QuantConnect.Indicators,MassIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MassIndex.cs,MassIndex,The following statement contains a magic number: WarmUpPeriod = 2 * (emaPeriod - 1) + sumPeriod;
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: _filt = new RollingWindow<double>(2) {0' 0};
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: _price = new RollingWindow<double>(3);
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: var beta = 2.415 * (1 - Math.Cos(2 * Math.PI / period));
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: var beta = 2.415 * (1 - Math.Cos(2 * Math.PI / period));
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: var alpha = -beta + Math.Sqrt(Math.Pow(beta' 2) + 2d * beta);
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: var alpha = -beta + Math.Sqrt(Math.Pow(beta' 2) + 2d * beta);
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,SwissArmyKnife,The following statement contains a magic number: switch (tool)              {                  case SwissArmyKnifeTool.Gauss:                      _c0 = alpha * alpha;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.Butter:                      _c0 = alpha * alpha / 4d;                      _b1 = 2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.HighPass:                      alpha = (Math.Cos(2 * Math.PI / period) + Math.Sin(2 * Math.PI / period) - 1) / Math.Cos(2 * Math.PI / period);                      _c0 = (1 + alpha) / 2;                      _b1 = -1;                      _a1 = 1 - alpha;                      break;                  case SwissArmyKnifeTool.TwoPoleHighPass:                      _c0 = (1 + alpha) * (1 + alpha) / 4;                      _b1 = -2;                      _b2 = 1;                      _a1 = 2d * (1 - alpha);                      _a2 = -(1 - alpha) * (1 - alpha);                      break;                  case SwissArmyKnifeTool.BandPass:                      beta = Math.Cos(2 * Math.PI / period);                      var gamma = (1 / Math.Cos(4 * Math.PI * delta / period));                      alpha = gamma - Math.Sqrt(Math.Pow(gamma' 2) - 1);                      _c0 = (1 - alpha) / 2d;                      _b0 = 1;                      _b2 = -1;                      _a1 = -beta * (1 - alpha);                      _a2 = alpha;                      break;                  default:                      throw new ArgumentOutOfRangeException(nameof(tool)' tool' "Invalid SwissArmyKnifeTool");              }
Magic Number,QuantConnect.Indicators,SwissArmyKnife,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\SwissArmyKnife.cs,ComputeNextValue,The following statement contains a magic number: var signal = _a0 * _c0 * (_b0 * _price[0] + _b1 * _price[1] + _b2 * _price[2]) + _a0 * (_a1 * _filt[0] + _a2 * _filt[1]);
Magic Number,QuantConnect.Indicators,VolumeWeightedAveragePriceIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\VolumeWeightedAveragePriceIndicator.cs,GetTimeWeightedAveragePrice,The following statement contains a magic number: return (input.Open + input.High + input.Low + input.Value) / 4;
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,ComputeNextValue,The following statement contains a magic number: var price = (input.Low + input.High) / 2m;
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,ComputeNextValue,The following statement contains a magic number: x = _alpha * 2 * ((double)((price - minL) / (maxH - minL)) - .5) + (1 - _alpha) * _previous;
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,ComputeNextValue,The following statement contains a magic number: x = _alpha * 2 * ((double)((price - minL) / (maxH - minL)) - .5) + (1 - _alpha) * _previous;
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,ComputeNextValue,The following statement contains a magic number: return Convert.ToDecimal(y) + .5m * Current.Value;
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,FisherTransformFunction,The following statement contains a magic number: x = .999;
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,FisherTransformFunction,The following statement contains a magic number: x > .999
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,FisherTransformFunction,The following statement contains a magic number: x = -.999;
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,FisherTransformFunction,The following statement contains a magic number: x < -.999
Magic Number,QuantConnect.Indicators,FisherTransform,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\FisherTransform.cs,FisherTransformFunction,The following statement contains a magic number: return .5 * Math.Log((1.0 + x) / (1.0 - x));
Magic Number,QuantConnect.Indicators,HeikinAshi,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\HeikinAshi.cs,ComputeNextValue,The following statement contains a magic number: Open.Update(input.Time' (input.Open + input.Close) / 2);
Magic Number,QuantConnect.Indicators,HeikinAshi,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\HeikinAshi.cs,ComputeNextValue,The following statement contains a magic number: Close.Update(input.Time' (input.Open + input.High + input.Low + input.Close) / 4);
Magic Number,QuantConnect.Indicators,IchimokuKinkoHyo,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IchimokuKinkoHyo.cs,IchimokuKinkoHyo,The following statement contains a magic number: SenkouA = new FunctionalIndicator<IndicatorDataPoint>(                  name + "_SenkouA"'                  input => SenkouA.IsReady ? (DelayedTenkanSenkouA + DelayedKijunSenkouA) / 2 : decimal.Zero'                  senkouA => DelayedTenkanSenkouA.IsReady && DelayedKijunSenkouA.IsReady'                  () =>                  {                      Tenkan.Reset();                      Kijun.Reset();                  });
Magic Number,QuantConnect.Indicators,IchimokuKinkoHyo,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IchimokuKinkoHyo.cs,IchimokuKinkoHyo,The following statement contains a magic number: SenkouB = new FunctionalIndicator<IndicatorDataPoint>(                  name + "_SenkouB"'                  input => SenkouB.IsReady ? (DelayedMaximumSenkouB + DelayedMinimumSenkouB) / 2 : decimal.Zero'                  senkouA => DelayedMaximumSenkouB.IsReady && DelayedMinimumSenkouB.IsReady'                  () =>                  {                      Tenkan.Reset();                      Kijun.Reset();                  });
Magic Number,QuantConnect.Indicators,IchimokuKinkoHyo,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IchimokuKinkoHyo.cs,IchimokuKinkoHyo,The following statement contains a magic number: Tenkan = new FunctionalIndicator<IndicatorDataPoint>(                  name + "_Tenkan"'                  input => Tenkan.IsReady ? (TenkanMaximum + TenkanMinimum) / 2 : decimal.Zero'                  tenkan => TenkanMaximum.IsReady && TenkanMinimum.IsReady'                  () =>                  {                      TenkanMaximum.Reset();                      TenkanMinimum.Reset();                  });
Magic Number,QuantConnect.Indicators,IchimokuKinkoHyo,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\IchimokuKinkoHyo.cs,IchimokuKinkoHyo,The following statement contains a magic number: Kijun = new FunctionalIndicator<IndicatorDataPoint>(                  name + "_Kijun"'                  input => Kijun.IsReady ? (KijunMaximum + KijunMinimum) / 2 : decimal.Zero'                  kijun => KijunMaximum.IsReady && KijunMinimum.IsReady'                  () =>                  {                      KijunMaximum.Reset();                      KijunMinimum.Reset();                  });
Magic Number,QuantConnect.Indicators,KeltnerChannels,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\KeltnerChannels.cs,ComputeNextValue,The following statement contains a magic number: var typicalPrice = (input.High + input.Low + input.Close)/3m;
Magic Number,QuantConnect.Indicators,MidPrice,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MidPrice.cs,ComputeNextValue,The following statement contains a magic number: return (_maximum + _minimum) / 2;
Magic Number,QuantConnect.Indicators,MidPoint,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MidPoint.cs,ComputeNextValue,The following statement contains a magic number: return (_maximum + _minimum) / 2;
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,MomersionIndicator,The following statement contains a magic number: minPeriod < 4
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,MomersionIndicator,The following statement contains a magic number: WarmUpPeriod = (minPeriod + 2) ?? (fullPeriod + 3);
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,MomersionIndicator,The following statement contains a magic number: WarmUpPeriod = (minPeriod + 2) ?? (fullPeriod + 3);
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,ComputeNextValue,The following statement contains a magic number: _multipliedDiffWindow.Add((window[0] - window[1]) * (window[1] - window[2]));
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,ComputeNextValue,The following statement contains a magic number: window.Count >= 3
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,ComputeNextValue,The following statement contains a magic number: return 100m * mc / (mc + mRc);
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,ComputeNextValue,The following statement contains a magic number: IsReady && _multipliedDiffWindow.Count(obs => obs == 0) < 0.5 * _multipliedDiffWindow.Count
Magic Number,QuantConnect.Indicators,MomersionIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Momersion.cs,ComputeNextValue,The following statement contains a magic number: return 50m;
Magic Number,QuantConnect.Indicators,NormalizedAverageTrueRange,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\NormalizedAverageTrueRange.cs,ComputeNextValue,The following statement contains a magic number: return input.Close != 0 ? _atr / input.Close * 100 : 0m;
Magic Number,QuantConnect.Indicators,NormalizedAverageTrueRange,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\NormalizedAverageTrueRange.cs,ComputeNextValue,The following statement contains a magic number: return input.Close != 0 ? _lastAtrValue / input.Close * 100 : 0m;
Magic Number,QuantConnect.Indicators,ParabolicStopAndReverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\ParabolicStopAndReverse.cs,ComputeNextValue,The following statement contains a magic number: Samples == 2
Magic Number,QuantConnect.Indicators,PercentagePriceOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\PercentagePriceOscillator.cs,ComputeNextValue,The following statement contains a magic number: return Slow != 0 ? 100 * value / Slow : 0m;
Magic Number,QuantConnect.Indicators,TripleExponentialMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TripleExponentialMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: return IsReady ? 3m * _ema1 - 3m * _ema2 + _ema3 : 0m;
Magic Number,QuantConnect.Indicators,TripleExponentialMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TripleExponentialMovingAverage.cs,ComputeNextValue,The following statement contains a magic number: return IsReady ? 3m * _ema1 - 3m * _ema2 + _ema3 : 0m;
Magic Number,QuantConnect.Indicators,TriangularMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TriangularMovingAverage.cs,TriangularMovingAverage,The following statement contains a magic number: var periodSma1 = period % 2 == 0 ? period / 2 : (period + 1) / 2;
Magic Number,QuantConnect.Indicators,TriangularMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TriangularMovingAverage.cs,TriangularMovingAverage,The following statement contains a magic number: var periodSma1 = period % 2 == 0 ? period / 2 : (period + 1) / 2;
Magic Number,QuantConnect.Indicators,TriangularMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TriangularMovingAverage.cs,TriangularMovingAverage,The following statement contains a magic number: var periodSma1 = period % 2 == 0 ? period / 2 : (period + 1) / 2;
Magic Number,QuantConnect.Indicators,TriangularMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TriangularMovingAverage.cs,TriangularMovingAverage,The following statement contains a magic number: var periodSma2 = period % 2 == 0 ? period / 2 + 1 : (period + 1) / 2;
Magic Number,QuantConnect.Indicators,TriangularMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TriangularMovingAverage.cs,TriangularMovingAverage,The following statement contains a magic number: var periodSma2 = period % 2 == 0 ? period / 2 + 1 : (period + 1) / 2;
Magic Number,QuantConnect.Indicators,TriangularMovingAverage,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\TriangularMovingAverage.cs,TriangularMovingAverage,The following statement contains a magic number: var periodSma2 = period % 2 == 0 ? period / 2 + 1 : (period + 1) / 2;
Magic Number,QuantConnect.Indicators,UltimateOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\UltimateOscillator.cs,ComputeNextValue,The following statement contains a magic number: return 50m;
Magic Number,QuantConnect.Indicators,UltimateOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\UltimateOscillator.cs,ComputeNextValue,The following statement contains a magic number: return 50m;
Magic Number,QuantConnect.Indicators,UltimateOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\UltimateOscillator.cs,ComputeNextValue,The following statement contains a magic number: return 100m * (4 * average1 + 2 * average2 + average3) / 7;
Magic Number,QuantConnect.Indicators,UltimateOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\UltimateOscillator.cs,ComputeNextValue,The following statement contains a magic number: return 100m * (4 * average1 + 2 * average2 + average3) / 7;
Magic Number,QuantConnect.Indicators,UltimateOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\UltimateOscillator.cs,ComputeNextValue,The following statement contains a magic number: return 100m * (4 * average1 + 2 * average2 + average3) / 7;
Magic Number,QuantConnect.Indicators,UltimateOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\UltimateOscillator.cs,ComputeNextValue,The following statement contains a magic number: return 100m * (4 * average1 + 2 * average2 + average3) / 7;
Magic Number,QuantConnect.Indicators,Variance,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Variance.cs,ComputeNextValue,The following statement contains a magic number: Samples < 2
Magic Number,QuantConnect.Indicators,WilliamsPercentR,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\WilliamsPercentR.cs,ComputeNextValue,The following statement contains a magic number: return range == 0 ? 0 : -100m * (Maximum.Current.Value - input.Close) / range;
Magic Number,QuantConnect.Indicators,AroonOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AroonOscillator.cs,ComputeAroonUp,The following statement contains a magic number: return 100m * (upPeriod - max.PeriodsSinceMaximum) / upPeriod;
Magic Number,QuantConnect.Indicators,AroonOscillator,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\AroonOscillator.cs,ComputeAroonDown,The following statement contains a magic number: return 100m * (downPeriod - min.PeriodsSinceMinimum) / downPeriod;
Magic Number,QuantConnect.Indicators,CommodityChannelIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CommodityChannelIndex.cs,ComputeNextValue,The following statement contains a magic number: var typicalPrice = (input.High + input.Low + input.Close) / 3.0m;
Magic Number,QuantConnect.Indicators,MeanAbsoluteDeviation,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MeanAbsoluteDeviation.cs,ComputeNextValue,The following statement contains a magic number: return Samples < 2 ? 0m : window.Average(v => Math.Abs(v - Mean.Current.Value));
Magic Number,QuantConnect.Indicators,MoneyFlowIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MoneyFlowIndex.cs,ComputeNextValue,The following statement contains a magic number: var typicalPrice = (input.High + input.Low + input.Close) / 3.0m;
Magic Number,QuantConnect.Indicators,MoneyFlowIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MoneyFlowIndex.cs,ComputeNextValue,The following statement contains a magic number: return 100.0m;
Magic Number,QuantConnect.Indicators,MoneyFlowIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\MoneyFlowIndex.cs,ComputeNextValue,The following statement contains a magic number: return 100m * PositiveMoneyFlow / totalMoneyFlow;
Magic Number,QuantConnect.Indicators,RateOfChangePercent,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\RateOfChangePercent.cs,ComputeNextValue,The following statement contains a magic number: return 100 * base.ComputeNextValue(window' input);
Magic Number,QuantConnect.Indicators,RelativeStrengthIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\RelativeStrengthIndex.cs,ComputeNextValue,The following statement contains a magic number: return 100m;
Magic Number,QuantConnect.Indicators,RelativeStrengthIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\RelativeStrengthIndex.cs,ComputeNextValue,The following statement contains a magic number: return 100m - (100m / (1 + rs));
Magic Number,QuantConnect.Indicators,RelativeStrengthIndex,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\RelativeStrengthIndex.cs,ComputeNextValue,The following statement contains a magic number: return 100m - (100m / (1 + rs));
Magic Number,QuantConnect.Indicators,Stochastic,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Stochastics.cs,ComputeFastStoch,The following statement contains a magic number: return fastStoch * 100;
Magic Number,QuantConnect.Indicators,Stochastic,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Stochastics.cs,ComputeStochK,The following statement contains a magic number: return stochK * 100;
Magic Number,QuantConnect.Indicators,Stochastic,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Stochastics.cs,ComputeStochD,The following statement contains a magic number: var stochD = _maximum.Samples >= (period + constantK + constantD - 2) ? _sumSlowK / constantD : decimal.Zero;
Magic Number,QuantConnect.Indicators,Stochastic,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\Stochastics.cs,ComputeStochD,The following statement contains a magic number: return stochD * 100;
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: value = (int)GetCandleColor(window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpDownGapThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpDownGapThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 3rd opposite color                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 3rd opens within 2nd rb                  input.Open < Math.Max(window[1].Close' window[1].Open) &&                  input.Open > Math.Min(window[1].Close' window[1].Open) &&                  // 3rd closes within 1st rb                  input.Close < Math.Max(window[2].Close' window[2].Open) &&                  input.Close > Math.Min(window[2].Close' window[2].Open) &&                  ((                      // when 1st is white                      GetCandleColor(window[2]) == CandleColor.White &&                      // upside gap                      GetRealBodyGapUp(window[1]' window[2])                    ) ||                    (                      // when 1st is black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // downside gap                      GetRealBodyGapDown(window[1]' window[2])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  // 3rd: engulfing prior rb                  input.Open > window[1].Open && input.Close < window[1].Close &&                  //      closing above 1st                  input.Close > window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  // 3rd: engulfing prior rb                  input.Open > window[1].Open && input.Close < window[1].Close &&                  //      closing above 1st                  input.Close > window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  // 3rd: engulfing prior rb                  input.Open > window[1].Open && input.Close < window[1].Close &&                  //      closing above 1st                  input.Close > window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  // 3rd: engulfing prior rb                  input.Open > window[1].Open && input.Close < window[1].Close &&                  //      closing above 1st                  input.Close > window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  // 3rd: engulfing prior rb                  input.Open > window[1].Open && input.Close < window[1].Close &&                  //      closing above 1st                  input.Close > window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UpsideGapTwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UpsideGapTwoCrows.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      harami                  window[1].Close > window[2].Close && window[1].Open <= window[2].Open &&                  //      lower low                  window[1].Low < window[2].Low &&                  // 3rd: short                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white                  GetCandleColor(input) == CandleColor.White &&                  //      open not lower                  input.Open > window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      harami                  window[1].Close > window[2].Close && window[1].Open <= window[2].Open &&                  //      lower low                  window[1].Low < window[2].Low &&                  // 3rd: short                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white                  GetCandleColor(input) == CandleColor.White &&                  //      open not lower                  input.Open > window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      harami                  window[1].Close > window[2].Close && window[1].Open <= window[2].Open &&                  //      lower low                  window[1].Low < window[2].Low &&                  // 3rd: short                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white                  GetCandleColor(input) == CandleColor.White &&                  //      open not lower                  input.Open > window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      harami                  window[1].Close > window[2].Close && window[1].Open <= window[2].Open &&                  //      lower low                  window[1].Low < window[2].Low &&                  // 3rd: short                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white                  GetCandleColor(input) == CandleColor.White &&                  //      open not lower                  input.Open > window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      harami                  window[1].Close > window[2].Close && window[1].Open <= window[2].Open &&                  //      lower low                  window[1].Low < window[2].Low &&                  // 3rd: short                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white                  GetCandleColor(input) == CandleColor.White &&                  //      open not lower                  input.Open > window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      harami                  window[1].Close > window[2].Close && window[1].Open <= window[2].Open &&                  //      lower low                  window[1].Low < window[2].Low &&                  // 3rd: short                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white                  GetCandleColor(input) == CandleColor.White &&                  //      open not lower                  input.Open > window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,UniqueThreeRiver,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\UniqueThreeRiver.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyDojiAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyDojiAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBodyGapUp(window[1]' window[2]) &&                      // 3rd is not higher than 2nd                      Math.Max(input.Open' input.Close) < Math.Max(window[1].Open' window[1].Close)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBodyGapDown(window[1]' window[2]) &&                      // 3rd is not lower than 2nd                       Math.Min(input.Open' input.Close) > Math.Min(window[1].Open' window[1].Close)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 3rd: doji                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 3rd: doji                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 3rd: doji                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2]) &&                  // 3rd: doji                  GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: _bodyDojiPeriodTotal += GetCandleRange(CandleSettingType.BodyDoji' window[2]) -                                      GetCandleRange(CandleSettingType.BodyDoji' window[_bodyDojiAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Tristar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Tristar.cs,ComputeNextValue,The following statement contains a magic number: _bodyDojiPeriodTotal += GetCandleRange(CandleSettingType.BodyDoji' window[2]) -                                      GetCandleRange(CandleSettingType.BodyDoji' window[_bodyDojiAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Thrusting,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Thrusting.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[1]) == CandleColor.Black &&                  //      long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[1]) &&                  // 2nd: white                  GetCandleColor(input) == CandleColor.White &&                  //      open below prior low                  input.Open < window[1].Low &&                  //      close into prior body                  input.Close > window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  //      under the midpoint                  input.Close <= window[1].Close + GetRealBody(window[1]) * 0.5m
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The following statement contains a magic number: (                      // upside gap                          GetRealBodyGapUp(window[1]' window[2]) &&                      // 1st: white                      GetCandleColor(window[1]) == CandleColor.White &&                      // 2nd: black                      GetCandleColor(input) == CandleColor.Black &&                      //      that opens within the white rb                      input.Open < window[1].Close && input.Open > window[1].Open &&                      //      and closes under the white rb                      input.Close < window[1].Open &&                      //      inside the gap                      input.Close > Math.Max(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  ) ||                  (                      // downside gap                      GetRealBodyGapDown(window[1]' window[2]) &&                      // 1st: black                      GetCandleColor(window[1]) == CandleColor.Black &&                      // 2nd: white                      GetCandleColor(input) == CandleColor.White &&                      //      that opens within the black rb                      input.Open < window[1].Open && input.Open > window[1].Close &&                      //      and closes above the black rb                      input.Close > window[1].Open &&                      //      inside the gap                      input.Close < Math.Min(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The following statement contains a magic number: (                      // upside gap                          GetRealBodyGapUp(window[1]' window[2]) &&                      // 1st: white                      GetCandleColor(window[1]) == CandleColor.White &&                      // 2nd: black                      GetCandleColor(input) == CandleColor.Black &&                      //      that opens within the white rb                      input.Open < window[1].Close && input.Open > window[1].Open &&                      //      and closes under the white rb                      input.Close < window[1].Open &&                      //      inside the gap                      input.Close > Math.Max(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  ) ||                  (                      // downside gap                      GetRealBodyGapDown(window[1]' window[2]) &&                      // 1st: black                      GetCandleColor(window[1]) == CandleColor.Black &&                      // 2nd: white                      GetCandleColor(input) == CandleColor.White &&                      //      that opens within the black rb                      input.Open < window[1].Open && input.Open > window[1].Close &&                      //      and closes above the black rb                      input.Close > window[1].Open &&                      //      inside the gap                      input.Close < Math.Min(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The following statement contains a magic number: (                      // upside gap                          GetRealBodyGapUp(window[1]' window[2]) &&                      // 1st: white                      GetCandleColor(window[1]) == CandleColor.White &&                      // 2nd: black                      GetCandleColor(input) == CandleColor.Black &&                      //      that opens within the white rb                      input.Open < window[1].Close && input.Open > window[1].Open &&                      //      and closes under the white rb                      input.Close < window[1].Open &&                      //      inside the gap                      input.Close > Math.Max(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  ) ||                  (                      // downside gap                      GetRealBodyGapDown(window[1]' window[2]) &&                      // 1st: black                      GetCandleColor(window[1]) == CandleColor.Black &&                      // 2nd: white                      GetCandleColor(input) == CandleColor.White &&                      //      that opens within the black rb                      input.Open < window[1].Open && input.Open > window[1].Close &&                      //      and closes above the black rb                      input.Close > window[1].Open &&                      //      inside the gap                      input.Close < Math.Min(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The following statement contains a magic number: (                      // upside gap                          GetRealBodyGapUp(window[1]' window[2]) &&                      // 1st: white                      GetCandleColor(window[1]) == CandleColor.White &&                      // 2nd: black                      GetCandleColor(input) == CandleColor.Black &&                      //      that opens within the white rb                      input.Open < window[1].Close && input.Open > window[1].Open &&                      //      and closes under the white rb                      input.Close < window[1].Open &&                      //      inside the gap                      input.Close > Math.Max(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  ) ||                  (                      // downside gap                      GetRealBodyGapDown(window[1]' window[2]) &&                      // 1st: black                      GetCandleColor(window[1]) == CandleColor.Black &&                      // 2nd: white                      GetCandleColor(input) == CandleColor.White &&                      //      that opens within the black rb                      input.Open < window[1].Open && input.Open > window[1].Close &&                      //      and closes above the black rb                      input.Close > window[1].Open &&                      //      inside the gap                      input.Close < Math.Min(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The following statement contains a magic number: (                      // upside gap                          GetRealBodyGapUp(window[1]' window[2]) &&                      // 1st: white                      GetCandleColor(window[1]) == CandleColor.White &&                      // 2nd: black                      GetCandleColor(input) == CandleColor.Black &&                      //      that opens within the white rb                      input.Open < window[1].Close && input.Open > window[1].Open &&                      //      and closes under the white rb                      input.Close < window[1].Open &&                      //      inside the gap                      input.Close > Math.Max(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  ) ||                  (                      // downside gap                      GetRealBodyGapDown(window[1]' window[2]) &&                      // 1st: black                      GetCandleColor(window[1]) == CandleColor.Black &&                      // 2nd: white                      GetCandleColor(input) == CandleColor.White &&                      //      that opens within the black rb                      input.Open < window[1].Open && input.Open > window[1].Close &&                      //      and closes above the black rb                      input.Close > window[1].Open &&                      //      inside the gap                      input.Close < Math.Min(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TasukiGap,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TasukiGap.cs,ComputeNextValue,The following statement contains a magic number: (                      // upside gap                          GetRealBodyGapUp(window[1]' window[2]) &&                      // 1st: white                      GetCandleColor(window[1]) == CandleColor.White &&                      // 2nd: black                      GetCandleColor(input) == CandleColor.Black &&                      //      that opens within the white rb                      input.Open < window[1].Close && input.Open > window[1].Open &&                      //      and closes under the white rb                      input.Close < window[1].Open &&                      //      inside the gap                      input.Close > Math.Max(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  ) ||                  (                      // downside gap                      GetRealBodyGapDown(window[1]' window[2]) &&                      // 1st: black                      GetCandleColor(window[1]) == CandleColor.Black &&                      // 2nd: white                      GetCandleColor(input) == CandleColor.White &&                      //      that opens within the black rb                      input.Open < window[1].Open && input.Open > window[1].Close &&                      //      and closes above the black rb                      input.Close > window[1].Open &&                      //      inside the gap                      input.Close < Math.Min(window[2].Close' window[2].Open) &&                      // size of 2 rb near the same                      Math.Abs(GetRealBody(window[1]) - GetRealBody(input)) < GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1])                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: _equalPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // second white                  GetCandleColor(window[1]) == CandleColor.White &&                  // third black                  GetCandleColor(input) == CandleColor.Black &&                  // 2nd low > prior close                  window[1].Low > window[2].Close &&                  // 1st and 3rd same close                  input.Close <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2]) &&                  input.Close >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // second white                  GetCandleColor(window[1]) == CandleColor.White &&                  // third black                  GetCandleColor(input) == CandleColor.Black &&                  // 2nd low > prior close                  window[1].Low > window[2].Close &&                  // 1st and 3rd same close                  input.Close <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2]) &&                  input.Close >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // second white                  GetCandleColor(window[1]) == CandleColor.White &&                  // third black                  GetCandleColor(input) == CandleColor.Black &&                  // 2nd low > prior close                  window[1].Low > window[2].Close &&                  // 1st and 3rd same close                  input.Close <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2]) &&                  input.Close >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // second white                  GetCandleColor(window[1]) == CandleColor.White &&                  // third black                  GetCandleColor(input) == CandleColor.Black &&                  // 2nd low > prior close                  window[1].Low > window[2].Close &&                  // 1st and 3rd same close                  input.Close <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2]) &&                  input.Close >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // second white                  GetCandleColor(window[1]) == CandleColor.White &&                  // third black                  GetCandleColor(input) == CandleColor.Black &&                  // 2nd low > prior close                  window[1].Low > window[2].Close &&                  // 1st and 3rd same close                  input.Close <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2]) &&                  input.Close >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // second white                  GetCandleColor(window[1]) == CandleColor.White &&                  // third black                  GetCandleColor(input) == CandleColor.Black &&                  // 2nd low > prior close                  window[1].Low > window[2].Close &&                  // 1st and 3rd same close                  input.Close <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2]) &&                  input.Close >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[2])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: _equalPeriodTotal += GetCandleRange(CandleSettingType.Equal' window[2]) -                                   GetCandleRange(CandleSettingType.Equal' window[_equalAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StickSandwich,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StickSandwich.cs,ComputeNextValue,The following statement contains a magic number: _equalPeriodTotal += GetCandleRange(CandleSettingType.Equal' window[2]) -                                   GetCandleRange(CandleSettingType.Equal' window[_equalAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal[2] += GetCandleRange(CandleSettingType.BodyLong' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal[2] += GetCandleRange(CandleSettingType.BodyLong' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[2]' window[2]) &&                  // 2nd: long real body                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd: small real body                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  // rides on the shoulder of 2nd real body                  input.Open >= window[1].Close - GetRealBody(input) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,Reset,The following statement contains a magic number: _bodyLongPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,StalledPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\StalledPattern.cs,Reset,The following statement contains a magic number: _nearPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[3] += GetCandleRange(CandleSettingType.BodyShort' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[3] += GetCandleRange(CandleSettingType.BodyShort' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[2] += GetCandleRange(CandleSettingType.BodyShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[2] += GetCandleRange(CandleSettingType.BodyShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: value = (int)GetCandleColor(window[4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[0]' input) &&                  // white' 3 black' white  ||  black' 3 white' black                  (int)GetCandleColor(window[4]) == -(int)GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  // 2nd to 4th hold within 1st: a part of the real body must be within 1st range                  Math.Min(window[3].Open' window[3].Close) < window[4].High && Math.Max(window[3].Open' window[3].Close) > window[4].Low &&                  Math.Min(window[2].Open' window[2].Close) < window[4].High && Math.Max(window[2].Open' window[2].Close) > window[4].Low &&                  Math.Min(window[1].Open' window[1].Close) < window[4].High && Math.Max(window[1].Open' window[1].Close) > window[4].Low &&                  // 2nd to 4th are falling (rising)                  window[2].Close * (int)GetCandleColor(window[4]) < window[3].Close * (int)GetCandleColor(window[4]) &&                  window[1].Close * (int)GetCandleColor(window[4]) < window[2].Close * (int)GetCandleColor(window[4]) &&                  // 5th opens above (below) the prior close                  input.Open * (int)GetCandleColor(window[4]) > window[1].Close * (int)GetCandleColor(window[4]) &&                  // 5th closes above (below) the 1st close                  input.Close * (int)GetCandleColor(window[4]) > window[4].Close * (int)GetCandleColor(window[4])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                     GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                     GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                     GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RiseFallThreeMethods,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RiseFallThreeMethods.cs,Reset,The following statement contains a magic number: _bodyPeriodTotal = new decimal[5];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RickshawMan,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RickshawMan.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' input) &&                  // long shadow                  GetLowerShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // long shadow                  GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // body near midpoint                  (                      Math.Min(input.Open' input.Close)                          <= input.Low + GetHighLowRange(input) / 2 + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' input)                      &&                      Math.Max(input.Open' input.Close)                          >= input.Low + GetHighLowRange(input) / 2 - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' input)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,RickshawMan,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\RickshawMan.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(input) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' input) &&                  // long shadow                  GetLowerShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // long shadow                  GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' input) &&                  // body near midpoint                  (                      Math.Min(input.Open' input.Close)                          <= input.Low + GetHighLowRange(input) / 2 + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' input)                      &&                      Math.Max(input.Open' input.Close)                          >= input.Low + GetHighLowRange(input) / 2 - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' input)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Piercing,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Piercing.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[1]) == CandleColor.Black &&                  //      long                  GetRealBody(window[1]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[1]' window[1]) &&                  // 2nd: white                  GetCandleColor(input) == CandleColor.White &&                  //      long                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal[0]' input) &&                  //      open below prior low                  input.Open < window[1].Low &&                  //      close within prior body                  input.Close < window[1].Open &&                  //      above midpoint                  input.Close > window[1].Close + GetRealBody(window[1]) * 0.5m
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Piercing,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Piercing.cs,Reset,The following statement contains a magic number: _bodyLongPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      white real body                  GetCandleColor(input) == CandleColor.White &&                  //      closing well within 1st rb                  input.Close > window[2].Close + GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MorningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MorningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[3] += GetCandleRange(CandleSettingType.BodyShort' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[3] += GetCandleRange(CandleSettingType.BodyShort' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[2] += GetCandleRange(CandleSettingType.BodyShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[2] += GetCandleRange(CandleSettingType.BodyShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyPeriodTotal[4]' window[4]) &&                  GetRealBody(window[3]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[3]' window[3]) &&                  GetRealBody(window[2]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[2]' window[2]) &&                  GetRealBody(window[1]) < GetCandleAverage(CandleSettingType.BodyShort' _bodyPeriodTotal[1]' window[1]) &&                  // white' black' 2 black or white' white                  GetCandleColor(window[4]) == CandleColor.White &&                  GetCandleColor(window[3]) == CandleColor.Black &&                  GetCandleColor(input) == CandleColor.White &&                  // upside gap 1st to 2nd                  GetRealBodyGapUp(window[3]' window[4]) &&                  // 3rd to 4th hold within 1st: a part of the real body must be within 1st real body                  Math.Min(window[2].Open' window[2].Close) < window[4].Close &&                  Math.Min(window[1].Open' window[1].Close) < window[4].Close &&                  // reaction days penetrate first body less than optInPenetration percent                  Math.Min(window[2].Open' window[2].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  Math.Min(window[1].Open' window[1].Close) > window[4].Close - GetRealBody(window[4]) * _penetration &&                  // 2nd to 4th are falling                  Math.Max(window[2].Close' window[2].Open) < window[3].Open &&                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  // 5th opens above the prior close                  input.Open > window[1].Close &&                  // 5th closes above the highest high of the reaction days                  input.Close > Math.Max(Math.Max(window[3].High' window[2].High)' window[1].High)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                     GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                     GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,ComputeNextValue,The following statement contains a magic number: _bodyPeriodTotal[4] += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                     GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,MatHold,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\MatHold.cs,Reset,The following statement contains a magic number: _bodyPeriodTotal = new decimal[5];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,LadderBottom,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\LadderBottom.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[4]) == CandleColor.Black &&                   GetCandleColor(window[3]) == CandleColor.Black &&                   GetCandleColor(window[2]) == CandleColor.Black &&                  // with consecutively lower opens                  window[4].Open > window[3].Open && window[3].Open > window[2].Open &&                  // and closes                  window[4].Close > window[3].Close && window[3].Close > window[2].Close &&                  // 4th: black with an upper shadow                  GetCandleColor(window[1]) == CandleColor.Black &&                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal' window[1]) &&                  // 5th: white                  GetCandleColor(input) == CandleColor.White &&                  // that opens above prior candle's body                  input.Open > window[1].Open &&                  // and closes above prior candle's high                  input.Close > window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,KickingByLength,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\KickingByLength.cs,Reset,The following statement contains a magic number: _shadowVeryShortPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,KickingByLength,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\KickingByLength.cs,Reset,The following statement contains a magic number: _bodyLongPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Kicking,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Kicking.cs,Reset,The following statement contains a magic number: _shadowVeryShortPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Kicking,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Kicking.cs,Reset,The following statement contains a magic number: _bodyLongPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal2' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      white                  GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  //      black real body                  GetCandleColor(input) == CandleColor.Black &&                  //      closing well within 1st rb                  input.Close < window[2].Close - GetRealBody(window[2]) * _penetration
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,EveningDojiStar,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\EveningDojiStar.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod + 2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: doji                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyDoji' _bodyDojiPeriodTotal' window[1]) &&                  // 3rd: longer than short                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  ((                      // 1st white                      GetCandleColor(window[2]) == CandleColor.White &&                      // 3rd black                      GetCandleColor(input) == CandleColor.Black &&                      // 3rd closes well within 1st rb                      input.Close < window[2].Close - GetRealBody(window[2]) * _penetration &&                      // upside gap between 1st and 2nd                      GetCandleGapUp(window[1]' window[2]) &&                      // downside gap between 2nd and 3rd                      GetCandleGapDown(input' window[1])                    )                    ||                    (                      // 1st black                      GetCandleColor(window[2]) == CandleColor.Black &&                      // 3rd white                      GetCandleColor(input) == CandleColor.White &&                      // 3rd closes well within 1st rb                      input.Close > window[2].Close + GetRealBody(window[2]) * _penetration &&                      // downside gap between 1st and 2nd                      GetCandleGapDown(window[1]' window[2]) &&                      // upside gap between 2nd and 3rd                      GetCandleGapUp(input' window[1])                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AbandonedBaby,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AbandonedBaby.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[_bodyLongAveragePeriod - 1]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _shadowShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _shadowShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _farPeriodTotal[2] += GetCandleRange(CandleSettingType.Far' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _farPeriodTotal[2] += GetCandleRange(CandleSettingType.Far' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 1st: long real body                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 1st: short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[2]' window[2]) &&                  (                      // ( 2 far smaller than 1 && 3 not longer than 2 )                      // advance blocked with the 2nd' 3rd must not carry on the advance                      (                          GetRealBody(window[1]) < GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                          GetRealBody(input) < GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1])                      ) ||                      // 3 far smaller than 2                      // advance blocked with the 3rd                      (                          GetRealBody(input) < GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1])                      ) ||                      // ( 3 smaller than 2 && 2 smaller than 1 && (3 or 2 not short upper shadow) )                      // advance blocked with progressively smaller real bodies and some upper shadows                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetRealBody(window[1]) < GetRealBody(window[2]) &&                          (                              GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[0]' input) ||                              GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowShort' _shadowShortPeriodTotal[1]' window[1])                          )                      ) ||                      // ( 3 smaller than 2 && 3 long upper shadow )                      // advance blocked with 3rd candle's long upper shadow and smaller body                      (                          GetRealBody(input) < GetRealBody(window[1]) &&                          GetUpperShadow(input) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal[0]' input)                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                       GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                       GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,Reset,The following statement contains a magic number: _shadowShortPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,Reset,The following statement contains a magic number: _shadowLongPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,Reset,The following statement contains a magic number: _nearPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,AdvanceBlock,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\AdvanceBlock.cs,Reset,The following statement contains a magic number: _farPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[4]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[4]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[4]) &&                  // 1st' 2nd' 4th same color' 5th opposite                  GetCandleColor(window[4]) == GetCandleColor(window[3]) &&                  GetCandleColor(window[3]) == GetCandleColor(window[1]) &&                  (int)GetCandleColor(window[1]) == -(int)GetCandleColor(input) &&                  (                    (                      // when 1st is black:                      GetCandleColor(window[4]) == CandleColor.Black &&                      // 2nd gaps down                      GetRealBodyGapDown(window[3]' window[4]) &&                      // 3rd has lower high and low than 2nd                      window[2].High < window[3].High && window[2].Low < window[3].Low &&                      // 4th has lower high and low than 3rd                      window[1].High < window[2].High && window[1].Low < window[2].Low &&                      // 5th closes inside the gap                      input.Close > window[3].Open && input.Close < window[4].Close                    )                    ||                    (                      // when 1st is white:                      GetCandleColor(window[4]) == CandleColor.White &&                      // 2nd gaps up                      GetRealBodyGapUp(window[3]' window[4]) &&                      // 3rd has higher high and low than 2nd                      window[2].High > window[3].High && window[2].Low > window[3].Low &&                      // 4th has higher high and low than 3rd                      window[1].High > window[2].High && window[1].Low > window[2].Low &&                      // 5th closes inside the gap                      input.Close < window[3].Open && input.Close > window[4].Close                    )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[4 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Breakaway,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Breakaway.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[4]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[4 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,CandlestickPattern,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\CandlestickPattern.cs,GetCandleAverage,The following statement contains a magic number: return defaultSetting.Factor *                  (defaultSetting.AveragePeriod != 0 ? sum / defaultSetting.AveragePeriod : GetCandleRange(type' tradeBar)) /                  (defaultSetting.RangeType == CandleRangeType.Shadows ? 2.0m : 1.0m);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _nearAveragePeriod - 3 && Samples < Period - 3
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _nearAveragePeriod - 3 && Samples < Period - 3
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: window[2].High < window[3].High && window[2].Low > window[3].Low &&                  // 3rd: lower high and higher low than 2nd                  window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 4th: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low &&                    // (bull) 2nd: close near the low                    window[2].Close <= window[2].Low + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                      )                   ||                   // (bear) 4th: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low &&                    // (bull) 2nd: close near the top                    window[2].Close >= window[2].High - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[2])                       )                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal += GetCandleRange(CandleSettingType.Near' window[2]) -                                  GetCandleRange(CandleSettingType.Near' window[_nearAveragePeriod + 5]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal += GetCandleRange(CandleSettingType.Near' window[2]) -                                  GetCandleRange(CandleSettingType.Near' window[_nearAveragePeriod + 5]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.White &&                  // 1st black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // 2nd black opens within 1st black's rb                  window[1].Open < window[2].Open && window[1].Open > window[2].Close &&                  // 3rd black opens within 2nd black's rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  // 1st black closes under prior candle's high                  window[3].High > window[2].Close &&                  // three declining                  window[2].Close > window[1].Close &&                  // three declining                  window[1].Close > input.Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeBlackCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeBlackCrows.cs,Reset,The following statement contains a magic number: _shadowVeryShortPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,GapSideBySideWhite,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\GapSideBySideWhite.cs,ComputeNextValue,The following statement contains a magic number: value = GetRealBodyGapUp(window[1]' window[2]) ? 1m : -1m;
Magic Number,QuantConnect.Indicators.CandlestickPatterns,GapSideBySideWhite,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\GapSideBySideWhite.cs,ComputeNextValue,The following statement contains a magic number: ( // upside or downside gap between the 1st candle and both the next 2 candles                    (GetRealBodyGapUp(window[1]' window[2]) && GetRealBodyGapUp(input' window[2]))                    ||                    (GetRealBodyGapDown(window[1]' window[2]) && GetRealBodyGapDown(input' window[2]))                  ) &&                  // 2nd: white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd: white                  GetCandleColor(input) == CandleColor.White &&                  // same size 2 and 3                  GetRealBody(input) >= GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  GetRealBody(input) <= GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  // same open 2 and 3                  input.Open >= window[1].Open - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Open <= window[1].Open + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,GapSideBySideWhite,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\GapSideBySideWhite.cs,ComputeNextValue,The following statement contains a magic number: ( // upside or downside gap between the 1st candle and both the next 2 candles                    (GetRealBodyGapUp(window[1]' window[2]) && GetRealBodyGapUp(input' window[2]))                    ||                    (GetRealBodyGapDown(window[1]' window[2]) && GetRealBodyGapDown(input' window[2]))                  ) &&                  // 2nd: white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd: white                  GetCandleColor(input) == CandleColor.White &&                  // same size 2 and 3                  GetRealBody(input) >= GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  GetRealBody(input) <= GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  // same open 2 and 3                  input.Open >= window[1].Open - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Open <= window[1].Open + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,GapSideBySideWhite,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\GapSideBySideWhite.cs,ComputeNextValue,The following statement contains a magic number: ( // upside or downside gap between the 1st candle and both the next 2 candles                    (GetRealBodyGapUp(window[1]' window[2]) && GetRealBodyGapUp(input' window[2]))                    ||                    (GetRealBodyGapDown(window[1]' window[2]) && GetRealBodyGapDown(input' window[2]))                  ) &&                  // 2nd: white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd: white                  GetCandleColor(input) == CandleColor.White &&                  // same size 2 and 3                  GetRealBody(input) >= GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  GetRealBody(input) <= GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  // same open 2 and 3                  input.Open >= window[1].Open - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Open <= window[1].Open + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,GapSideBySideWhite,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\GapSideBySideWhite.cs,ComputeNextValue,The following statement contains a magic number: ( // upside or downside gap between the 1st candle and both the next 2 candles                    (GetRealBodyGapUp(window[1]' window[2]) && GetRealBodyGapUp(input' window[2]))                    ||                    (GetRealBodyGapDown(window[1]' window[2]) && GetRealBodyGapDown(input' window[2]))                  ) &&                  // 2nd: white                  GetCandleColor(window[1]) == CandleColor.White &&                  // 3rd: white                  GetCandleColor(input) == CandleColor.White &&                  // same size 2 and 3                  GetRealBody(input) >= GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  GetRealBody(input) <= GetRealBody(window[1]) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal' window[1]) &&                  // same open 2 and 3                  input.Open >= window[1].Open - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1]) &&                  input.Open <= window[1].Open + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: value = -(int)GetCandleColor(window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: short                  GetRealBody(window[1]) <= GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' window[1]) &&                  //      engulfed by 1st                  Math.Max(window[1].Close' window[1].Open) < Math.Max(window[2].Close' window[2].Open) &&                  Math.Min(window[1].Close' window[1].Open) > Math.Min(window[2].Close' window[2].Open) &&                  // 3rd: opposite to 1st                  ((GetCandleColor(window[2]) == CandleColor.White && GetCandleColor(input) == CandleColor.Black && input.Close < window[2].Open) ||                    //      and closing out                    (GetCandleColor(window[2]) == CandleColor.Black && GetCandleColor(input) == CandleColor.White && input.Close > window[2].Open)                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeInside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeInside.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[3] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[3] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[2]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 4th black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: marubozu                  GetLowerShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  GetUpperShadow(window[3]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[3]' window[3]) &&                  // 2nd: marubozu                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 3rd: opens gapping down                  GetRealBodyGapDown(window[1]' window[2]) &&                  //      and has an upper shadow                  GetUpperShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  //      that extends into the prior body                  window[1].High > window[2].Close &&                  // 4th: engulfs the 3rd including the shadows                  input.High > window[1].High && input.Low < window[1].Low
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ConcealedBabySwallow,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ConcealedBabySwallow.cs,Reset,The following statement contains a magic number: _shadowVeryShortPeriodTotal = new decimal[4];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[3] += GetCandleRange(CandleSettingType.Near' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[3] += GetCandleRange(CandleSettingType.Near' window[3]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[3]) == GetCandleColor(window[2]) &&                  GetCandleColor(window[2]) == GetCandleColor(window[1]) &&                  // 4th opposite color                  (int)GetCandleColor(input) == -(int)GetCandleColor(window[1]) &&                  // 2nd opens within/near 1st rb                  window[2].Open >= Math.Min(window[3].Open' window[3].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  window[2].Open <= Math.Max(window[3].Open' window[3].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[3]' window[3]) &&                  // 3rd opens within/near 2nd rb                  window[1].Open >= Math.Min(window[2].Open' window[2].Close) - GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  window[1].Open <= Math.Max(window[2].Open' window[2].Close) + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  (                      (                          // if three white                          GetCandleColor(window[1]) == CandleColor.White &&                          // consecutive higher closes                          window[1].Close > window[2].Close && window[2].Close > window[3].Close &&                          // 4th opens above prior close                          input.Open > window[1].Close &&                          // 4th closes below 1st open                          input.Close < window[3].Open                      ) ||                      (                          // if three black                          GetCandleColor(window[1]) == CandleColor.Black &&                          // consecutive lower closes                          window[1].Close < window[2].Close && window[2].Close < window[3].Close &&                          // 4th opens below prior close                          input.Open < window[1].Close &&                          // 4th closes above 1st open                          input.Close > window[3].Open                      )                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,ComputeNextValue,The following statement contains a magic number: i >= 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeLineStrike,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeLineStrike.cs,Reset,The following statement contains a magic number: _nearPeriodTotal = new decimal[4];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The following statement contains a magic number: window[1].High < window[2].High && window[1].Low > window[2].Low &&                          // (bull) 3rd: lower high and lower low                          ((input.High < window[1].High && input.Low < window[1].Low)                            ||                            // (bear) 3rd: higher high and higher low                            (input.High > window[1].High && input.Low > window[1].Low)                          )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The following statement contains a magic number: window[1].High < window[2].High && window[1].Low > window[2].Low &&                          // (bull) 3rd: lower high and lower low                          ((input.High < window[1].High && input.Low < window[1].Low)                            ||                            // (bear) 3rd: higher high and higher low                            (input.High > window[1].High && input.Low > window[1].Low)                          )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The following statement contains a magic number: Samples >= 3
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The following statement contains a magic number: window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 3rd: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low)                   ||                   // (bear) 3rd: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low)                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Hikkake,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Hikkake.cs,ComputeNextValue,The following statement contains a magic number: window[1].High < window[2].High && window[1].Low > window[2].Low &&                  // (bull) 3rd: lower high and lower low                  ((input.High < window[1].High && input.Low < window[1].Low)                   ||                   // (bear) 3rd: higher high and higher low                   (input.High > window[1].High && input.Low > window[1].Low)                      )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeOutside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeOutside.cs,ComputeNextValue,The following statement contains a magic number: (                    // white engulfs black                    GetCandleColor(window[1]) == CandleColor.White && GetCandleColor(window[2]) == CandleColor.Black &&                    window[1].Close > window[2].Open && window[1].Open < window[2].Close &&                    // third candle higher                    input.Close > window[1].Close                  )                  ||                  (                    // black engulfs white                    GetCandleColor(window[1]) == CandleColor.Black && GetCandleColor(window[2]) == CandleColor.White &&                    window[1].Open > window[2].Close && window[1].Close < window[2].Open &&                    // third candle lower                    input.Close < window[1].Close                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeOutside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeOutside.cs,ComputeNextValue,The following statement contains a magic number: (                    // white engulfs black                    GetCandleColor(window[1]) == CandleColor.White && GetCandleColor(window[2]) == CandleColor.Black &&                    window[1].Close > window[2].Open && window[1].Open < window[2].Close &&                    // third candle higher                    input.Close > window[1].Close                  )                  ||                  (                    // black engulfs white                    GetCandleColor(window[1]) == CandleColor.Black && GetCandleColor(window[2]) == CandleColor.White &&                    window[1].Open > window[2].Close && window[1].Close < window[2].Open &&                    // third candle lower                    input.Close < window[1].Close                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeOutside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeOutside.cs,ComputeNextValue,The following statement contains a magic number: (                    // white engulfs black                    GetCandleColor(window[1]) == CandleColor.White && GetCandleColor(window[2]) == CandleColor.Black &&                    window[1].Close > window[2].Open && window[1].Open < window[2].Close &&                    // third candle higher                    input.Close > window[1].Close                  )                  ||                  (                    // black engulfs white                    GetCandleColor(window[1]) == CandleColor.Black && GetCandleColor(window[2]) == CandleColor.White &&                    window[1].Open > window[2].Close && window[1].Close < window[2].Open &&                    // third candle lower                    input.Close < window[1].Close                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeOutside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeOutside.cs,ComputeNextValue,The following statement contains a magic number: (                    // white engulfs black                    GetCandleColor(window[1]) == CandleColor.White && GetCandleColor(window[2]) == CandleColor.Black &&                    window[1].Close > window[2].Open && window[1].Open < window[2].Close &&                    // third candle higher                    input.Close > window[1].Close                  )                  ||                  (                    // black engulfs white                    GetCandleColor(window[1]) == CandleColor.Black && GetCandleColor(window[2]) == CandleColor.White &&                    window[1].Open > window[2].Close && window[1].Close < window[2].Open &&                    // third candle lower                    input.Close < window[1].Close                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeOutside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeOutside.cs,ComputeNextValue,The following statement contains a magic number: (                    // white engulfs black                    GetCandleColor(window[1]) == CandleColor.White && GetCandleColor(window[2]) == CandleColor.Black &&                    window[1].Close > window[2].Open && window[1].Open < window[2].Close &&                    // third candle higher                    input.Close > window[1].Close                  )                  ||                  (                    // black engulfs white                    GetCandleColor(window[1]) == CandleColor.Black && GetCandleColor(window[2]) == CandleColor.White &&                    window[1].Open > window[2].Close && window[1].Close < window[2].Open &&                    // third candle lower                    input.Close < window[1].Close                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeOutside,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeOutside.cs,ComputeNextValue,The following statement contains a magic number: (                    // white engulfs black                    GetCandleColor(window[1]) == CandleColor.White && GetCandleColor(window[2]) == CandleColor.Black &&                    window[1].Close > window[2].Open && window[1].Open < window[2].Close &&                    // third candle higher                    input.Close > window[1].Close                  )                  ||                  (                    // black engulfs white                    GetCandleColor(window[1]) == CandleColor.Black && GetCandleColor(window[2]) == CandleColor.White &&                    window[1].Open > window[2].Close && window[1].Close < window[2].Open &&                    // third candle lower                    input.Close < window[1].Close                  )
Magic Number,QuantConnect.Indicators.CandlestickPatterns,Counterattack,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\Counterattack.cs,Reset,The following statement contains a magic number: _bodyLongPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: _shadowLongPeriodTotal += GetCandleRange(CandleSettingType.ShadowLong' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // 1st: long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  //      with long lower shadow                  GetLowerShadow(window[2]) > GetCandleAverage(CandleSettingType.ShadowLong' _shadowLongPeriodTotal' window[2]) &&                  // 2nd: smaller candle                  GetRealBody(window[1]) < GetRealBody(window[2]) &&                  //      that opens higher but within 1st range                  window[1].Open > window[2].Close && window[1].Open <= window[2].High &&                  //      and trades lower than 1st close                  window[1].Low < window[2].Close &&                  //      but not lower than 1st low                  window[1].Low >= window[2].Low &&                  //      and has a lower shadow                  GetLowerShadow(window[1]) > GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd: small marubozu                  GetRealBody(input) < GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input) &&                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  //      engulfed by prior candle's range                  input.Low > window[1].Low && input.High < window[1].High
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: _shadowLongPeriodTotal += GetCandleRange(CandleSettingType.ShadowLong' window[2]) -                                        GetCandleRange(CandleSettingType.ShadowLong' window[2 + _shadowLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,ComputeNextValue,The following statement contains a magic number: _shadowLongPeriodTotal += GetCandleRange(CandleSettingType.ShadowLong' window[2]) -                                        GetCandleRange(CandleSettingType.ShadowLong' window[2 + _shadowLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeStarsInSouth,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeStarsInSouth.cs,Reset,The following statement contains a magic number: _shadowVeryShortPeriodTotal = new decimal[2];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: _equalPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: _equalPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd black                  GetCandleColor(window[1]) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd black                  GetCandleColor(input) == CandleColor.Black &&                  // very short lower shadow                  GetLowerShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // three declining                  window[2].Close > window[1].Close &&                  window[1].Close > input.Close &&                  // 2nd black opens very close to 1st close                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  window[1].Open >= window[2].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[2]' window[2]) &&                  // 3rd black opens very close to 2nd close                   input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1]) &&                  input.Open >= window[1].Close - GetCandleAverage(CandleSettingType.Equal' _equalPeriodTotal[1]' window[1])
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,Reset,The following statement contains a magic number: _shadowVeryShortPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,IdenticalThreeCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\IdenticalThreeCrows.cs,Reset,The following statement contains a magic number: _equalPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: _shadowVeryShortPeriodTotal[2] += GetCandleRange(CandleSettingType.ShadowVeryShort' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: _nearPeriodTotal[2] += GetCandleRange(CandleSettingType.Near' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: _farPeriodTotal[2] += GetCandleRange(CandleSettingType.Far' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: _farPeriodTotal[2] += GetCandleRange(CandleSettingType.Far' window[2]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[2]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[2]' window[2]) &&                  // 2nd white                  GetCandleColor(window[1]) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(window[1]) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[1]' window[1]) &&                  // 3rd white                  GetCandleColor(input) == CandleColor.White &&                  // very short upper shadow                  GetUpperShadow(input) < GetCandleAverage(CandleSettingType.ShadowVeryShort' _shadowVeryShortPeriodTotal[0]' input) &&                  // consecutive higher closes                  input.Close > window[1].Close && window[1].Close > window[2].Close &&                  // 2nd opens within/near 1st real body                  window[1].Open > window[2].Open &&                  window[1].Open <= window[2].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[2]' window[2]) &&                  // 3rd opens within/near 2nd real body                  input.Open > window[1].Open &&                  input.Open <= window[1].Close + GetCandleAverage(CandleSettingType.Near' _nearPeriodTotal[1]' window[1]) &&                  // 2nd not far shorter than 1st                  GetRealBody(window[1]) > GetRealBody(window[2]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[2]' window[2]) &&                  // 3rd not far shorter than 2nd                  GetRealBody(input) > GetRealBody(window[1]) - GetCandleAverage(CandleSettingType.Far' _farPeriodTotal[1]' window[1]) &&                  // not short real body                  GetRealBody(input) > GetCandleAverage(CandleSettingType.BodyShort' _bodyShortPeriodTotal' input)
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,Reset,The following statement contains a magic number: _shadowVeryShortPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,Reset,The following statement contains a magic number: _nearPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,ThreeWhiteSoldiers,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\ThreeWhiteSoldiers.cs,Reset,The following statement contains a magic number: _farPeriodTotal = new decimal[3];
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: Samples >= Period - _bodyLongAveragePeriod - 2 && Samples < Period - 2
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      opening within 2nd rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  //      closing within 1st rb                  input.Close > window[2].Open && input.Close < window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      opening within 2nd rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  //      closing within 1st rb                  input.Close > window[2].Open && input.Close < window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      opening within 2nd rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  //      closing within 1st rb                  input.Close > window[2].Open && input.Close < window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      opening within 2nd rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  //      closing within 1st rb                  input.Close > window[2].Open && input.Close < window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      opening within 2nd rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  //      closing within 1st rb                  input.Close > window[2].Open && input.Close < window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: GetCandleColor(window[2]) == CandleColor.White &&                  //      long                  GetRealBody(window[2]) > GetCandleAverage(CandleSettingType.BodyLong' _bodyLongPeriodTotal' window[2]) &&                  // 2nd: black                  GetCandleColor(window[1]) == CandleColor.Black &&                  //      gapping up                  GetRealBodyGapUp(window[1]' window[2]) &&                  // 3rd: black                  GetCandleColor(input) == CandleColor.Black &&                  //      opening within 2nd rb                  input.Open < window[1].Open && input.Open > window[1].Close &&                  //      closing within 1st rb                  input.Close > window[2].Open && input.Close < window[2].Close
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Magic Number,QuantConnect.Indicators.CandlestickPatterns,TwoCrows,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\TwoCrows.cs,ComputeNextValue,The following statement contains a magic number: _bodyLongPeriodTotal += GetCandleRange(CandleSettingType.BodyLong' window[2]) -                                      GetCandleRange(CandleSettingType.BodyLong' window[2 + _bodyLongAveragePeriod]);
Duplicate Code,QuantConnect.Indicators.CandlestickPatterns,HikkakeModified,C:\research\architectureSmells\repos\QuantConnect_Lean\Indicators\CandlestickPatterns\HikkakeModified.cs,ComputeNextValue,The method contains a code clone-set at the following line numbers (starting from the method definition): ((12' 31)' (57' 76))
