Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GenerateOrders,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,Cyclomatic complexity of the method is 21
Complex Method,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Liquidate,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ResolveConsolidator,Cyclomatic complexity of the method is 9
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddSecurity,The method has 5 parameters. Parameters: securityType' symbol' resolution' fillDataForward' extendedMarketHours
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddSecurity,The method has 6 parameters. Parameters: securityType' symbol' resolution' fillDataForward' leverage' extendedMarketHours
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddSecurity,The method has 7 parameters. Parameters: securityType' symbol' resolution' market' fillDataForward' leverage' extendedMarketHours
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddEquity,The method has 6 parameters. Parameters: ticker' resolution' market' fillDataForward' leverage' extendedMarketHours
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddOption,The method has 5 parameters. Parameters: underlying' resolution' market' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddFuture,The method has 5 parameters. Parameters: symbol' resolution' market' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddForex,The method has 5 parameters. Parameters: ticker' resolution' market' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddCfd,The method has 5 parameters. Parameters: ticker' resolution' market' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddCrypto,The method has 5 parameters. Parameters: ticker' resolution' market' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The method has 5 parameters. Parameters: symbol' resolution' timeZone' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddSecurity,The method has 7 parameters. Parameters: securityType' ticker' resolution' market' fillDataForward' leverage' extendedMarketHours
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The method has 6 parameters. Parameters: symbols' start' end' resolution' fillForward' extendedMarket
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CreateDateRangeHistoryRequests,The method has 6 parameters. Parameters: symbols' startAlgoTz' endAlgoTz' resolution' fillForward' extendedMarket
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CreateHistoryRequest,The method has 5 parameters. Parameters: security' subscription' startAlgoTz' endAlgoTz' resolution
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The method has 6 parameters. Parameters: type' symbol' resolution' timeZone' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The method has 6 parameters. Parameters: dataType' symbol' resolution' timeZone' fillDataForward' leverage
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 6 parameters. Parameters: securityType' name' resolution' market' universeSettings' pySelector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 5 parameters. Parameters: T' name' resolution' universeSettings' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 6 parameters. Parameters: T' securityType' name' resolution' market' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 7 parameters. Parameters: T' securityType' name' resolution' market' universeSettings' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 7 parameters. Parameters: dataType' securityType' name' resolution' market' universeSettings' pySelector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Plot,The method has 5 parameters. Parameters: chart' first' second' third' fourth
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Plot,The method has 5 parameters. Parameters: chart' first' second' third' fourth
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Plot,The method has 5 parameters. Parameters: chart' first' second' third' fourth
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PlotIndicator,The method has 5 parameters. Parameters: chart' first' second' third' fourth
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PlotIndicator,The method has 6 parameters. Parameters: chart' waitForReady' first' second' third' fourth
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,FilteredIdentity,The method has 5 parameters. Parameters: symbol' resolution' selector' filter' fieldName
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,FilteredIdentity,The method has 5 parameters. Parameters: symbol' resolution' selector' filter' fieldName
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The method has 5 parameters. Parameters: type' tickers' start' end' resolution
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The method has 5 parameters. Parameters: type' symbol' start' end' resolution
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,StopLimitOrder,The method has 5 parameters. Parameters: symbol' quantity' stopPrice' limitPrice' tag
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,StopLimitOrder,The method has 5 parameters. Parameters: symbol' quantity' stopPrice' limitPrice' tag
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,StopLimitOrder,The method has 5 parameters. Parameters: symbol' quantity' stopPrice' limitPrice' tag
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Order,The method has 5 parameters. Parameters: symbol' quantity' type' asynchronous' tag
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CreateSubmitOrderRequest,The method has 7 parameters. Parameters: orderType' security' quantity' tag' properties' stopPrice' limitPrice
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ABANDS,The method has 6 parameters. Parameters: symbol' period' width' movingAverageType' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ADOSC,The method has 5 parameters. Parameters: symbol' fastPeriod' slowPeriod' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ALMA,The method has 6 parameters. Parameters: symbol' period' sigma' offset' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,APO,The method has 6 parameters. Parameters: symbol' fastPeriod' slowPeriod' movingAverageType' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AROON,The method has 5 parameters. Parameters: symbol' upPeriod' downPeriod' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ATR,The method has 5 parameters. Parameters: symbol' period' type' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,BB,The method has 6 parameters. Parameters: symbol' period' k' movingAverageType' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CCI,The method has 5 parameters. Parameters: symbol' period' movingAverageType' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,DCH,The method has 5 parameters. Parameters: symbol' upperPeriod' lowerPeriod' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,FilteredIdentity,The method has 5 parameters. Parameters: symbol' resolution' selector' filter' fieldName
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,FilteredIdentity,The method has 5 parameters. Parameters: symbol' resolution' selector' filter' fieldName
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,FRAMA,The method has 5 parameters. Parameters: symbol' period' longPeriod' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ICHIMOKU,The method has 8 parameters. Parameters: symbol' tenkanPeriod' kijunPeriod' senkouAPeriod' senkouBPeriod' senkouADelayPeriod' senkouBDelayPeriod' resolution
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,KCH,The method has 6 parameters. Parameters: symbol' period' k' movingAverageType' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,MACD,The method has 7 parameters. Parameters: symbol' fastPeriod' slowPeriod' signalPeriod' type' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,MASS,The method has 5 parameters. Parameters: symbol' emaPeriod' sumPeriod' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,MOMERSION,The method has 5 parameters. Parameters: symbol' minPeriod' fullPeriod' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PPO,The method has 6 parameters. Parameters: symbol' fastPeriod' slowPeriod' movingAverageType' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PSAR,The method has 6 parameters. Parameters: symbol' afStart' afIncrement' afMax' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,RC,The method has 5 parameters. Parameters: symbol' period' k' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,RSI,The method has 5 parameters. Parameters: symbol' period' movingAverageType' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,STO,The method has 5 parameters. Parameters: symbol' period' kPeriod' dPeriod' resolution
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,SWISS,The method has 6 parameters. Parameters: symbol' period' delta' tool' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,T3,The method has 5 parameters. Parameters: symbol' period' volumeFactor' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ULTOSC,The method has 6 parameters. Parameters: symbol' period1' period2' period3' resolution' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 5 parameters. Parameters: securityType' name' resolution' market' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 5 parameters. Parameters: securityType' name' resolution' market' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 6 parameters. Parameters: securityType' name' resolution' market' universeSettings' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 6 parameters. Parameters: securityType' name' resolution' market' universeSettings' selector
Long Parameter List,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The method has 6 parameters. Parameters: securityType' name' resolution' market' universeSettings' selector
Long Statement,QuantConnect.Algorithm,DollarVolumeUniverseDefinitions,C:\repos\QuantConnect_Lean\Algorithm\DollarVolumeUniverseDefinitions.cs,Top,The length of the statement  "            var config = new SubscriptionDataConfig(typeof(CoarseFundamental)' symbol' Resolution.Daily' TimeZones.NewYork' TimeZones.NewYork' false' false' true); " is 151.
Long Statement,QuantConnect.Algorithm,DollarVolumeUniverseDefinitions,C:\repos\QuantConnect_Lean\Algorithm\DollarVolumeUniverseDefinitions.cs,Bottom,The length of the statement  "            var config = new SubscriptionDataConfig(typeof(CoarseFundamental)' symbol' Resolution.Daily' TimeZones.NewYork' TimeZones.NewYork' false' false' true); " is 151.
Long Statement,QuantConnect.Algorithm,DollarVolumeUniverseDefinitions,C:\repos\QuantConnect_Lean\Algorithm\DollarVolumeUniverseDefinitions.cs,Percentile,The length of the statement  "            var config = new SubscriptionDataConfig(typeof(CoarseFundamental)' symbol' Resolution.Daily' TimeZones.NewYork' TimeZones.NewYork' false' false' true); " is 151.
Long Statement,QuantConnect.Algorithm,DollarVolumeUniverseDefinitions,C:\repos\QuantConnect_Lean\Algorithm\DollarVolumeUniverseDefinitions.cs,Percentile,The length of the statement  "            var symbol = Symbol.Create("us-equity-dollar-volume-percentile-" + lowerPercentile + "-" + upperPercentile' SecurityType.Equity' Market.USA); " is 141.
Long Statement,QuantConnect.Algorithm,DollarVolumeUniverseDefinitions,C:\repos\QuantConnect_Lean\Algorithm\DollarVolumeUniverseDefinitions.cs,Percentile,The length of the statement  "            var config = new SubscriptionDataConfig(typeof(CoarseFundamental)' symbol' Resolution.Daily' TimeZones.NewYork' TimeZones.NewYork' false' false' true); " is 151.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PostInitialize,The length of the statement  "                    Debug($"Warning: The {underlying.ToString()} equity security was set the raw price normalization mode to work with options."); " is 126.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,OnData,The length of the statement  "            // as a default implementation' let's look for and call OnData(Slice) just in case a user forgot to use the override keyword " is 124.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,SetTimeZone,The length of the statement  "                throw new ArgumentException(string.Format("TimeZone with id '{0}' was not found. For a complete list of time zones please visit: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones"' timeZone)); " is 202.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddSecurity,The length of the statement  "                var security = SecurityManager.CreateSecurity(Portfolio' SubscriptionManager' _marketHoursDatabase' _symbolPropertiesDatabase' SecurityInitializer' " is 147.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddEquity,The length of the statement  "            return AddSecurity<Equity>(SecurityType.Equity' ticker' resolution' market' fillDataForward' leverage' extendedMarketHours); " is 124.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddOption,The length of the statement  "            var symbolProperties = _symbolPropertiesDatabase.GetSymbolProperties(market' underlying' SecurityType.Option' CashBook.AccountCurrency); " is 136.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddOption,The length of the statement  "                marketHoursEntry.ExchangeHours' marketHoursEntry.DataTimeZone' symbolProperties' SecurityInitializer' canonicalSymbol' resolution' " is 130.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddFuture,The length of the statement  "            var symbolProperties = _symbolPropertiesDatabase.GetSymbolProperties(market' symbol' SecurityType.Future' CashBook.AccountCurrency); " is 132.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddFuture,The length of the statement  "                marketHoursEntry.ExchangeHours' marketHoursEntry.DataTimeZone' symbolProperties' SecurityInitializer' canonicalSymbol' resolution' " is 130.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddFutureContract,The length of the statement  "            var future = (Future)SecurityManager.CreateSecurity(Portfolio' SubscriptionManager' _marketHoursDatabase' _symbolPropertiesDatabase' SecurityInitializer' " is 153.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddOptionContract,The length of the statement  "            var option = (Option)SecurityManager.CreateSecurity(Portfolio' SubscriptionManager' _marketHoursDatabase' _symbolPropertiesDatabase' SecurityInitializer' " is 153.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The length of the statement  "            var symbolProperties = _symbolPropertiesDatabase.GetSymbolProperties(Market.USA' symbol' SecurityType.Base' CashBook.AccountCurrency); " is 134.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The length of the statement  "            var security = SecurityManager.CreateSecurity(typeof(T)' Portfolio' SubscriptionManager' marketHoursDbEntry.ExchangeHours' marketHoursDbEntry.DataTimeZone' " is 155.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The length of the statement  "                symbolProperties' SecurityInitializer' symbolObject' resolution' fillDataForward' leverage' true' false' true' LiveMode); " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddSecurity,The length of the statement  "            var security = SecurityManager.CreateSecurity(Portfolio' SubscriptionManager' _marketHoursDatabase' _symbolPropertiesDatabase' SecurityInitializer' " is 147.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CreateBenchmarkSecurity,The length of the statement  "            return SecurityManager.CreateSecurity(Portfolio' SubscriptionManager' _marketHoursDatabase' _symbolPropertiesDatabase' SecurityInitializer' _benchmarkSymbol' resolution' true' 1m' false' true' false' LiveMode); " is 210.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "                Error("Calling History<TradeBar> method on a Forex or CFD security will return an empty result. Please use the generic version with QuoteBar type parameter."); " is 159.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "            return History(new[] { symbol }' start' Time.RoundDown((resolution ?? security.Resolution).ToTimeSpan())' resolution).Get(symbol).Memoize(); " is 140.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "            if (resolution == Resolution.Tick) throw new ArgumentException("History functions that accept a 'periods' parameter can not be used with Resolution.Tick"); " is 155.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "                throw new ArgumentException("The specified security is not of the requested type. Symbol: " + symbol.ToString() + " Requested Type: " + requestedType.Name + " Actual Type: " + actualType); " is 188.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "            return History<T>(symbol' start' Time.RoundDown((resolution ?? security.Resolution).ToTimeSpan())' resolution).Memoize(); " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "                throw new ArgumentException("The specified security is not of the requested type. Symbol: " + symbol.ToString() + " Requested Type: " + requestedType.Name + " Actual Type: " + actualType); " is 188.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "                Error("Calling History<TradeBar> method on a Forex or CFD security will return an empty result. Please use the generic version with QuoteBar type parameter."); " is 159.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "                Error("Calling History<TradeBar> method on a Forex or CFD security will return an empty result. Please use the generic version with QuoteBar type parameter."); " is 159.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "            if (resolution == Resolution.Tick) throw new ArgumentException("History functions that accept a 'periods' parameter can not be used with Resolution.Tick"); " is 155.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GetStartTimeAlgoTz,The length of the statement  "            var localStartTime = QuantConnect.Time.GetStartTimeForTradeBars(security.Exchange.Hours' UtcTime.ConvertFromUtc(security.Exchange.TimeZone)' timeSpan' periods' security.IsExtendedMarketHours); " is 192.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GetLastKnownPrice,The length of the statement  "                MarketHoursDatabase.FromDataFolder().GetDataTimeZone(security.Symbol.ID.Market' security.Symbol' security.Symbol.SecurityType)' " is 127.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GetLastKnownPrice,The length of the statement  "                subscriptionDataConfig == null ? LeanData.GetCommonTickTypeForCommonDataTypes(typeof(TradeBar)' security.Type) : subscriptionDataConfig.TickType " is 144.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GetStartTimeAlgoTzForSecurity,The length of the statement  "            var localStartTime = QuantConnect.Time.GetStartTimeForTradeBars(security.Exchange.Hours' UtcTime.ConvertFromUtc(security.Exchange.TimeZone)' timeSpan' periods' security.IsExtendedMarketHours); " is 192.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CreateHistoryRequest,The length of the statement  "            var dataType = subscription.IsCustomData ? subscription.Type : LeanData.GetDataType(resolution.Value' subscription.TickType); " is 125.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CreateHistoryRequest,The length of the statement  "            var request = new HistoryRequest(subscription' security.Exchange.Hours' startAlgoTz.ConvertToUtc(TimeZone)' endAlgoTz.ConvertToUtc(TimeZone)) " is 141.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The length of the statement  "            var symbolProperties = _symbolPropertiesDatabase.GetSymbolProperties(Market.USA' symbol' SecurityType.Base' CashBook.AccountCurrency); " is 134.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The length of the statement  "            var security = SecurityManager.CreateSecurity(dataType' Portfolio' SubscriptionManager' marketHoursDbEntry.ExchangeHours' marketHoursDbEntry.DataTimeZone' " is 154.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddData,The length of the statement  "                symbolProperties' SecurityInitializer' symbolObject' resolution' fillDataForward' leverage' true' false' true' LiveMode); " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The length of the statement  "            var config = new SubscriptionDataConfig(dataType' symbol' resolution' dataTimeZone' exchangeTimeZone' false' false' true' true' isFilteredSubscription: false); " is 159.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "                throw new ArgumentException("The specified security is not of the requested type. Symbol: " + symbol.ToString() + " Requested Type: " + requestedType.Name + " Actual Type: " + actualType); " is 188.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,History,The length of the statement  "            if (resolution == Resolution.Tick) throw new ArgumentException("History functions that accept a 'periods' parameter can not be used with Resolution.Tick"); " is 155.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GetIndicatorArray,The length of the statement  "                    throw new Exception("QCAlgorithm.GetIndicatorArray(). All indicators must be of the same type: data point' bar or tradebar."); " is 126.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,MarketOnOpenOrder,The length of the statement  "            var request = CreateSubmitOrderRequest(OrderType.MarketOnOpen' security' quantity' tag' DefaultOrderProperties?.Clone()); " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,MarketOnCloseOrder,The length of the statement  "            var request = CreateSubmitOrderRequest(OrderType.MarketOnClose' security' quantity' tag' DefaultOrderProperties?.Clone()); " is 122.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,LimitOrder,The length of the statement  "            var request = CreateSubmitOrderRequest(OrderType.Limit' security' quantity' tag' limitPrice: limitPrice' properties: DefaultOrderProperties?.Clone()); " is 150.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,StopMarketOrder,The length of the statement  "            var request = CreateSubmitOrderRequest(OrderType.StopMarket' security' quantity' tag' stopPrice: stopPrice' properties: DefaultOrderProperties?.Clone()); " is 153.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,StopLimitOrder,The length of the statement  "            var request = CreateSubmitOrderRequest(OrderType.StopLimit' security' quantity' tag' stopPrice: stopPrice' limitPrice: limitPrice' properties: DefaultOrderProperties?.Clone()); " is 176.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ExerciseOption,The length of the statement  "            var request = CreateSubmitOrderRequest(OrderType.OptionExercise' option' quantity' tag' DefaultOrderProperties?.Clone()); " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GenerateOrders,The length of the statement  "                        var error = string.Format("Couldn't find the option contract in algorithm securities list. Underlying: {0}' option {1}' strike {2}' expiration: {3}"' " is 149.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GenerateOrders,The length of the statement  "                                strategy.Underlying.ToString()' optionLeg.Right.ToString()' optionLeg.Strike.ToString()' optionLeg.Expiration.ToString()); " is 122.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GenerateOrders,The length of the statement  "                            throw new InvalidOperationException("Order type is not supported in option strategy: " + optionLeg.OrderType.ToString()); " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GenerateOrders,The length of the statement  "                        var error = string.Format("Couldn't find the option contract underlying in algorithm securities list. Underlying: {0}"' strategy.Underlying.ToString()); " is 152.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GenerateOrders,The length of the statement  "                            var limitOrder = LimitOrder(strategy.Underlying' underlyingLeg.Quantity * strategyQuantity' underlyingLeg.OrderPrice' tag: strategyTag); " is 136.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GenerateOrders,The length of the statement  "                            throw new InvalidOperationException("Order type is not supported in option strategy: " + underlyingLeg.OrderType.ToString()); " is 125.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.MissingSecurity' "You haven't requested " + request.Symbol.ToString() + " data. Add this with AddSecurity() in the Initialize() Method."); " is 197.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "            if (request.Quantity == 0 || request.Symbol == null || request.Symbol == QuantConnect.Symbol.Empty || Math.Abs(request.Quantity) < security.SymbolProperties.LotSize) " is 165.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.NonTradableSecurity' "The security with symbol '" + request.Symbol.ToString() + "' is marked as non-tradable."); " is 171.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.ExchangeNotOpen' request.OrderType + " order and exchange not open."); " is 129.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.ExchangeNotOpen' request.OrderType + " order and exchange not open."); " is 129.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.SecurityPriceZero' request.Symbol.ToString() + ": asset price is $0. If using custom data make sure you've set the 'Value' property."); " is 194.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.QuoteCurrencyRequired' request.Symbol.Value + ": requires " + quoteCurrency + " in the cashbook to trade."); " is 167.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.ConversionRateZero' request.Symbol.Value + ": requires " + quoteCurrency + " to have a non-zero conversion rate. This can be caused by lack of data."); " is 210.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                    return OrderResponse.Error(request' OrderResponseErrorCode.ForexBaseAndQuoteCurrenciesRequired' request.Symbol.Value + ": requires " + baseCurrency + " and " + quoteCurrency + " in the cashbook to trade."); " is 206.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                    return OrderResponse.Error(request' OrderResponseErrorCode.ForexConversionRateZero' request.Symbol.Value + ": requires " + baseCurrency + " and " + quoteCurrency + " to have non-zero conversion rates. This can be caused by lack of data."); " is 239.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.SecurityHasNoData' "There is no data for this symbol yet' please check the security.HasData flag to ensure there is at least one data point."); " is 202.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.ExceededMaximumOrders' string.Format("You have exceeded maximum number of orders ({0})' for unlimited orders upgrade your account."' _maxOrders)); " is 205.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                    return OrderResponse.Error(request' OrderResponseErrorCode.NonExercisableSecurity' "The security with symbol '" + request.Symbol.ToString() + "' is not exercisable."); " is 167.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                    return OrderResponse.Error(request' OrderResponseErrorCode.UnsupportedRequestType' "The security with symbol '" + request.Symbol.ToString() + "' has a short option position. Only long option positions are exercisable."); " is 220.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                    return OrderResponse.Error(request' OrderResponseErrorCode.UnsupportedRequestType' "Cannot exercise more contracts of '" + request.Symbol.ToString() + "' than is currently available in the portfolio. "); " is 203.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                    // this is already too late to submit one of these orders' so make the user do it at the 3:43->3:44 bar so it's submitted " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The length of the statement  "                    return OrderResponse.Error(request' OrderResponseErrorCode.MarketOnCloseOrderTooLate' "MarketOnClose orders must be placed with at least a 16 minute buffer before market close."); " is 179.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,CreateSubmitOrderRequest,The length of the statement  "            return new SubmitOrderRequest(orderType' security.Type' security.Symbol' quantity' stopPrice' limitPrice' UtcTime' tag' properties); " is 132.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ICHIMOKU,The length of the statement  "            var ichimoku = new IchimokuKinkoHyo(name' tenkanPeriod' kijunPeriod' senkouAPeriod' senkouBPeriod' senkouADelayPeriod' senkouBDelayPeriod); " is 139.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,GetSubscription,The length of the statement  "                throw new Exception("Please register to receive data for symbol '" + symbol.ToString() + "' using the AddSecurity() function."); " is 128.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ResolveConsolidator,The length of the statement  "                throw new ArgumentException(string.Format("Unable to create {0} {1} consolidator because {0} is registered for {2} data. " + " is 124.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ResolveConsolidator,The length of the statement  "                throw new ArgumentException(string.Format("Unable to create {0} consolidator because {0} is registered for {1} data. " + " is 120.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ResolveConsolidator,The length of the statement  "            // we use IsAssignableFrom instead of IsSubclassOf so that we can account for types that are able to be cast to TradeBar " is 120.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,ResolveConsolidator,The length of the statement  "            // we use IsAssignableFrom instead of IsSubclassOf so that we can account for types that are able to be cast to QuoteBar " is 120.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Plot,The length of the statement  "                throw new Exception("Algorithm.Plot(): 'Equity'' 'Daily Performance' and 'Meta' are reserved chart names created for all charts."); " is 131.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The length of the statement  "            var config = new SubscriptionDataConfig(typeof(T)' symbol' resolution' dataTimeZone' exchangeTimeZone' false' false' true' true' isFilteredSubscription: false); " is 160.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The length of the statement  "            var config = new SubscriptionDataConfig(typeof(T)' symbol' resolution' dataTimeZone' exchangeTimeZone' false' false' true' true' isFilteredSubscription: false); " is 160.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The length of the statement  "            AddUniverse(new FuncUniverse(config' universeSettings' SecurityInitializer' d => selector(d.OfType<T>()).Select(x => QuantConnect.Symbol.Create(x' securityType' market)))); " is 172.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddUniverse,The length of the statement  "            var config = new SubscriptionDataConfig(typeof(CoarseFundamental)' symbol' resolution' dataTimeZone' exchangeTimeZone' false' false' true' isFilteredSubscription: false); " is 170.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddToUserDefinedUniverse,The length of the statement  "                    var securityUniverse = UniverseManager.Values.OfType<UserDefinedUniverse>().FirstOrDefault(x => x.Members.ContainsKey(security.Symbol)); " is 136.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddToUserDefinedUniverse,The length of the statement  "                var uconfig = new SubscriptionDataConfig(subscription' symbol: universeSymbol' isInternalFeed: true' fillForward: false); " is 121.
Long Statement,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,AddToUserDefinedUniverse,The length of the statement  "                    new UniverseSettings(security.Resolution' security.Leverage' security.IsFillDataForward' security.IsExtendedMarketHours' TimeSpan.Zero)' " is 136.
Complex Conditional,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The conditional expression  "request.Quantity == 0 || request.Symbol == null || request.Symbol == QuantConnect.Symbol.Empty || Math.Abs(request.Quantity) < security.SymbolProperties.LotSize"  is complex.
Complex Conditional,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Liquidate,The conditional expression  "orders.Count == 1 && quantity != 0 && orders[0].Quantity == -quantity && orders[0].Type == OrderType.Market"  is complex.
Complex Conditional,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Plot,The conditional expression  "(chart == "Strategy Equity" && series == "Equity") || (chart == "Daily Performance") || (chart == "Meta")"  is complex.
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,QCAlgorithm,The following statement contains a magic number: _startDate = new DateTime(1998' 01' 01);
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PostInitialize,The following statement contains a magic number: if (Benchmark == null)              {                  if (_benchmarkSymbol != null && _benchmarkSymbol != QuantConnect.Symbol.Empty)                  {                      // if the requested benchmark symbol wasn't already added' then add it now                      // we do a simple compare here for simplicity' also it avoids confusion over                      // the desired market.                      Security security;                      if (!Securities.TryGetValue(_benchmarkSymbol' out security))                      {                          // add the security as an internal feed so the algorithm doesn't receive the data                          security = CreateBenchmarkSecurity();                          AddToUserDefinedUniverse(security);                      }                        // just return the current price                      Benchmark = new SecurityBenchmark(security);                  }                  else                  {                      var start = StartDate;                      var startingCapital = Portfolio.TotalPortfolioValue;                      Benchmark = new FuncBenchmark(dt =>                      {                          var years = (dt - start).TotalDays / 365.25;                          return startingCapital * (decimal) Math.Exp(0.02 * years);                      });                  }              }
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PostInitialize,The following statement contains a magic number: if (Benchmark == null)              {                  if (_benchmarkSymbol != null && _benchmarkSymbol != QuantConnect.Symbol.Empty)                  {                      // if the requested benchmark symbol wasn't already added' then add it now                      // we do a simple compare here for simplicity' also it avoids confusion over                      // the desired market.                      Security security;                      if (!Securities.TryGetValue(_benchmarkSymbol' out security))                      {                          // add the security as an internal feed so the algorithm doesn't receive the data                          security = CreateBenchmarkSecurity();                          AddToUserDefinedUniverse(security);                      }                        // just return the current price                      Benchmark = new SecurityBenchmark(security);                  }                  else                  {                      var start = StartDate;                      var startingCapital = Portfolio.TotalPortfolioValue;                      Benchmark = new FuncBenchmark(dt =>                      {                          var years = (dt - start).TotalDays / 365.25;                          return startingCapital * (decimal) Math.Exp(0.02 * years);                      });                  }              }
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PostInitialize,The following statement contains a magic number: foreach (var option in Securities.Select(x => x.Value).OfType<Option>())              {                  var underlying = option.Symbol.Underlying;                  Security equity;                  if (!Securities.TryGetValue(underlying' out equity))                  {                      // if it wasn't manually added' add a subscription for underlying updates                      equity = AddEquity(underlying.Value' option.Resolution' underlying.ID.Market' false);                  }                  // In the options trading' the strike price' the options settlement and exercise are                  // all based on the raw price of the underlying asset instead of the adjusted price.                   // In order to select the accurate contracts' we need to set                  // the data normalization mode of the underlying asset to be raw                  else if (equity.DataNormalizationMode != DataNormalizationMode.Raw)                  {                      Debug($"Warning: The {underlying.ToString()} equity security was set the raw price normalization mode to work with options.");                  }                  equity.SetDataNormalizationMode(DataNormalizationMode.Raw);                    // set the underlying property on the option chain                  option.Underlying = equity;                    // check for the null volatility model and update it                  if (equity.VolatilityModel == VolatilityModel.Null)                  {                      const int periods = 30;                      equity.VolatilityModel = new StandardDeviationOfReturnsVolatilityModel(periods);                  }              }
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,SetStartDate,The following statement contains a magic number: if (start < (new DateTime(1900' 01' 01)))              {                  throw new Exception("Please select a start date after January 1st' 1900.");              }
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PlotIndicator,The following statement contains a magic number: PlotIndicator(chart' array[0]' array[1]' array[2]' array[3]);
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PlotIndicator,The following statement contains a magic number: PlotIndicator(chart' array[0]' array[1]' array[2]' array[3]);
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PlotIndicator,The following statement contains a magic number: PlotIndicator(chart' waitForReady' array[0]' array[1]' array[2]' array[3]);
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PlotIndicator,The following statement contains a magic number: PlotIndicator(chart' waitForReady' array[0]' array[1]' array[2]' array[3]);
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,PreOrderChecksImpl,The following statement contains a magic number: if (request.OrderType == OrderType.MarketOnClose)              {                  var nextMarketClose = security.Exchange.Hours.GetNextMarketClose(security.LocalTime' false);                  // must be submitted with at least 10 minutes in trading day' add buffer allow order submission                  var latestSubmissionTime = nextMarketClose.AddMinutes(-15.50);                  if (!security.Exchange.ExchangeOpen || Time > latestSubmissionTime)                  {                      // tell the user we require a 16 minute buffer' on minute data in live a user will receive the 3:44->3:45 bar at 3:45'                      // this is already too late to submit one of these orders' so make the user do it at the 3:43->3:44 bar so it's submitted                      // to the brokerage before 3:45.                      return OrderResponse.Error(request' OrderResponseErrorCode.MarketOnCloseOrderTooLate' "MarketOnClose orders must be placed with at least a 16 minute buffer before market close.");                  }              }
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,STO,The following statement contains a magic number: return STO(symbol' period' period' 3' resolution);
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Plot,The following statement contains a magic number: if (!thisChart.Series.ContainsKey(series))              {                  //Number of series in total.                  var seriesCount = (from x in _charts.Values select x.Series.Count).Sum();                    if (seriesCount > 10)                  {                      Error("Exceeded maximum series count: Each backtest can have up to 10 series in total.");                      return;                  }                    //If we don't have the series' create it:                  thisChart.AddSeries(new Series(series' SeriesType.Line' 0' "$"));              }
Magic Number,QuantConnect.Algorithm,QCAlgorithm,C:\repos\QuantConnect_Lean\Algorithm\QCAlgorithm.cs,Plot,The following statement contains a magic number: if (thisSeries.Values.Count < 4000 || _liveMode)              {                  thisSeries.AddPoint(UtcTime' value' _liveMode);              }              else              {                  Debug("Exceeded maximum points per chart' data skipped.");              }
