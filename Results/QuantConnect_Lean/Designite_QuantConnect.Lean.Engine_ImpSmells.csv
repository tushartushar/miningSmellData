Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The method has 534 lines of code.
Long Method,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Stream,The method has 180 lines of code.
Long Method,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The method has 325 lines of code.
Long Method,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateDataSubscription,The method has 183 lines of code.
Long Method,QuantConnect.Lean.Engine.DataFeeds,SubscriptionSynchronizer,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionSynchronizer.cs,Sync,The method has 131 lines of code.
Long Method,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,Initialize,The method has 118 lines of code.
Long Method,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,MoveNext,The method has 111 lines of code.
Long Method,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The method has 244 lines of code.
Long Method,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,ApplyUniverseSelection,The method has 230 lines of code.
Long Method,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The method has 205 lines of code.
Long Method,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,ProcessSynchronousEvents,The method has 110 lines of code.
Long Method,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,The method has 213 lines of code.
Long Method,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The method has 103 lines of code.
Long Method,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,The method has 105 lines of code.
Long Method,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleOrderEvent,The method has 119 lines of code.
Complex Method,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,Cyclomatic complexity of the method is 67
Complex Method,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Stream,Cyclomatic complexity of the method is 28
Complex Method,QuantConnect.Lean.Engine,LeanEngineAlgorithmHandlers,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\LeanEngineAlgorithmHandlers.cs,LeanEngineAlgorithmHandlers,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,Cyclomatic complexity of the method is 16
Complex Method,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,Add,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Lean.Engine.DataFeeds,CollectionSubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\CollectionSubscriptionDataSourceReader.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Lean.Engine.DataFeeds,LiveSynchronizer,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveSynchronizer.cs,StreamData,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Lean.Engine.DataFeeds,TextSubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TextSubscriptionDataSourceReader.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Lean.Engine.DataFeeds,BaseDataExchange,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BaseDataExchange.cs,ConsumeEnumerators,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateDataSubscription,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataSourceReader.cs,ForSource,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,Initialize,Cyclomatic complexity of the method is 19
Complex Method,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,Cyclomatic complexity of the method is 47
Complex Method,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,HandleOptionData,Cyclomatic complexity of the method is 15
Complex Method,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,HandleFuturesData,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,ApplyUniverseSelection,Cyclomatic complexity of the method is 24
Complex Method,QuantConnect.Lean.Engine.DataFeeds.Enumerators,LiveEquityDataSynchronizingEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\LiveEquityDataSynchronizingEnumerator.cs,DataPointEmitted,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Lean.Engine.DataFeeds.Enumerators,PriceScaleFactorEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\PriceScaleFactorEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 18
Complex Method,QuantConnect.Lean.Engine.DataFeeds.Enumerators,BaseDataCollectionAggregatorEnumerator<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\BaseDataCollectionAggregatorEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Lean.Engine.DataFeeds.Enumerators,FillForwardEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\FillForwardEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.Lean.Engine.DataFeeds.Enumerators,SynchronizingEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\SynchronizingEnumerator.cs,GetBruteForceMethod,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.Lean.Engine.HistoricalData,SynchronizingHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SynchronizingHistoryProvider.cs,CreateSliceEnumerableFromSubscriptions,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Lean.Engine.Results,RegressionResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\RegressionResultHandler.cs,ProcessSynchronousEvents,Cyclomatic complexity of the method is 13
Complex Method,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SampleRange,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,ProcessSynchronousEvents,Cyclomatic complexity of the method is 14
Complex Method,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,Cyclomatic complexity of the method is 21
Complex Method,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,ProcessSynchronousEvents,Cyclomatic complexity of the method is 17
Complex Method,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,ProcessSynchronousEvents,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleOrderEvent,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,RoundOrderPrices,Cyclomatic complexity of the method is 8
Long Parameter List,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The method has 9 parameters. Parameters: job' algorithm' synchronizer' transactions' results' realtime' leanManager' alphas' token
Long Parameter List,QuantConnect.Lean.Engine,LeanEngineAlgorithmHandlers,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\LeanEngineAlgorithmHandlers.cs,LeanEngineAlgorithmHandlers,The method has 10 parameters. Parameters: results' setup' dataFeed' transactions' realTime' mapFileProvider' factorFileProvider' dataProvider' alphas' objectStore
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,DataManager,The method has 7 parameters. Parameters: dataFeed' universeSelection' algorithm' timeKeeper' marketHoursDatabase' liveMode' registeredTypesProvider
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,Add,The method has 9 parameters. Parameters: dataType' symbol' resolution' fillForward' extendedMarketHours' isFilteredSubscription' isInternalFeed' isCustomData' dataNormalizationMode
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,Add,The method has 9 parameters. Parameters: symbol' resolution' fillForward' extendedMarketHours' isFilteredSubscription' isInternalFeed' isCustomData' subscriptionDataTypes' dataNormalizationMode
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,NullDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\NullDataFeed.cs,Initialize,The method has 8 parameters. Parameters: algorithm' job' resultHandler' mapFileProvider' factorFileProvider' dataProvider' subscriptionManager' dataFeedTimeProvider
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,Initialize,The method has 8 parameters. Parameters: algorithm' job' resultHandler' mapFileProvider' factorFileProvider' dataProvider' subscriptionManager' dataFeedTimeProvider
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataSourceReader.cs,ForSource,The method has 6 parameters. Parameters: source' dataCacheProvider' config' date' isLiveMode' factory
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,SubscriptionDataReader,The method has 8 parameters. Parameters: config' periodStart' periodFinish' mapFileResolver' factorFileProvider' tradeableDates' isLiveMode' dataCacheProvider
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,TimeSlice,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSlice.cs,TimeSlice,The method has 10 parameters. Parameters: time' dataPointCount' slice' data' securitiesUpdateData' consolidatorUpdateData' customData' securityChanges' universeData' isTimePulse
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,HandleOptionData,The method has 6 parameters. Parameters: algorithmTime' baseData' optionChains' security' sliceFuture' optionUnderlyingUpdates
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,UpdateData<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UpdateData.cs,UpdateData,The method has 5 parameters. Parameters: target' dataType' data' isInternalConfig' containsFillForwardData
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,FileSystemDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\FileSystemDataFeed.cs,Initialize,The method has 8 parameters. Parameters: algorithm' job' resultHandler' mapFileProvider' factorFileProvider' dataProvider' subscriptionManager' dataFeedTimeProvider
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds,IDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\IDataFeed.cs,Initialize,The method has 8 parameters. Parameters: algorithm' job' resultHandler' mapFileProvider' factorFileProvider' dataProvider' subscriptionManager' dataFeedTimeProvider
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators,AuxiliaryDataEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\AuxiliaryDataEnumerator.cs,AuxiliaryDataEnumerator,The method has 7 parameters. Parameters: config' factorFile' mapFile' tradableDateEventProviders' tradableDayNotifier' includeAuxiliaryData' startTime
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators,AuxiliaryDataEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\AuxiliaryDataEnumerator.cs,Initialize,The method has 5 parameters. Parameters: config' factorFile' mapFile' tradableDateEventProviders' startTime
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators,FillForwardEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\FillForwardEnumerator.cs,FillForwardEnumerator,The method has 8 parameters. Parameters: enumerator' exchange' fillForwardResolution' isExtendedMarketHours' subscriptionEndTime' dataResolution' dataTimeZone' subscriptionStartTime
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators,LiveFillForwardEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\LiveFillForwardEnumerator.cs,LiveFillForwardEnumerator,The method has 9 parameters. Parameters: timeProvider' enumerator' exchange' fillForwardResolution' isExtendedMarketHours' subscriptionEndTime' dataResolution' dataTimeZone' subscriptionStartTime
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators,OpenInterestEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\OpenInterestEnumerator.cs,OpenInterestEnumerator,The method has 5 parameters. Parameters: barSize' timeZone' timeProvider' liveMode' newDataAvailableHandler
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators,QuoteBarBuilderEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\QuoteBarBuilderEnumerator.cs,QuoteBarBuilderEnumerator,The method has 5 parameters. Parameters: barSize' timeZone' timeProvider' liveMode' newDataAvailableHandler
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators,TradeBarBuilderEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\TradeBarBuilderEnumerator.cs,TradeBarBuilderEnumerator,The method has 5 parameters. Parameters: barSize' timeZone' timeProvider' liveMode' newDataAvailableHandler
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,CorporateEventEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\CorporateEventEnumeratorFactory.cs,CreateEnumerators,The method has 7 parameters. Parameters: rawDataEnumerator' config' factorFileProvider' tradableDayNotifier' mapFileResolver' includeAuxiliaryData' startTime
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,LiveCustomDataSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\LiveCustomDataSubscriptionEnumeratorFactory.cs,EnumerateDataSourceReader,The method has 6 parameters. Parameters: config' dataProvider' localFrontier' source' localDate' baseDataInstance
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,LiveCustomDataSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\LiveCustomDataSubscriptionEnumeratorFactory.cs,GetSubscriptionDataSourceReader,The method has 5 parameters. Parameters: source' dataCacheProvider' config' date' baseDataInstance
Long Parameter List,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,SubscriptionDataReaderSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\SubscriptionDataReaderSubscriptionEnumeratorFactory.cs,SubscriptionDataReaderSubscriptionEnumeratorFactory,The method has 6 parameters. Parameters: resultHandler' mapFileProvider' factorFileProvider' dataProvider' includeAuxiliaryData' tradableDaysProvider
Long Parameter List,QuantConnect.Lean.Engine.RealTime,LiveTradingRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\LiveTradingRealTimeHandler.cs,Setup,The method has 5 parameters. Parameters: algorithm' job' resultHandler' api' isolatorLimitProvider
Long Parameter List,QuantConnect.Lean.Engine.RealTime,BacktestingRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\BacktestingRealTimeHandler.cs,Setup,The method has 5 parameters. Parameters: algorithm' job' resultHandler' api' isolatorLimitProvider
Long Parameter List,QuantConnect.Lean.Engine.RealTime,IRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\IRealTimeHandler.cs,Setup,The method has 5 parameters. Parameters: algorithm' job' resultHandler' api' isolatorLimitProvider
Long Parameter List,QuantConnect.Lean.Engine.RealTime,ScheduledEventFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\ScheduledEventFactory.cs,EveryDayAt,The method has 5 parameters. Parameters: name' dates' timeOfDay' callback' currentUtcTime
Long Parameter List,QuantConnect.Lean.Engine.RealTime,ScheduledEventFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\ScheduledEventFactory.cs,EveryAlgorithmEndOfDay,The method has 6 parameters. Parameters: algorithm' resultHandler' start' end' endOfDayDelta' currentUtcTime
Long Parameter List,QuantConnect.Lean.Engine.RealTime,ScheduledEventFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\ScheduledEventFactory.cs,EverySecurityEndOfDay,The method has 7 parameters. Parameters: algorithm' resultHandler' security' start' end' endOfDayDelta' currentUtcTime
Long Parameter List,QuantConnect.Lean.Engine.Results,IResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\IResultHandler.cs,Sample,The method has 7 parameters. Parameters: chartName' seriesName' seriesIndex' seriesType' time' value' unit
Long Parameter List,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Sample,The method has 7 parameters. Parameters: chartName' seriesName' seriesIndex' seriesType' time' value' unit
Long Parameter List,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,StoreStatusFile,The method has 6 parameters. Parameters: runtimeStatistics' holdings' chartComplete' profitLoss' serverStatistics' statistics
Long Parameter List,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,SplitPackets,The method has 7 parameters. Parameters: deltaCharts' deltaOrders' holdings' cashbook' deltaStatistics' runtimeStatistics' serverStatistics
Long Parameter List,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Sample,The method has 7 parameters. Parameters: chartName' seriesName' seriesIndex' seriesType' time' value' unit
Long Parameter List,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,GetOpenOrders,The method has 6 parameters. Parameters: algorithm' resultHandler' transactionHandler' brokerage' supportedSecurityTypes' minResolution
Long Parameter List,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The method has 5 parameters. Parameters: start' finish' subscriptionManager' universeManager' controls
Long Parameter List,QuantConnect.Lean.Engine.Setup,SetupHandlerParameters,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\SetupHandlerParameters.cs,SetupHandlerParameters,The method has 8 parameters. Parameters: universeSelection' algorithm' brokerage' algorithmNodePacket' resultHandler' transactionHandler' realTimeHandler' objectStore
Long Parameter List,QuantConnect.Lean.Engine.Storage,LocalObjectStore,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Storage\LocalObjectStore.cs,Initialize,The method has 5 parameters. Parameters: algorithmName' userId' projectId' userToken' controls
Long Identifier,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,ProcessSplitSymbols,The length of the parameter latestMarketOnCloseTimeRoundedDownByResolution is 46.
Long Identifier,QuantConnect.Lean.Engine.Alphas,ChartingInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\ChartingInsightManagerExtension.cs,,The length of the parameter _lastInsightCountSampleDateUtc is 30.
Long Identifier,QuantConnect.Lean.Engine.Alphas,ChartingInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\ChartingInsightManagerExtension.cs,,The length of the parameter _nextChartSampleAlgorithmTimeUtc is 32.
Long Identifier,QuantConnect.Lean.Engine.Alphas,ChartingInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\ChartingInsightManagerExtension.cs,,The length of the parameter _totalInsightCountPerSymbolChart is 32.
Long Identifier,QuantConnect.Lean.Engine.Alphas,ChartingInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\ChartingInsightManagerExtension.cs,,The length of the parameter _insightScoreSeriesByScoreType is 30.
Long Identifier,QuantConnect.Lean.Engine.Alphas,StatisticsInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\StatisticsInsightManagerExtension.cs,OnInsightClosed,The length of the parameter insightValueFactoredByTradableVolume is 36.
Long Identifier,QuantConnect.Lean.Engine.Alphas,AlphaResultPacketSender,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\DefaultAlphaHandler.cs,AlphaResultPacketSender,The length of the parameter maximumNumberOfInsightsPerPacket is 32.
Long Identifier,QuantConnect.Lean.Engine.Alphas,AlphaResultPacketSender,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\DefaultAlphaHandler.cs,,The length of the parameter _maximumNumberOfInsightsPerPacket is 33.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,CurrencySubscriptionDataConfigManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\CurrencySubscriptionDataConfigManager.cs,,The length of the parameter _toBeAddedCurrencySubscriptionDataConfigs is 41.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,CurrencySubscriptionDataConfigManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\CurrencySubscriptionDataConfigManager.cs,,The length of the parameter _addedCurrencySubscriptionDataConfigs is 37.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,CurrencySubscriptionDataConfigManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\CurrencySubscriptionDataConfigManager.cs,,The length of the parameter _pendingSubscriptionDataConfigs is 31.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,,The length of the parameter _subscriptionManagerSubscriptions is 33.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,SubscriptionSynchronizer,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionSynchronizer.cs,Sync,The length of the parameter universeDataForTimeSliceCreate is 30.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,,The length of the parameter _subscriptionFactoryEnumerator is 30.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,,The length of the parameter _currencySubscriptionDataConfigManager is 38.
Long Identifier,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,,The length of the parameter _anyDoesNotHaveFundamentalDataWarningLogged is 43.
Long Identifier,QuantConnect.Lean.Engine.HistoricalData,SubscriptionDataReaderHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SubscriptionDataReaderHistoryProvider.cs,,The length of the parameter _parallelHistoryRequestsEnabled is 31.
Long Identifier,QuantConnect.Lean.Engine.RealTime,BacktestingRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\BacktestingRealTimeHandler.cs,,The length of the parameter _sortingScheduledEventsRequired is 31.
Long Identifier,QuantConnect.Lean.Engine.Results,RegressionResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\RegressionResultHandler.cs,,The length of the parameter _lastAlphaRuntimeStatisticsDate is 31.
Long Identifier,QuantConnect.Lean.Engine.Results,RegressionResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\RegressionResultHandler.cs,,The length of the parameter _currentAlphaRuntimeStatistics is 30.
Long Identifier,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,,The length of the parameter _chartSeriesExceededDataPoints is 30.
Long Identifier,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,The length of the parameter hasSufficientBuyingPowerResult is 30.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The length of the statement  "                    Log.Error($"AlgorithmManager.Run(): Algorithm state changed to {_algorithm.Status} at {timeSlice.Time.ToStringInvariant()}"); " is 125.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The length of the statement  "                    Log.Trace($"AlgorithmManager.Run(): Algorithm encountered a runtime error at {timeSlice.Time.ToStringInvariant()}. Error: {algorithm.RunTimeError}"); " is 149.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The length of the statement  "                            Log.Trace($"AlgorithmManager.Run(): {algorithm.Time}: Pre-Split for {split}. Security Price: {security.Price} Holdings: {security.Holdings.Quantity}"); " is 151.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The length of the statement  "                            Log.Trace($"AlgorithmManager.Run(): {algorithm.Time}: Post-Split for {split}. Security Price: {security.Price} Holdings: {security.Holdings.Quantity}"); " is 152.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The length of the statement  "                    if (hasOnDataTradeBars && timeSlice.Slice.Bars.Count > 0) methodInvokers[typeof(TradeBars)](algorithm' timeSlice.Slice.Bars); " is 125.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The length of the statement  "                    if (hasOnDataQuoteBars && timeSlice.Slice.QuoteBars.Count > 0) methodInvokers[typeof(QuoteBars)](algorithm' timeSlice.Slice.QuoteBars); " is 135.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The length of the statement  "                    if (hasOnDataOptionChains && timeSlice.Slice.OptionChains.Count > 0) methodInvokers[typeof(OptionChains)](algorithm' timeSlice.Slice.OptionChains); " is 147.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Stream,The length of the statement  "                    Log.Trace($"AlgorithmManager.Stream(): WarmupHistoryRequest: {request.Symbol}: Start: {request.StartTimeUtc} End: {request.EndTimeUtc} Resolution: {request.Resolution}"); " is 170.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Stream,The length of the statement  "                        timeSlice = timeSliceFactory.Create(slice.Time.ConvertToUtc(timeZone)' paired' SecurityChanges.None' new Dictionary<Universe' BaseDataCollection>()); " is 149.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Stream,The length of the statement  "                            var percent = (int)(100 * (timeSlice.Time.Ticks - warmUpStartTicks) / (double)(DateTime.UtcNow.Ticks - warmUpStartTicks)); " is 122.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Stream,The length of the statement  "                        var percent = (int) (100*(timeSlice.Time.Ticks - warmUpStartTicks)/(double) (DateTime.UtcNow.Ticks - warmUpStartTicks)); " is 120.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,HandleDelistedSymbols,The length of the statement  "                        Log.Trace($"AlgorithmManager.Run(): Security delisting warning: {delisting.Symbol.Value}' UtcTime: {algorithm.UtcTime}' DelistingTime: {delisting.Time}"); " is 154.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,HandleDelistedSymbols,The length of the statement  "                    Log.Trace($"AlgorithmManager.Run(): Security delisted: {delisting.Symbol.Value}' UtcTime: {algorithm.UtcTime}' DelistingTime: {delisting.Time}"); " is 145.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,HandleSplitSymbols,The length of the statement  "                    Log.Trace($"AlgorithmManager.HandleSplitSymbols(): {_algorithm.Time} - Security split occurred: Split Factor: {split} Reference Price: {split.ReferencePrice}"); " is 160.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,ProcessSplitSymbols,The length of the statement  "                var latestMarketOnCloseTimeRoundedDownByResolution = nextMarketClose.Subtract(MarketOnCloseOrder.DefaultSubmissionTimeBuffer) " is 125.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,ProcessSplitSymbols,The length of the statement  "                    .RoundDownInTimeZone(configs.GetHighestResolution().ToTimeSpan()' security.Exchange.TimeZone' configs.First().DataTimeZone); " is 124.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,ProcessSplitSymbols,The length of the statement  "                    algorithm.Transactions.CancelOpenOrders(optionContractSymbol' "Canceled due to impending split. Separate MarketOnClose order submitted to liquidate position."); " is 160.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,ProcessSplitSymbols,The length of the statement  "                    algorithm.Debug($"MarktetOnClose order submitted for option contract '{optionContractSymbol}' due to impending {split.Symbol.Value} split event. " " is 146.
Long Statement,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,EndTimeIsInNativeResolution,The length of the statement  "            var roundedDataPointEndTime = dataPointEndTime.RoundDownInTimeZone(config.Increment' config.ExchangeTimeZone' config.DataTimeZone); " is 131.
Long Statement,QuantConnect.Lean.Engine,AlgorithmTimeLimitManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmTimeLimitManager.cs,RequestAdditionalTime,The length of the statement  "                Log.Debug($"AlgorithmTimeLimitManager.RequestAdditionalTime({minutes}): Failed to acquire additional time. Marking failed."); " is 125.
Long Statement,QuantConnect.Lean.Engine,AlgorithmTimeLimitManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmTimeLimitManager.cs,TryRequestAdditionalTime,The length of the statement  "            Log.Debug($"AlgorithmTimeLimitManager.TryRequestAdditionalTime({minutes}): Requesting additional time. Available: {AdditionalTimeBucket.AvailableTokens}"); " is 155.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                    AlgorithmHandlers.ObjectStore.ErrorRaised += (sender' args) => algorithm.Debug($"ObjectStore Persistence Error: {args.Error.Message}"); " is 135.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                    historyProvider.InvalidConfigurationDetected += (sender' args) => { AlgorithmHandlers.Results.ErrorMessage(args.Message); }; " is 124.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                    historyProvider.NumericalPrecisionLimited += (sender' args) => { AlgorithmHandlers.Results.DebugMessage(args.Message); }; " is 121.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                    historyProvider.DownloadFailed += (sender' args) => { AlgorithmHandlers.Results.ErrorMessage(args.Message' args.StackTrace); }; " is 127.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                    historyProvider.ReaderErrorDetected += (sender' args) => { AlgorithmHandlers.Results.RuntimeError(args.Message' args.StackTrace); }; " is 132.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                    initializeComplete = AlgorithmHandlers.Setup.Setup(new SetupHandlerParameters(dataManager.UniverseSelection' algorithm' brokerage' job' AlgorithmHandlers.Results' AlgorithmHandlers.Transactions' AlgorithmHandlers.RealTime' AlgorithmHandlers.ObjectStore)); " is 255.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                    AlgorithmHandlers.RealTime.Setup(algorithm' job' AlgorithmHandlers.Results' SystemHandlers.Api' algorithmManager.TimeLimit); " is 124.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                        var complete = isolator.ExecuteWithTimeLimit(AlgorithmHandlers.Setup.MaximumRuntime' algorithmManager.TimeLimit.IsWithinLimit' () => " is 132.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                                algorithmManager.Run(job' algorithm' synchronizer' AlgorithmHandlers.Transactions' AlgorithmHandlers.Results' AlgorithmHandlers.RealTime' SystemHandlers.LeanManager' AlgorithmHandlers.Alphas' isolator.CancellationToken); " is 220.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                            Log.Error("Engine.Main(): Failed to complete in time: " + AlgorithmHandlers.Setup.MaximumRuntime.ToStringInvariant("F")); " is 121.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                            throw new Exception("Failed to complete algorithm within " + AlgorithmHandlers.Setup.MaximumRuntime.ToStringInvariant("F") " is 122.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                            AlgorithmHandlers.Results.DebugMessage($"Algorithm Id:({job.AlgorithmId}) completed in {totalSeconds:F2} seconds at {kps:F0}k data points per second. Processing total of {dataPoints:N0} data points."); " is 201.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The length of the statement  "                if (_liveMode && algorithmManager.State != AlgorithmStatus.Running && algorithmManager.State != AlgorithmStatus.RuntimeError) " is 125.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,GetHistoryProvider,The length of the statement  "            provider.DownloadFailed += (sender' args) => { AlgorithmHandlers.Results.ErrorMessage(args.Message' args.StackTrace); }; " is 120.
Long Statement,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,GetHistoryProvider,The length of the statement  "            provider.ReaderErrorDetected += (sender' args) => { AlgorithmHandlers.Results.RuntimeError(args.Message' args.StackTrace); }; " is 125.
Long Statement,QuantConnect.Lean.Engine.Alphas,ChartingInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\ChartingInsightManagerExtension.cs,Step,The length of the statement  "                PopulateChartWithSeriesPerSymbol(_totalInsightCountPerSymbol' _totalInsightCountPerSymbolChart' SeriesType.Treemap' frontierTimeUtc); " is 133.
Long Statement,QuantConnect.Lean.Engine.Alphas,DefaultAlphaHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\DefaultAlphaHandler.cs,Initialize,The length of the statement  "            // when insight is generated' take snapshot of securities and place in queue for insight manager to process on alpha thread " is 123.
Long Statement,QuantConnect.Lean.Engine.Alphas,DefaultAlphaHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\DefaultAlphaHandler.cs,ProcessSynchronousEvents,The length of the statement  "                        new GeneratedInsightsCollection(_lastStepTime' _insights.Count == 0 ? Enumerable.Empty<Insight>() : _insights' clone: false)); " is 126.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,ApiDataProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\ApiDataProvider.cs,Fetch,The length of the statement  "                Log.Trace("ApiDataProvider.Fetch(): Attempting to get data from QuantConnect.com's data library for symbol({0})' resolution({1}) and date({2})."' " is 145.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BacktestingFutureChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BacktestingFutureChainProvider.cs,GetFutureContractList,The length of the statement  "                throw new NotSupportedException($"BacktestingFutureChainProvider.GetFutureContractList(): SecurityType.Future is expected but was {symbol.SecurityType}"); " is 154.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BacktestingFutureChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BacktestingFutureChainProvider.cs,GetFutureContractList,The length of the statement  "            var zipFileName = LeanData.GenerateZipFilePath(Globals.DataFolder' symbol' date' Resolution.Minute' TickType.OpenInterest); " is 123.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BacktestingFutureChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BacktestingFutureChainProvider.cs,GetFutureContractList,The length of the statement  "                var zipFileNameQuote = LeanData.GenerateZipFilePath(Globals.DataFolder' symbol' date' Resolution.Minute' TickType.Quote); " is 121.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BacktestingFutureChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BacktestingFutureChainProvider.cs,GetFutureContractList,The length of the statement  "                    Log.Error($"BacktestingFutureChainProvider.GetFutureContractList(): Failed' files not found: {zipFileName} {zipFileNameQuote}"); " is 128.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BacktestingOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BacktestingOptionChainProvider.cs,GetOptionContractList,The length of the statement  "                throw new NotSupportedException($"BacktestingOptionChainProvider.GetOptionContractList(): SecurityType.Equity is expected but was {symbol.SecurityType}"); " is 154.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BacktestingOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BacktestingOptionChainProvider.cs,GetOptionContractList,The length of the statement  "            var canonicalSymbol = Symbol.CreateOption(symbol.Value' symbol.ID.Market' default(OptionStyle)' default(OptionRight)' 0' SecurityIdentifier.DefaultDate); " is 153.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BacktestingOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BacktestingOptionChainProvider.cs,GetOptionContractList,The length of the statement  "            var zipFileName = LeanData.GenerateZipFilePath(Globals.DataFolder' canonicalSymbol' date' Resolution.Minute' TickType.OpenInterest); " is 132.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,BaseSubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\BaseSubscriptionDataSourceReader.cs,CreateStreamReader,The length of the statement  "                    throw new InvalidEnumArgumentException("Unexpected SubscriptionTransportMedium specified: " + subscriptionDataSource.TransportMedium); " is 134.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,SubscriptionManagerGetOrAdd,The length of the statement  "                            $"The maximum number of concurrent market data subscriptions was exceeded ({_algorithmSettings.DataSubscriptionLimit})." + " is 122.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,Add,The length of the statement  "                new List<Tuple<Type' TickType>> { new Tuple<Type' TickType>(dataType' LeanData.GetCommonTickTypeForCommonDataTypes(dataType' symbol.SecurityType))}' dataNormalizationMode) " is 171.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,Add,The length of the statement  "                            $" provided different default resolutions {defaultResolution} and {resolution}' this is an unexpected invalid operation."); " is 123.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,Add,The length of the statement  "                        throw new ArgumentException($"Sorry {resolution.ToStringInvariant()} is not a supported resolution for {typeTuple.Item1.Name}" + " is 128.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,DataManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\DataManager.cs,Add,The length of the statement  "                    "ExchangeTimeZone is a required parameter for new subscriptions. Set to the time zone the security exchange resides in."); " is 122.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,GetOptionContractList,The length of the statement  "                throw new NotSupportedException($"LiveOptionChainProvider.GetOptionContractList(): SecurityType.Equity is expected but was {symbol.SecurityType}"); " is 147.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,GetOptionContractList,The length of the statement  "                    Log.Trace($"LiveOptionChainProvider.GetOptionContractList(): Fetching option chain for {symbol.Value} [Attempt {attempt}]"); " is 124.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The length of the statement  "                        symbols.Add(Symbol.CreateOption(underlyingSymbol' Market.USA' OptionStyle.American' OptionRight.Call' strike' expiryDate)); " is 123.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The length of the statement  "                        symbols.Add(Symbol.CreateOption(underlyingSymbol' Market.USA' OptionStyle.American' OptionRight.Put' strike' expiryDate)); " is 122.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionCollection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionCollection.cs,UpdateFillForwardResolution,The length of the statement  "                    && _subscriptions.All(x => x.Key.Resolution != configuration.Resolution))) // False: there is at least another one equal' no need to update " is 139.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionData,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionData.cs,Create,The length of the statement  "            data.Time = data.Time.ExchangeRoundDownInTimeZone(configuration.Increment' exchangeHours' configuration.DataTimeZone' configuration.ExtendedMarketHours); " is 153.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,Create,The length of the statement  "            var timeZoneOffsetProvider = new TimeZoneOffsetProvider(request.Security.Exchange.TimeZone' request.StartTimeUtc' request.EndTimeUtc); " is 134.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,CreateAndScheduleWorker,The length of the statement  "            var timeZoneOffsetProvider = new TimeZoneOffsetProvider(request.Security.Exchange.TimeZone' request.StartTimeUtc' request.EndTimeUtc); " is 134.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,Synchronizer,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Synchronizer.cs,StreamData,The length of the statement  "                // SubscriptionFrontierTimeProvider will return twice the same time if there are no more subscriptions or if Subscription.Current is null " is 137.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateDataSubscription,The length of the statement  "                var timeZoneOffsetProvider = new TimeZoneOffsetProvider(request.Security.Exchange.TimeZone' request.StartTimeUtc' request.EndTimeUtc); " is 134.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateDataSubscription,The length of the statement  "                                ? (IEnumerator<BaseData>) new LiveEquityDataSynchronizingEnumerator(_frontierTimeProvider' request.Security.Exchange.TimeZone' auxDataEnumerator' tradeBarAggregator) " is 165.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateDataSubscription,The length of the statement  "                    enumerator = new LiveFillForwardEnumerator(_frontierTimeProvider' enumerator' request.Security.Exchange' fillForwardResolution' request.Configuration.ExtendedMarketHours' localEndTime' request.Configuration.Increment' request.Configuration.DataTimeZone' request.StartTimeLocal); " is 278.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateDataSubscription,The length of the statement  "                // finally' make our subscriptions aware of the frontier of the data feed' prevents future data from spewing into the feed " is 122.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateDataSubscription,The length of the statement  "                var subscriptionDataEnumerator = new SubscriptionDataEnumerator(request.Configuration' request.Security.Exchange.Hours' timeZoneOffsetProvider' enumerator); " is 156.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateUniverseSubscription,The length of the statement  "            var tzOffsetProvider = new TimeZoneOffsetProvider(request.Security.Exchange.TimeZone' request.StartTimeUtc' request.EndTimeUtc); " is 128.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateUniverseSubscription,The length of the statement  "                var enumeratorFactory = new TimeTriggeredUniverseSubscriptionEnumeratorFactory(timeTriggered' MarketHoursDatabase.FromDataFolder()' _frontierTimeProvider); " is 155.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateUniverseSubscription,The length of the statement  "                Log.Trace("LiveTradingDataFeed.CreateUniverseSubscription(): Creating option chain universe: " + config.Symbol.ToString()); " is 123.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateUniverseSubscription,The length of the statement  "                    return new LiveFillForwardEnumerator(_frontierTimeProvider' input' request.Security.Exchange' fillForwardResolution' request.Configuration.ExtendedMarketHours' localEndTime' request.Configuration.Increment' request.Configuration.DataTimeZone' request.StartTimeLocal); " is 267.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateUniverseSubscription,The length of the statement  "                Log.Trace("LiveTradingDataFeed.CreateUniverseSubscription(): Creating futures chain universe: " + config.Symbol.ToString()); " is 124.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,CreateUniverseSubscription,The length of the statement  "            var subscriptionDataEnumerator = new SubscriptionDataEnumerator(request.Configuration' request.Security.Exchange.Hours' tzOffsetProvider' enumerator); " is 150.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionSynchronizer,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionSynchronizer.cs,Sync,The length of the statement  "                                        collection = new OptionChainUniverseDataCollection(frontierUtc' subscription.Configuration.Symbol' packetData' current?.Underlying); " is 132.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataSourceReader.cs,ForSource,The length of the statement  "                    reader.InvalidSource += (sender' args) => Log.Error($"SubscriptionDataSourceReader.InvalidSource(): File not found: {args.Source.Source}"); " is 139.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataSourceReader.cs,ForSource,The length of the statement  "                        textReader.CreateStreamReaderError += (sender' args) => Log.Error($"SubscriptionDataSourceReader.CreateStreamReaderError(): File not found: {args.Source.Source}"); " is 163.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,Initialize,The length of the statement  "                                    $" {originalStart.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)}' has been adjusted to match map file first date" + " is 122.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,UpdateDataEnumerator,The length of the statement  "                var liveRemoteFile = _isLiveMode && (_source == null || _source.TransportMedium == SubscriptionTransportMedium.RemoteFile); " is 123.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,CreateSubscriptionFactory,The length of the statement  "            var factory = SubscriptionDataSourceReader.ForSource(source' _dataCacheProvider' _config' _tradeableDates.Current' _isLiveMode' baseDataInstance); " is 146.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataReader.cs,TryGetNextDate,The length of the statement  "                if (_previous != null && _previous.EndTime.ConvertTo(_config.ExchangeTimeZone' _config.DataTimeZone) > _tradeableDates.Current) " is 127.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The length of the statement  "                    custom.Add(new UpdateData<ISecurityPrice>(packet.Security' packet.Configuration.Type' list' packet.Configuration.IsInternalFeed)); " is 130.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The length of the statement  "                                else if (!HandleOptionData(algorithmTime' baseData' optionChains' packet.Security' sliceFuture' optionUnderlyingUpdates)) " is 121.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The length of the statement  "                    security.Add(new UpdateData<ISecurityPrice>(packet.Security' packet.Configuration.Type' securityUpdate' packet.Configuration.IsInternalFeed' containsFillForwardData)); " is 167.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The length of the statement  "                    consolidator.Add(new UpdateData<SubscriptionDataConfig>(packet.Configuration' packet.Configuration.Type' consolidatorUpdate' packet.Configuration.IsInternalFeed' containsFillForwardData)); " is 188.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The length of the statement  "            slice = new Slice(algorithmTime' allDataForAlgorithm' tradeBars ?? _emptyTradeBars' quoteBars ?? _emptyQuoteBars' ticks ?? _emptyTicks' optionChains ?? _emptyOptionChains' futuresChains ?? _emptyFuturesChains' splits ?? _emptySplits' dividends ?? _emptyDividends' delistings ?? _emptyDelistings' symbolChanges ?? _emptySymbolChangedEvents' allDataForAlgorithm.Count > 0); " is 371.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The length of the statement  "            return new TimeSlice(utcDateTime' count' slice' data' security' consolidator' custom ?? _emptyCustom' changes' universeData); " is 125.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,HandleOptionData,The length of the statement  "            var canonical = Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' default(OptionStyle)' default(OptionRight)' 0' SecurityIdentifier.DefaultDate); " is 152.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,ApplyUniverseSelection,The length of the statement  "                        _algorithm.Debug("Note: Your coarse selection filter was updated to exclude symbols without fine fundamental data. Make sure your coarse filter excludes symbols where HasFundamental is false."); " is 194.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,ApplyUniverseSelection,The length of the statement  "                        var request = new SubscriptionRequest(true' universe' security' new SubscriptionDataConfig(config)' localStartTime' localStartTime); " is 132.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,ApplyUniverseSelection,The length of the statement  "                    security = _securityService.CreateSecurity(symbol' configs' universe.UniverseSettings.Leverage' symbol.ID.SecurityType == SecurityType.Option); " is 143.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,UniverseSelection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\UniverseSelection.cs,EnsureCurrencyDataFeeds,The length of the statement  "            _currencySubscriptionDataConfigManager.EnsureCurrencySubscriptionDataConfigs(securityChanges' _algorithm.BrokerageModel); " is 121.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,ZipDataCacheProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\ZipDataCacheProvider.cs,Fetch,The length of the statement  "                                Log.Error("ZipDataCacheProvider.Fetch(): Corrupt zip file/entry: " + filename + "#" + entryName + " Error: " + exception); " is 122.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,ZipDataCacheProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\ZipDataCacheProvider.cs,CacheAndCreateStream,The length of the statement  "                        Log.Error("ZipDataCacheProvider.Fetch(): Corrupt zip file/entry: " + filename + "#" + entryName + " Error: " + exception); " is 122.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,FileSystemDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\FileSystemDataFeed.cs,ConfigureEnumerator,The length of the statement  "                    request.Security.IsExtendedMarketHours' request.EndTimeLocal' request.Configuration.Resolution.ToTimeSpan()' request.Configuration.DataTimeZone' request.StartTimeLocal); " is 169.
Long Statement,QuantConnect.Lean.Engine.DataFeeds,FileSystemDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\FileSystemDataFeed.cs,ConfigureEnumerator,The length of the statement  "                enumerator = SubscriptionFilterEnumerator.WrapForDataFeed(_resultHandler' enumerator' request.Security' request.EndTimeLocal); " is 126.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators,DataQueueFuturesChainUniverseDataCollectionEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\DataQueueFuturesChainUniverseDataCollectionEnumerator.cs,MoveNext,The length of the statement  "                _needNewCurrent = _timeProvider.GetUtcNow().ConvertFromUtc(_subscriptionRequest.Configuration.ExchangeTimeZone).Date != _lastEmitTime.Date; " is 139.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators,DataQueueFuturesChainUniverseDataCollectionEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\DataQueueFuturesChainUniverseDataCollectionEnumerator.cs,MoveNext,The length of the statement  "                var symbols = _universeProvider.LookupSymbols(_subscriptionRequest.Security.Symbol.ID.Symbol' _subscriptionRequest.Security.Type); " is 130.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators,DataQueueOptionChainUniverseDataCollectionEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\DataQueueOptionChainUniverseDataCollectionEnumerator.cs,MoveNext,The length of the statement  "                _needNewCurrent = _timeProvider.GetUtcNow().ConvertFromUtc(_subscriptionRequest.Configuration.ExchangeTimeZone).Date != _lastEmitTime.Date; " is 139.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators,DataQueueOptionChainUniverseDataCollectionEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\DataQueueOptionChainUniverseDataCollectionEnumerator.cs,MoveNext,The length of the statement  "                var symbols = _universeProvider.LookupSymbols(_subscriptionRequest.Security.Symbol.ID.Symbol' _subscriptionRequest.Security.Type); " is 130.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators,FillForwardEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\FillForwardEnumerator.cs,RequiresFillForwardData,The length of the statement  "            // 3. the next fill forward bar following the next market open' 15:00-16:00 followed by 09:00-10:00 the following open market day " is 129.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators,SubscriptionFilterEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\SubscriptionFilterEnumerator.cs,WrapForDataFeed,The length of the statement  "                resultHandler.RuntimeError("Runtime error applying data filter. Assuming filter pass: " + exception.Message' exception.StackTrace); " is 131.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators,SubscriptionFilterEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\SubscriptionFilterEnumerator.cs,MoveNext,The length of the statement  "                    if (current.DataType != MarketDataType.Auxiliary && !_exchange.IsOpenDuringBar(current.Time' current.EndTime' _security.IsExtendedMarketHours)) " is 143.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,BaseDataCollectionSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\BaseDataCollectionSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                    var factory = SubscriptionDataSourceReader.ForSource(source' dataCacheProvider' configuration' date' false' sourceFactory); " is 123.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,BaseDataSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\BaseDataSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                    var factory = SubscriptionDataSourceReader.ForSource(source' dataCacheProvider' request.Configuration' date' _isLiveMode' sourceFactory); " is 137.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,FineFundamentalSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\FineFundamentalSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                var fineFundamentalConfiguration = new SubscriptionDataConfig(request.Configuration' typeof(FineFundamental)' request.Security.Symbol); " is 135.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,FineFundamentalSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\FineFundamentalSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                    var fineFundamentalFactory = SubscriptionDataSourceReader.ForSource(fineFundamentalSource' dataCacheProvider' fineFundamentalConfiguration' date' _isLiveMode' FineFundamental); " is 176.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,FineFundamentalSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\FineFundamentalSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                        SecurityReference = fineFundamentalForDate != null ? fineFundamentalForDate.SecurityReference : new SecurityReference()' " is 120.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,FineFundamentalSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\FineFundamentalSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                        FinancialStatements = fineFundamentalForDate != null ? fineFundamentalForDate.FinancialStatements : new FinancialStatements()' " is 126.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,FineFundamentalSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\FineFundamentalSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                        AssetClassification = fineFundamentalForDate != null ? fineFundamentalForDate.AssetClassification : new AssetClassification()' " is 126.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,OptionChainUniverseSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\OptionChainUniverseSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                var underlyingEnumerator = new TradeBarBuilderEnumerator(request.Configuration.Increment' request.Security.Exchange.TimeZone' _timeProvider' _isLiveMode); " is 154.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,OptionChainUniverseSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\OptionChainUniverseSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "                return new DataQueueOptionChainUniverseDataCollectionEnumerator(subscriptionRequest' configuredEnumerator' _symbolUniverse' _timeProvider); " is 139.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,OptionChainUniverseSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\OptionChainUniverseSubscriptionEnumeratorFactory.cs,GetSubscriptionConfigurations,The length of the statement  "                new SubscriptionDataConfig(config' resolution: resolution' fillForward: true' symbol: underlying' objectType: typeof (TradeBar)' tickType: TickType.Trade)' " is 155.
Long Statement,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,TimeTriggeredUniverseSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\TimeTriggeredUniverseSubscriptionEnumeratorFactory.cs,CreateEnumerator,The length of the statement  "            var enumerator = (IEnumerator<BaseData>) _universe.GetTriggerTimes(request.StartTimeUtc' request.EndTimeUtc' _marketHoursDatabase) " is 130.
Long Statement,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The length of the statement  "                yield return timeSliceFactory.Create(utcDateTime' packets' _securityChanges' new Dictionary<Universe' BaseDataCollection>()).Slice; " is 131.
Long Statement,QuantConnect.Lean.Engine.HistoricalData,SubscriptionDataReaderHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SubscriptionDataReaderHistoryProvider.cs,CreateSubscription,The length of the statement  "                reader = new FillForwardEnumerator(reader' security.Exchange' readOnlyRef' request.IncludeExtendedMarketHours' end' config.Increment' config.DataTimeZone' start); " is 162.
Long Statement,QuantConnect.Lean.Engine.HistoricalData,SubscriptionDataReaderHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SubscriptionDataReaderHistoryProvider.cs,CreateSubscription,The length of the statement  "            var subscriptionRequest = new SubscriptionRequest(false' null' security' config' request.StartTimeUtc' request.EndTimeUtc); " is 123.
Long Statement,QuantConnect.Lean.Engine.HistoricalData,SynchronizingHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SynchronizingHistoryProvider.cs,CreateSliceEnumerableFromSubscriptions,The length of the statement  "                    yield return timeSliceFactory.Create(frontier' data' SecurityChanges.None' new Dictionary<Universe' BaseDataCollection>()).Slice; " is 129.
Long Statement,QuantConnect.Lean.Engine.HistoricalData,SynchronizingHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SynchronizingHistoryProvider.cs,CreateSubscription,The length of the statement  "                reader = new FillForwardEnumerator(reader' security.Exchange' readOnlyRef' request.IncludeExtendedMarketHours' end' config.Increment' config.DataTimeZone' start); " is 162.
Long Statement,QuantConnect.Lean.Engine.HistoricalData,SynchronizingHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SynchronizingHistoryProvider.cs,CreateSubscription,The length of the statement  "            var subscriptionRequest = new SubscriptionRequest(false' null' security' config' request.StartTimeUtc' request.EndTimeUtc); " is 123.
Long Statement,QuantConnect.Lean.Engine.RealTime,LiveTradingRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\LiveTradingRealTimeHandler.cs,Run,The length of the statement  "            Log.Trace("LiveTradingRealTimeHandler.Run(): Exiting thread... Exit triggered: " + _cancellationTokenSource.IsCancellationRequested); " is 133.
Long Statement,QuantConnect.Lean.Engine.RealTime,LiveTradingRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\LiveTradingRealTimeHandler.cs,RefreshMarketHoursToday,The length of the statement  "                Log.Trace($"LiveTradingRealTimeHandler.RefreshMarketHoursToday({security.Type}): Market hours set: Symbol: {security.Symbol} {localMarketHours} ({security.Exchange.Hours.TimeZone})"); " is 183.
Long Statement,QuantConnect.Lean.Engine.RealTime,BacktestingRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\BacktestingRealTimeHandler.cs,ScanPastEvents,The length of the statement  "                        var errorMessage = $"BacktestingRealTimeHandler.Run(): There was an error in a scheduled event {scheduledEvent.Name}. The error was {scheduledEventException.Message}"; " is 167.
Long Statement,QuantConnect.Lean.Engine.Results,BaseResultsHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BaseResultsHandler.cs,SaveResults,The length of the statement  "            File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory()' name)' JsonConvert.SerializeObject(result' Formatting.Indented)); " is 129.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,The length of the statement  "                        orderCount > maxOrders ? TransactionHandler.Orders.Skip(orderCount - maxOrders).ToDictionary() : TransactionHandler.Orders.ToDictionary()' " is 138.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SplitPackets,The length of the statement  "            splitPackets.Add(new BacktestResultPacket(_job' new BacktestResult { AlphaRuntimeStatistics = AlphaRuntimeStatistics}' Algorithm.EndDate' Algorithm.StartDate' progress)); " is 170.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SplitPackets,The length of the statement  "            splitPackets.Add(new BacktestResultPacket(_job' new BacktestResult { Orders = deltaOrders }' Algorithm.EndDate' Algorithm.StartDate' progress)); " is 144.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SplitPackets,The length of the statement  "            splitPackets.Add(new BacktestResultPacket(_job' new BacktestResult { RuntimeStatistics = runtimeStatistics }' Algorithm.EndDate' Algorithm.StartDate' progress)); " is 161.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SendFinalResult,The length of the statement  "                    new BacktestResult(charts' orders' profitLoss' statisticsResults.Summary' runtime' statisticsResults.RollingPerformances' statisticsResults.TotalPerformance) " is 157.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SetAlgorithm,The length of the statement  "            var resampleMinutes = totalMinutes < MinimumSamplePeriod * Samples ? MinimumSamplePeriod : totalMinutes / Samples; // Space out the sampling every " is 146.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SampleRange,The length of the statement  "                                if ((values.Count + series.Values.Count) <= _job.Controls.MaximumDataPointsPerChartSeries) // check chart data point limit first " is 128.
Long Statement,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,SampleRange,The length of the statement  "                                    DebugMessage($"Exceeded maximum data points per series' chart update skipped. Chart Name {update.Name}. Series name {series.Name}. " + " is 134.
Long Statement,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The length of the statement  "                    var splitPackets = SplitPackets(deltaCharts' deltaOrders' holdings' Algorithm.Portfolio.CashBook' deltaStatistics' runtimeStatistics' serverStatistics); " is 152.
Long Statement,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The length of the statement  "                        var complete = new LiveResultPacket(_job' new LiveResult(chartComplete' orders' Algorithm.Transactions.TransactionRecord' holdings' Algorithm.Portfolio.CashBook' deltaStatistics' runtimeStatistics' serverStatistics)); " is 217.
Long Statement,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The length of the statement  "                    // Upload the logs every 1-2 minutes; this can be a heavy operation depending on amount of live logging and should probably be done asynchronously. " is 147.
Long Statement,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Truncate,The length of the statement  "            //Log.Trace("LiveTradingResultHandler.Truncate: Truncate Delta: " + (unixDateStop - unixDateStart) + " Incoming Points: " + result.Charts["Strategy Equity"].Series["Equity"].Values.Count); " is 188.
Long Statement,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Truncate,The length of the statement  "                    newSeries.Values.AddRange(series.Values.Where(chartPoint => chartPoint.x >= unixDateStart && chartPoint.x <= unixDateStop)); " is 124.
Long Statement,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Truncate,The length of the statement  "            //Log.Trace("LiveTradingResultHandler.Truncate: Truncate Outgoing: " + result.Charts["Strategy Equity"].Series["Equity"].Values.Count); " is 135.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            var loader = new Loader(false' algorithmNodePacket.Language' TimeSpan.FromSeconds(60)' names => names.SingleOrAlgorithmTypeName(Config.Get("algorithm-type-name"))' WorkerThread); " is 178.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            var complete = loader.TryCreateAlgorithmInstanceWithIsolator(assemblyPath' algorithmNodePacket.RamAllocation' out algorithm' out error); " is 136.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            if (!complete) throw new AlgorithmSetupException($"During the algorithm initialization' the following exception has occurred: {error}"); " is 136.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,CreateBrokerage,The length of the statement  "            _factory = Composer.Instance.Single<IBrokerageFactory>(brokerageFactory => brokerageFactory.BrokerageType.MatchesTypeName(liveJob.Brokerage)); " is 142.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,The length of the statement  "                    SecurityType.Equity' SecurityType.Forex' SecurityType.Cfd' SecurityType.Option' SecurityType.Future' SecurityType.Crypto " is 120.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,The length of the statement  "                var minResolution = new Lazy<Resolution>(() => algorithm.Securities.Select(x => x.Value.Resolution).DefaultIfEmpty(Resolution.Second).Min()); " is 141.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,The length of the statement  "                    GetOpenOrders(algorithm' parameters.ResultHandler' parameters.TransactionHandler' brokerage' supportedSecurityTypes' minResolution.Value); " is 138.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,GetOpenOrders,The length of the statement  "                resultHandler.DebugMessage($"BrokerageSetupHandler.Setup(): Open order detected.  Creating order tickets for open order {order.Symbol.Value} with quantity {order.Quantity}. Beware that this order ticket may not accurately reflect the quantity of the order if the open order is partially filled."); " is 297.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,GetOpenOrders,The length of the statement  "                    Log.Error("BrokerageSetupHandler.Setup(): Unsupported security type: " + order.SecurityType + "-" + order.Symbol.Value); " is 120.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,GetOpenOrders,The length of the statement  "                    AddInitializationError("Found unsupported security type in existing brokerage open orders: " + order.SecurityType + ". " + " is 122.
Long Statement,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,AddInitializationError,The length of the statement  "            Errors.Add(new AlgorithmSetupException("During the algorithm initialization' the following exception has occurred: " + message' inner)); " is 136.
Long Statement,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            var loader = new Loader(debugging' algorithmNodePacket.Language' TimeSpan.FromHours(1)' names => names.SingleOrDefault(name => MatchTypeName(name' algorithmName))' WorkerThread); " is 178.
Long Statement,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            var complete = loader.TryCreateAlgorithmInstanceWithIsolator(assemblyPath' algorithmNodePacket.RamAllocation' out algorithm' out error); " is 136.
Long Statement,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            if (!complete) throw new AlgorithmSetupException($"During the algorithm initialization' the following exception has occurred: {error}"); " is 136.
Long Statement,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,Setup,The length of the statement  "                Errors.Add(new AlgorithmSetupException("During the algorithm initialization' the following exception has occurred: "' err)); " is 124.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            var loader = new Loader(debugging' algorithmNodePacket.Language' TimeSpan.FromSeconds(60)' names => names.SingleOrAlgorithmTypeName(Config.Get("algorithm-type-name"))' WorkerThread); " is 182.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            var complete = loader.TryCreateAlgorithmInstanceWithIsolator(assemblyPath' algorithmNodePacket.RamAllocation' out algorithm' out error); " is 136.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,CreateAlgorithmInstance,The length of the statement  "            if (!complete) throw new AlgorithmSetupException($"During the algorithm initialization' the following exception has occurred: {error}"); " is 136.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The length of the statement  "                throw new ArgumentException("Expected BacktestNodePacket but received " + parameters.AlgorithmNodePacket.GetType().Name); " is 121.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The length of the statement  "            Log.Trace($"BacktestingSetupHandler.Setup(): Setting up job: Plan: {job.UserPlan}' UID: {job.UserId.ToStringInvariant()}' " + " is 125.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The length of the statement  "                    Errors.Add(new AlgorithmSetupException("During the algorithm initialization' the following exception has occurred: "' err)); " is 124.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The length of the statement  "            MaximumRuntime = GetMaximumRuntime(algorithm.StartDate' algorithm.EndDate' algorithm.SubscriptionManager' algorithm.UniverseManager' parameters.AlgorithmNodePacket.Controls); " is 174.
Long Statement,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The length of the statement  "            Log.Trace("BacktestingSetupHandler.GetMaxRunTime(): Job Days: " + jobDays + " Max Runtime: " + Math.Round(maxRunTime / 60) + " min"); " is 133.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BacktestingTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BacktestingTransactionHandler.cs,Initialize,The length of the statement  "                throw new ArgumentException("Brokerage must be of type BacktestingBrokerage for use wth the BacktestingTransactionHandler"); " is 124.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,CancelOrder,The length of the statement  "                    request.SetResponse(OrderResponse.Error(request' OrderResponseErrorCode.InvalidRequest' "Cancellation is already in progress.")); " is 129.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,ProcessSynchronousEvents,The length of the statement  "                if (_orderRequestQueue.IsBusy && !_orderRequestQueue.WaitHandle.WaitOne(Time.OneSecond' _cancellationTokenSource.Token)) " is 120.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,ProcessSynchronousEvents,The length of the statement  "                    Log.Error("BrokerageTransactionHandler.ProcessSynchronousEvents(): Timed out waiting for request queue to finish processing."); " is 127.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,The length of the statement  "                return OrderResponse.Error(request' OrderResponseErrorCode.OrderAlreadyExists' "Cannot process submit request because order with id {0} already exists"); " is 153.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,The length of the statement  "                Log.Error("BrokerageTransactionHandler.HandleSubmitOrderRequest(): Unable to retrieve order ticket' order not processed."); " is 123.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,The length of the statement  "                var errorMessage = $"Order Error: id: {order.Id}' Insufficient buying power to complete order (Value:{order.GetValue(security).SmartRounding()})' Reason: {hasSufficientBuyingPowerResult.Reason}"; " is 195.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,The length of the statement  "                if (message == null) message = new BrokerageMessageEvent(BrokerageMessageType.Warning' "InvalidOrder"' "BrokerageModel declared unable to submit order: " + order.Id); " is 166.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleSubmitOrderRequest,The length of the statement  "                var response = OrderResponse.Error(request' OrderResponseErrorCode.BrokerageModelRefusedToSubmitOrder' "OrderID: " + order.Id + " " + message); " is 143.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleUpdateOrderRequest,The length of the statement  "            if (!_completeOrders.TryGetValue(request.OrderId' out order) || !_completeOrderTickets.TryGetValue(request.OrderId' out ticket)) " is 128.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleUpdateOrderRequest,The length of the statement  "            if (!_algorithm.LiveMode && !_algorithm.BrokerageModel.CanUpdateOrder(_algorithm.Securities[order.Symbol]' order' request' out message)) " is 136.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleUpdateOrderRequest,The length of the statement  "                if (message == null) message = new BrokerageMessageEvent(BrokerageMessageType.Warning' "InvalidRequest"' "BrokerageModel declared unable to update order: " + order.Id); " is 168.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleUpdateOrderRequest,The length of the statement  "                var response = OrderResponse.Error(request' OrderResponseErrorCode.BrokerageModelRefusedToUpdateOrder' "OrderID: " + order.Id + " " + message); " is 143.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleCancelOrderRequest,The length of the statement  "            if (!_completeOrders.TryGetValue(request.OrderId' out order) || !_completeOrderTickets.TryGetValue(request.OrderId' out ticket)) " is 128.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleCancelOrderRequest,The length of the statement  "                Log.Error("BrokerageTransactionHandler.HandleCancelOrderRequest(): Unable to cancel order with ID " + request.OrderId + "."); " is 125.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleOrderEvent,The length of the statement  "                    //    Log.Error(string.Format("Currency mismatch: Fill currency: {0}' Symbol currency: {1}"' fill.FillPriceCurrency' security.SymbolProperties.QuoteCurrency)); " is 159.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleOrderEvent,The length of the statement  "                    //    Log.Error(string.Format("Currency mismatch: Order currency: {0}' Symbol currency: {1}"' order.PriceCurrency' security.SymbolProperties.QuoteCurrency)); " is 157.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleOrderEvent,The length of the statement  "                // update the ticket and order after we've processed the fill' but before the event' this way everything is ready for user code " is 127.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,SendWarningOnPriceChange,The length of the statement  "                    $"Warning: To meet brokerage precision requirements' order {priceType.ToStringInvariant()}Price was rounded to {priceRound.ToStringInvariant()} from {priceOriginal.ToStringInvariant()}" " is 185.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,CancelPendingOrders,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\CancelPendingOrders.cs,UpdateOrRemove,The length of the statement  "                // The purpose of this pattern 'trygetvalue/lock/if containskey' is to guarantee that threads working on the same order will be correctly synchronized " is 150.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,CancelPendingOrders,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\CancelPendingOrders.cs,UpdateOrRemove,The length of the statement  "                // Thread 1 at HandleCancelOrderRequest() processing a failed cancel request will call RemoveAndFallback() and revert order status " is 130.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,CancelPendingOrders,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\CancelPendingOrders.cs,UpdateOrRemove,The length of the statement  "                // Thread 2 at HandleOrderEvent() with a filled order event will call UpdateOrRemove() and remove the order' ignoring its 'saved' status. " is 137.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,CancelPendingOrders,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\CancelPendingOrders.cs,RemoveAndFallback,The length of the statement  "                // The purpose of this pattern 'trygetvalue/lock/if containskey' is to guarantee that threads working on the same order will be correctly synchronized " is 150.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,CancelPendingOrders,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\CancelPendingOrders.cs,RemoveAndFallback,The length of the statement  "                // Thread 1 at HandleCancelOrderRequest() processing a failed cancel request will call RemoveAndFallback() and revert order status " is 130.
Long Statement,QuantConnect.Lean.Engine.TransactionHandlers,CancelPendingOrders,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\CancelPendingOrders.cs,RemoveAndFallback,The length of the statement  "                // Thread 2 at HandleOrderEvent() with a filled order event will call UpdateOrRemove() and remove the order' ignoring its 'saved' status. " is 137.
Complex Conditional,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,EndTimeIsInNativeResolution,The conditional expression  "config.Resolution == Resolution.Tick                  ||                  // time zones don't change seconds or milliseconds so we can                  // shortcut timezone conversions                  (config.Resolution == Resolution.Second                  || config.Resolution == Resolution.Minute)                  && dataPointEndTime.Ticks % config.Increment.Ticks == 0"  is complex.
Complex Conditional,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The conditional expression  "(AlgorithmHandlers.Results.IsActive                      || (AlgorithmHandlers.Transactions != null && AlgorithmHandlers.Transactions.IsActive)                      || (AlgorithmHandlers.DataFeed != null && AlgorithmHandlers.DataFeed.IsActive)                      || (AlgorithmHandlers.RealTime != null && AlgorithmHandlers.RealTime.IsActive)                      || (AlgorithmHandlers.Alphas != null && AlgorithmHandlers.Alphas.IsActive))                      && millisecondTotalWait < 30*1000"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.DataFeeds,PendingRemovalsManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\PendingRemovalsManager.cs,IsSafeToRemove,The conditional expression  "!member.HoldStock && !openOrders.Any() && (member.Holdings.Target == null || member.Holdings.Target.Quantity == 0)"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.DataFeeds,SubscriptionFrontierTimeProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionFrontierTimeProvider.cs,UpdateCurrentTime,The conditional expression  "subscription.Current == null                      && !subscription.IsUniverseSelectionSubscription                      && subscription.UtcStartTime == _utcNow                      ||                      // UserDefinedUniverse' through the AddData calls                      // will add new universe selection data points when is has too                      // so lets move it next to check if there is any                      subscription.Current == null                      && subscription.IsUniverseSelectionSubscription                      && subscription.UtcStartTime != _utcNow"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.DataFeeds,SubscriptionCollection,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionCollection.cs,UpdateFillForwardResolution,The conditional expression  "ValidateFillForwardResolution(configuration) &&                  (                      (new[] { FillForwardResolutionOperation.BeforeAdd' FillForwardResolutionOperation.AfterAdd }.Contains(operation)                       && configuration.Increment != _fillForwardResolution.Value) // check if the new Increment is different                  ||                      (operation == FillForwardResolutionOperation.AfterRemove // We are removing                      && configuration.Increment == _fillForwardResolution.Value // True: We are removing the resolution we were using                      && _subscriptions.All(x => x.Key.Resolution != configuration.Resolution)))"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.DataFeeds,LiveSynchronizer,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveSynchronizer.cs,StreamData,The conditional expression  "timeSlice.SecurityChanges != SecurityChanges.None                      || timeSlice.IsTimePulse                      || timeSlice.Data.Count != 0                      || frontierUtc >= nextEmit"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.DataFeeds.Enumerators,EnqueueableEnumerator<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\EnqueueableEnumerator.cs,TriggerProducer,The conditional expression  "_produce != null                  && !HasFinished                  && _producer.IsCompleted                  && _lowerThreshold > _count--"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.RealTime,BaseRealTimeHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\RealTime\BaseRealTimeHandler.cs,Setup,The conditional expression  "method != null && method.DeclaringType != typeof(QCAlgorithm)                      || method2 != null && method2.DeclaringType != typeof(QCAlgorithm)"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.Results,BaseResultsHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BaseResultsHandler.cs,GenerateStatisticsResults,The conditional expression  "charts.ContainsKey(strategyEquityKey) &&                      charts[strategyEquityKey].Series.ContainsKey(equityKey) &&                      charts[strategyEquityKey].Series.ContainsKey(dailyPerformanceKey) &&                      charts.ContainsKey(benchmarkKey) &&                      charts[benchmarkKey].Series.ContainsKey(benchmarkKey)"  is complex.
Complex Conditional,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,SampleAssetPrices,The conditional expression  "_debugMode                  && Algorithm.Securities.TryGetValue(symbol' out security)                  && !security.IsInternalFeed() && value > 0"  is complex.
Virtual Method Call from Constructor,QuantConnect.Lean.Engine.DataFeeds,ApiDataProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\ApiDataProvider.cs,ApiDataProvider,The constructor "ApiDataProvider" calls a virtual method "Initialize".
Empty Catch Block,QuantConnect.Lean.Engine.Alphas,AlphaResultPacketSender,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\DefaultAlphaHandler.cs,MessagingUpdateIntervalElapsed,The method has an empty catch block.
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,AlgorithmManager,The following statement contains a magic number: TimeLimit = new AlgorithmTimeLimitManager(                  CreateTokenBucket(job?.Controls?.TrainingLimits)'                  TimeSpan.FromMinutes(Config.GetDouble("algorithm-manager-time-loop-maximum"' 20))              );
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The following statement contains a magic number: var marginCallFrequency = TimeSpan.FromMinutes(5);
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The following statement contains a magic number: var settlementScanFrequency = TimeSpan.FromMinutes(30);
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The following statement contains a magic number: results.SampleEquity(_previousTime' Math.Round(currentPortfolioValue' 4));
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Run,The following statement contains a magic number: results.SampleEquity(_previousTime' Math.Round(algorithm.Portfolio.TotalPortfolioValue' 4));
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,Stream,The following statement contains a magic number: var percent = (int)(100 * (timeSlice.Time.Ticks - warmUpStartTicks) / (double)(DateTime.UtcNow.Ticks - warmUpStartTicks));
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,SamplePerformance,The following statement contains a magic number: results.SamplePerformance(_previousTime.Date' _dailyPortfolioValue == 0m ? 0                          : Math.Round((currentPortfolioValue - _dailyPortfolioValue) * 100 / _dailyPortfolioValue' 10));
Magic Number,QuantConnect.Lean.Engine,AlgorithmManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\AlgorithmManager.cs,SamplePerformance,The following statement contains a magic number: results.SamplePerformance(_previousTime.Date' _dailyPortfolioValue == 0m ? 0                          : Math.Round((currentPortfolioValue - _dailyPortfolioValue) * 100 / _dailyPortfolioValue' 10));
Magic Number,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The following statement contains a magic number: var kps = dataPoints / (double) 1000 / totalSeconds;
Magic Number,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The following statement contains a magic number: var millisecondInterval = 10;
Magic Number,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The following statement contains a magic number: millisecondTotalWait % (millisecondInterval * 10) == 0
Magic Number,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The following statement contains a magic number: (AlgorithmHandlers.Results.IsActive                      || (AlgorithmHandlers.Transactions != null && AlgorithmHandlers.Transactions.IsActive)                      || (AlgorithmHandlers.DataFeed != null && AlgorithmHandlers.DataFeed.IsActive)                      || (AlgorithmHandlers.RealTime != null && AlgorithmHandlers.RealTime.IsActive)                      || (AlgorithmHandlers.Alphas != null && AlgorithmHandlers.Alphas.IsActive))                      && millisecondTotalWait < 30*1000
Magic Number,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The following statement contains a magic number: (AlgorithmHandlers.Results.IsActive                      || (AlgorithmHandlers.Transactions != null && AlgorithmHandlers.Transactions.IsActive)                      || (AlgorithmHandlers.DataFeed != null && AlgorithmHandlers.DataFeed.IsActive)                      || (AlgorithmHandlers.RealTime != null && AlgorithmHandlers.RealTime.IsActive)                      || (AlgorithmHandlers.Alphas != null && AlgorithmHandlers.Alphas.IsActive))                      && millisecondTotalWait < 30*1000
Magic Number,QuantConnect.Lean.Engine.Alphas,ChartingInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\ChartingInsightManagerExtension.cs,Step,The following statement contains a magic number: var score = 100 * _statisticsManager.Statistics.RollingAveragedPopulationScore.GetScore(scoreType);
Magic Number,QuantConnect.Lean.Engine.Alphas,StatisticsInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\StatisticsInsightManagerExtension.cs,StatisticsInsightManagerExtension,The following statement contains a magic number: _smoothingFactor = 2.0 / (period + 1.0);
Magic Number,QuantConnect.Lean.Engine.Alphas,StatisticsInsightManagerExtension,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\StatisticsInsightManagerExtension.cs,OnInsightAnalysisCompleted,The following statement contains a magic number: Statistics.TotalInsightsAnalysisCompleted > 4
Magic Number,QuantConnect.Lean.Engine.Alphas,DefaultAlphaHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\DefaultAlphaHandler.cs,AddInsightManagerCustomExtensions,The following statement contains a magic number: InsightManager.AddExtension(new AlphaResultPacketSender(Job' MessagingHandler' TimeSpan.FromSeconds(1)' 50));
Magic Number,QuantConnect.Lean.Engine.Alphas,AlphaResultPacketSender,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Alphas\DefaultAlphaHandler.cs,AlphaResultPacketSender,The following statement contains a magic number: _maximumQueueLength = (int) (TimeSpan.FromMinutes(30).Ticks / interval.Ticks * maximumNumberOfInsightsPerPacket);
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: var lines = fileContent.Split(new[] { "\r\n" }' StringSplitOptions.None).Skip(7);
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: var expiryDate = new DateTime(fields[2].ToInt32()' fields[3].ToInt32()' fields[4].ToInt32());
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: var expiryDate = new DateTime(fields[2].ToInt32()' fields[3].ToInt32()' fields[4].ToInt32());
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: var expiryDate = new DateTime(fields[2].ToInt32()' fields[3].ToInt32()' fields[4].ToInt32());
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: var strike = (fields[5] + "." + fields[6]).ToDecimal();
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: var strike = (fields[5] + "." + fields[6]).ToDecimal();
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: fields[7].Contains("C")
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveOptionChainProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveOptionChainProvider.cs,FindOptionContracts,The following statement contains a magic number: fields[7].Contains("P")
Magic Number,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,CreateAndScheduleWorker,The following statement contains a magic number: lowerThreshold = 200;
Magic Number,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,CreateAndScheduleWorker,The following statement contains a magic number: upperThreshold = 500;
Magic Number,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,GetLowerThreshold,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Tick:                      return 500;                    case Resolution.Second:                  case Resolution.Minute:                  case Resolution.Hour:                  case Resolution.Daily:                      return 250;                    default:                      throw new ArgumentOutOfRangeException(nameof(resolution)' resolution' null);              }
Magic Number,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,GetLowerThreshold,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Tick:                      return 500;                    case Resolution.Second:                  case Resolution.Minute:                  case Resolution.Hour:                  case Resolution.Daily:                      return 250;                    default:                      throw new ArgumentOutOfRangeException(nameof(resolution)' resolution' null);              }
Magic Number,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,GetUpperThreshold,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Tick:                      return 10000;                    case Resolution.Second:                  case Resolution.Minute:                  case Resolution.Hour:                  case Resolution.Daily:                      return 5000;                    default:                      throw new ArgumentOutOfRangeException(nameof(resolution)' resolution' null);              }
Magic Number,QuantConnect.Lean.Engine.DataFeeds,SubscriptionUtils,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionUtils.cs,GetUpperThreshold,The following statement contains a magic number: switch (resolution)              {                  case Resolution.Tick:                      return 10000;                    case Resolution.Second:                  case Resolution.Minute:                  case Resolution.Hour:                  case Resolution.Daily:                      return 5000;                    default:                      throw new ArgumentOutOfRangeException(nameof(resolution)' resolution' null);              }
Magic Number,QuantConnect.Lean.Engine.DataFeeds,TextSubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TextSubscriptionDataSourceReader.cs,Read,The following statement contains a magic number: var frontier = _date.AddDays(-10);
Magic Number,QuantConnect.Lean.Engine.DataFeeds,LiveTradingDataFeed,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\LiveTradingDataFeed.cs,Initialize,The following statement contains a magic number: _customExchange = new BaseDataExchange("CustomDataExchange") {SleepInterval = 10};
Magic Number,QuantConnect.Lean.Engine.DataFeeds,SubscriptionDataSourceReader,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\SubscriptionDataSourceReader.cs,CheckRemoteFileCache,The following statement contains a magic number: File.GetCreationTime(file) < DateTime.Now.AddHours(-24)
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Enumerators,PriceScaleFactorEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\PriceScaleFactorEnumerator.cs,MoveNext,The following statement contains a magic number: switch (Current.DataType)                  {                      case MarketDataType.TradeBar:                          var tradeBar = Current as TradeBar;                          if (tradeBar != null)                          {                              tradeBar.Open = _config.GetNormalizedPrice(tradeBar.Open);                              tradeBar.High = _config.GetNormalizedPrice(tradeBar.High);                              tradeBar.Low = _config.GetNormalizedPrice(tradeBar.Low);                              tradeBar.Close = _config.GetNormalizedPrice(tradeBar.Close);                          }                          break;                      case MarketDataType.Tick:                          var tick = Current as Tick;                          if (tick != null)                          {                              if (securityType == SecurityType.Equity)                              {                                  tick.Value = _config.GetNormalizedPrice(tick.Value);                              }                              if (securityType == SecurityType.Option                                  || securityType == SecurityType.Future)                              {                                  if (tick.TickType == TickType.Trade)                                  {                                      tick.Value = _config.GetNormalizedPrice(tick.Value);                                  }                                  else if (tick.TickType != TickType.OpenInterest)                                  {                                      tick.BidPrice = tick.BidPrice != 0 ? _config.GetNormalizedPrice(tick.BidPrice) : 0;                                      tick.AskPrice = tick.AskPrice != 0 ?_config.GetNormalizedPrice(tick.AskPrice) : 0;                                        if (tick.BidPrice != 0)                                      {                                          if (tick.AskPrice != 0)                                          {                                              tick.Value = (tick.BidPrice + tick.AskPrice) / 2m;                                          }                                          else                                          {                                              tick.Value = tick.BidPrice;                                          }                                      }                                      else                                      {                                          tick.Value = tick.AskPrice;                                      }                                  }                              }                          }                          break;                      case MarketDataType.QuoteBar:                          var quoteBar = Current as QuoteBar;                          if (quoteBar != null)                          {                              if (quoteBar.Ask != null)                              {                                  quoteBar.Ask.Open = _config.GetNormalizedPrice(quoteBar.Ask.Open);                                  quoteBar.Ask.High = _config.GetNormalizedPrice(quoteBar.Ask.High);                                  quoteBar.Ask.Low = _config.GetNormalizedPrice(quoteBar.Ask.Low);                                  quoteBar.Ask.Close = _config.GetNormalizedPrice(quoteBar.Ask.Close);                              }                              if (quoteBar.Bid != null)                              {                                  quoteBar.Bid.Open = _config.GetNormalizedPrice(quoteBar.Bid.Open);                                  quoteBar.Bid.High = _config.GetNormalizedPrice(quoteBar.Bid.High);                                  quoteBar.Bid.Low = _config.GetNormalizedPrice(quoteBar.Bid.Low);                                  quoteBar.Bid.Close = _config.GetNormalizedPrice(quoteBar.Bid.Close);                              }                              quoteBar.Value = quoteBar.Close;                          }                          break;                      case MarketDataType.Auxiliary:                      case MarketDataType.Base:                      case MarketDataType.OptionChain:                      case MarketDataType.FuturesChain:                          break;                      default:                          throw new ArgumentOutOfRangeException();                  }
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Enumerators,SynchronizingEnumerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\SynchronizingEnumerator.cs,GetSynchronizedEnumerator,The following statement contains a magic number: streamCount < 500
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,LiveCustomDataSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\LiveCustomDataSubscriptionEnumeratorFactory.cs,GetMinimumTimeBetweenCalls,The following statement contains a magic number: return TimeSpan.FromTicks(Math.Min(increment.Ticks' TimeSpan.FromMinutes(30).Ticks));
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Enumerators.Factories,LiveCustomDataSubscriptionEnumeratorFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Enumerators\Factories\LiveCustomDataSubscriptionEnumeratorFactory.cs,GetMaximumDataAge,The following statement contains a magic number: return TimeSpan.FromTicks(Math.Max(increment.Ticks' TimeSpan.FromSeconds(5).Ticks));
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Queues,FakeDataQueue,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Queues\FakeDataQueue.cs,FakeDataQueue,The following statement contains a magic number: _timer = new Timer              {                  AutoReset = true'                  Enabled = true'                  Interval = 1000'              };
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Queues,FakeDataQueue,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Queues\FakeDataQueue.cs,PopulateQueue,The following statement contains a magic number: _ticks.Enqueue(new Tick                      {                          Time = DateTime.Now'                          Symbol = symbol'                          Value = 10 + (decimal)Math.Abs(Math.Sin(DateTime.Now.TimeOfDay.TotalMinutes))'                          TickType = TickType.Trade'                          Quantity = _random.Next(10' (int)_timer.Interval)                      });
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Queues,FakeDataQueue,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Queues\FakeDataQueue.cs,PopulateQueue,The following statement contains a magic number: _ticks.Enqueue(new Tick                      {                          Time = DateTime.Now'                          Symbol = symbol'                          Value = 10 + (decimal)Math.Abs(Math.Sin(DateTime.Now.TimeOfDay.TotalMinutes))'                          TickType = TickType.Trade'                          Quantity = _random.Next(10' (int)_timer.Interval)                      });
Magic Number,QuantConnect.Lean.Engine.DataFeeds.Queues,FakeDataQueue,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\Queues\FakeDataQueue.cs,PopulateQueue,The following statement contains a magic number: i < 500000
Magic Number,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The following statement contains a magic number: var last = Convert.ToDecimal(100 + 10 * Math.Sin(Math.PI * (360 - count + i) / 180.0));
Magic Number,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The following statement contains a magic number: var last = Convert.ToDecimal(100 + 10 * Math.Sin(Math.PI * (360 - count + i) / 180.0));
Magic Number,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The following statement contains a magic number: var last = Convert.ToDecimal(100 + 10 * Math.Sin(Math.PI * (360 - count + i) / 180.0));
Magic Number,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The following statement contains a magic number: var last = Convert.ToDecimal(100 + 10 * Math.Sin(Math.PI * (360 - count + i) / 180.0));
Magic Number,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The following statement contains a magic number: var high = last * 1.005m;
Magic Number,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The following statement contains a magic number: var low = last / 1.005m;
Magic Number,QuantConnect.Lean.Engine.HistoricalData,SineHistoryProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\HistoricalData\SineHistoryProvider.cs,GetHistory,The following statement contains a magic number: var data = new TradeBar(time' config.Symbol' last' high' last' last' 1000' period);
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,BacktestingResultHandler,The following statement contains a magic number: ResamplePeriod = TimeSpan.FromMinutes(4);
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,BacktestingResultHandler,The following statement contains a magic number: NotificationPeriod = TimeSpan.FromSeconds(2);
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,BacktestingResultHandler,The following statement contains a magic number: _nextS3Update = StartTime.AddSeconds(30);
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Run,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,The following statement contains a magic number: deltaOrders.Count > 50
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,The following statement contains a magic number: _nextUpdate = DateTime.UtcNow.AddSeconds(2);
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,The following statement contains a magic number: progress = 0.999m;
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,The following statement contains a magic number: progress > 0.999m
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,The following statement contains a magic number: const int maxOrders = 100;
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,Update,The following statement contains a magic number: _nextS3Update = DateTime.UtcNow.AddSeconds(30);
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,ErrorMessage,The following statement contains a magic number: Messages.Count > 500
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: SampleEquity(time' Math.Round(Algorithm.Portfolio.TotalPortfolioValue' 4));
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: endTime = DateTime.UtcNow.AddMilliseconds(250).Ticks;
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: endTime = DateTime.UtcNow.AddMilliseconds(250).Ticks;
Magic Number,QuantConnect.Lean.Engine.Results,BacktestingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\BacktestingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: endTime = DateTime.UtcNow.AddMilliseconds(250).Ticks;
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,LiveTradingResultHandler,The following statement contains a magic number: ResamplePeriod = TimeSpan.FromSeconds(2);
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,LiveTradingResultHandler,The following statement contains a magic number: _streamedChartLimit = Config.GetInt("streamed-chart-limit"' 12);
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,LiveTradingResultHandler,The following statement contains a magic number: _streamedChartGroupSize = Config.GetInt("streamed-chart-group-size"' 3);
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Run,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The following statement contains a magic number: _orderEvents.TryDequeue(out orderEvent) && stopwatch.ElapsedMilliseconds < 15
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The following statement contains a magic number: _nextLogStoreUpdate = DateTime.UtcNow.AddMinutes(2);
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The following statement contains a magic number: var timeLimitUtc = Time.DateTimeToUnixTimeStamp(utcNow.AddDays(-2));
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The following statement contains a magic number: _nextChartTrimming = DateTime.UtcNow.AddMinutes(10);
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,Update,The following statement contains a magic number: _nextUpdate = DateTime.UtcNow.AddSeconds(3);
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,StoreStatusFile,The following statement contains a magic number: var dailySampler = new SeriesSampler(TimeSpan.FromHours(12));
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,DebugMessage,The following statement contains a magic number: Messages.Count > 500
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,LogMessage,The following statement contains a magic number: Messages.Count > 500
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,ErrorMessage,The following statement contains a magic number: Messages.Count > 500
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,StoreResult,The following statement contains a magic number: var tenminuteSampler = new SeriesSampler(TimeSpan.FromMinutes(10));
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: SampleEquity(time' Math.Round(Algorithm.Portfolio.TotalPortfolioValue' 4));
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: Algorithm.DebugMessages.Count > 0 && debugStopWatch.ElapsedMilliseconds < 250
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: Algorithm.ErrorMessages.Count > 0 && errorStopWatch.ElapsedMilliseconds < 250
Magic Number,QuantConnect.Lean.Engine.Results,LiveTradingResultHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Results\LiveTradingResultHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: Algorithm.LogMessages.Count > 0 && logStopWatch.ElapsedMilliseconds < 250
Magic Number,QuantConnect.Lean.Engine.Setup,BaseSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BaseSetupHandler.cs,InitializeDebugging,The following statement contains a magic number: return isolator.ExecuteWithTimeLimit(TimeSpan.FromMinutes(5)'                  () => DebuggerHelper.Initialize(algorithmNodePacket.Language)'                  algorithmNodePacket.RamAllocation'                  sleepIntervalMillis: 100'                  workerThread: workerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,BaseSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BaseSetupHandler.cs,InitializeDebugging,The following statement contains a magic number: return isolator.ExecuteWithTimeLimit(TimeSpan.FromMinutes(5)'                  () => DebuggerHelper.Initialize(algorithmNodePacket.Language)'                  algorithmNodePacket.RamAllocation'                  sleepIntervalMillis: 100'                  workerThread: workerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,BrokerageSetupHandler,The following statement contains a magic number: MaximumRuntime = TimeSpan.FromDays(10*365);
Magic Number,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,BrokerageSetupHandler,The following statement contains a magic number: MaximumRuntime = TimeSpan.FromDays(10*365);
Magic Number,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,CreateAlgorithmInstance,The following statement contains a magic number: var loader = new Loader(false' algorithmNodePacket.Language' TimeSpan.FromSeconds(60)' names => names.SingleOrAlgorithmTypeName(Config.Get("algorithm-type-name"))' WorkerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,The following statement contains a magic number: var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromSeconds(300)' () =>                  {                      try                      {                          //Set the default brokerage model before initialize                          algorithm.SetBrokerageModel(_factory.BrokerageModel);                            //Margin calls are disabled by default in live mode                          algorithm.Portfolio.MarginCallModel = MarginCallModel.Null;                            //Set our parameters                          algorithm.SetParameters(liveJob.Parameters);                          algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds());                            //Algorithm is live' not backtesting:                          algorithm.SetLiveMode(true);                            //Initialize the algorithm's starting date                          algorithm.SetDateTime(DateTime.UtcNow);                            //Set the source impl for the event scheduling                          algorithm.Schedule.SetEventSchedule(parameters.RealTimeHandler);                            // set the option chain provider                          algorithm.SetOptionChainProvider(new CachingOptionChainProvider(new LiveOptionChainProvider()));                            // set the future chain provider                          algorithm.SetFutureChainProvider(new CachingFutureChainProvider(new LiveFutureChainProvider()));                            // set the object store                          algorithm.SetObjectStore(parameters.ObjectStore);                            // If we're going to receive market data from IB'                          // set the default subscription limit to 100'                          // algorithms can override this setting in the Initialize method                          if (brokerage is InteractiveBrokersBrokerage &&                              liveJob.DataQueueHandler.EndsWith("InteractiveBrokersBrokerage"))                          {                              algorithm.Settings.DataSubscriptionLimit = 100;                          }                            //Initialise the algorithm' get the required data:                          algorithm.Initialize();                            if (algorithm.AccountCurrency != Currencies.USD)                          {                              throw new NotImplementedException(                                  "BrokerageSetupHandler.Setup(): calling 'QCAlgorithm.SetAccountCurrency()' " +                                  "is only supported in backtesting for now.");                          }                            if (liveJob.Brokerage != "PaperBrokerage")                          {                              //Zero the CashBook - we'll populate directly from brokerage                              foreach (var kvp in algorithm.Portfolio.CashBook)                              {                                  kvp.Value.SetAmount(0);                              }                          }                      }                      catch (Exception err)                      {                          AddInitializationError(err.ToString()' err);                      }                  }' controls.RamAllocation'                      sleepIntervalMillis: 50);
Magic Number,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,The following statement contains a magic number: var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromSeconds(300)' () =>                  {                      try                      {                          //Set the default brokerage model before initialize                          algorithm.SetBrokerageModel(_factory.BrokerageModel);                            //Margin calls are disabled by default in live mode                          algorithm.Portfolio.MarginCallModel = MarginCallModel.Null;                            //Set our parameters                          algorithm.SetParameters(liveJob.Parameters);                          algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds());                            //Algorithm is live' not backtesting:                          algorithm.SetLiveMode(true);                            //Initialize the algorithm's starting date                          algorithm.SetDateTime(DateTime.UtcNow);                            //Set the source impl for the event scheduling                          algorithm.Schedule.SetEventSchedule(parameters.RealTimeHandler);                            // set the option chain provider                          algorithm.SetOptionChainProvider(new CachingOptionChainProvider(new LiveOptionChainProvider()));                            // set the future chain provider                          algorithm.SetFutureChainProvider(new CachingFutureChainProvider(new LiveFutureChainProvider()));                            // set the object store                          algorithm.SetObjectStore(parameters.ObjectStore);                            // If we're going to receive market data from IB'                          // set the default subscription limit to 100'                          // algorithms can override this setting in the Initialize method                          if (brokerage is InteractiveBrokersBrokerage &&                              liveJob.DataQueueHandler.EndsWith("InteractiveBrokersBrokerage"))                          {                              algorithm.Settings.DataSubscriptionLimit = 100;                          }                            //Initialise the algorithm' get the required data:                          algorithm.Initialize();                            if (algorithm.AccountCurrency != Currencies.USD)                          {                              throw new NotImplementedException(                                  "BrokerageSetupHandler.Setup(): calling 'QCAlgorithm.SetAccountCurrency()' " +                                  "is only supported in backtesting for now.");                          }                            if (liveJob.Brokerage != "PaperBrokerage")                          {                              //Zero the CashBook - we'll populate directly from brokerage                              foreach (var kvp in algorithm.Portfolio.CashBook)                              {                                  kvp.Value.SetAmount(0);                              }                          }                      }                      catch (Exception err)                      {                          AddInitializationError(err.ToString()' err);                      }                  }' controls.RamAllocation'                      sleepIntervalMillis: 50);
Magic Number,QuantConnect.Lean.Engine.Setup,BrokerageSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BrokerageSetupHandler.cs,Setup,The following statement contains a magic number: var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromSeconds(300)' () =>                  {                      try                      {                          //Set the default brokerage model before initialize                          algorithm.SetBrokerageModel(_factory.BrokerageModel);                            //Margin calls are disabled by default in live mode                          algorithm.Portfolio.MarginCallModel = MarginCallModel.Null;                            //Set our parameters                          algorithm.SetParameters(liveJob.Parameters);                          algorithm.SetAvailableDataTypes(GetConfiguredDataFeeds());                            //Algorithm is live' not backtesting:                          algorithm.SetLiveMode(true);                            //Initialize the algorithm's starting date                          algorithm.SetDateTime(DateTime.UtcNow);                            //Set the source impl for the event scheduling                          algorithm.Schedule.SetEventSchedule(parameters.RealTimeHandler);                            // set the option chain provider                          algorithm.SetOptionChainProvider(new CachingOptionChainProvider(new LiveOptionChainProvider()));                            // set the future chain provider                          algorithm.SetFutureChainProvider(new CachingFutureChainProvider(new LiveFutureChainProvider()));                            // set the object store                          algorithm.SetObjectStore(parameters.ObjectStore);                            // If we're going to receive market data from IB'                          // set the default subscription limit to 100'                          // algorithms can override this setting in the Initialize method                          if (brokerage is InteractiveBrokersBrokerage &&                              liveJob.DataQueueHandler.EndsWith("InteractiveBrokersBrokerage"))                          {                              algorithm.Settings.DataSubscriptionLimit = 100;                          }                            //Initialise the algorithm' get the required data:                          algorithm.Initialize();                            if (algorithm.AccountCurrency != Currencies.USD)                          {                              throw new NotImplementedException(                                  "BrokerageSetupHandler.Setup(): calling 'QCAlgorithm.SetAccountCurrency()' " +                                  "is only supported in backtesting for now.");                          }                            if (liveJob.Brokerage != "PaperBrokerage")                          {                              //Zero the CashBook - we'll populate directly from brokerage                              foreach (var kvp in algorithm.Portfolio.CashBook)                              {                                  kvp.Value.SetAmount(0);                              }                          }                      }                      catch (Exception err)                      {                          AddInitializationError(err.ToString()' err);                      }                  }' controls.RamAllocation'                      sleepIntervalMillis: 50);
Magic Number,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,ConsoleSetupHandler,The following statement contains a magic number: StartingDate = new DateTime(1998' 01' 01);
Magic Number,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,ConsoleSetupHandler,The following statement contains a magic number: MaximumRuntime = TimeSpan.FromDays(10 * 365);
Magic Number,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,ConsoleSetupHandler,The following statement contains a magic number: MaximumRuntime = TimeSpan.FromDays(10 * 365);
Magic Number,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,Setup,The following statement contains a magic number: isolator.ExecuteWithTimeLimit(TimeSpan.FromMinutes(5)'                          () =>                          {                              //Setup Base Algorithm:                              algorithm.Initialize();                          }' baseJob.Controls.RamAllocation'                          sleepIntervalMillis: 50'                          workerThread: WorkerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,ConsoleSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\ConsoleSetupHandler.cs,Setup,The following statement contains a magic number: isolator.ExecuteWithTimeLimit(TimeSpan.FromMinutes(5)'                          () =>                          {                              //Setup Base Algorithm:                              algorithm.Initialize();                          }' baseJob.Controls.RamAllocation'                          sleepIntervalMillis: 50'                          workerThread: WorkerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,BacktestingSetupHandler,The following statement contains a magic number: MaximumRuntime = TimeSpan.FromSeconds(300);
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,BacktestingSetupHandler,The following statement contains a magic number: StartingDate = new DateTime(1998' 01' 01);
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,CreateAlgorithmInstance,The following statement contains a magic number: var loader = new Loader(debugging' algorithmNodePacket.Language' TimeSpan.FromSeconds(60)' names => names.SingleOrAlgorithmTypeName(Config.Get("algorithm-type-name"))' WorkerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The following statement contains a magic number: var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromMinutes(5)' () =>              {                  try                  {                      parameters.ResultHandler.SendStatusUpdate(AlgorithmStatus.Initializing' "Initializing algorithm...");                      //Set our parameters                      algorithm.SetParameters(job.Parameters);                        //Algorithm is backtesting' not live:                      algorithm.SetLiveMode(false);                        //Set the source impl for the event scheduling                      algorithm.Schedule.SetEventSchedule(parameters.RealTimeHandler);                        // set the option chain provider                      algorithm.SetOptionChainProvider(new CachingOptionChainProvider(new BacktestingOptionChainProvider()));                        // set the future chain provider                      algorithm.SetFutureChainProvider(new CachingFutureChainProvider(new BacktestingFutureChainProvider()));                        // set the object store                      algorithm.SetObjectStore(parameters.ObjectStore);                        //Initialise the algorithm' get the required data:                      algorithm.Initialize();                        // set start and end date if present in the job                      if (job.PeriodStart.HasValue)                      {                          algorithm.SetStartDate(job.PeriodStart.Value);                      }                      if (job.PeriodFinish.HasValue)                      {                          algorithm.SetEndDate(job.PeriodFinish.Value);                      }                        // finalize initialization                      algorithm.PostInitialize();                  }                  catch (Exception err)                  {                      Log.Error(err);                      Errors.Add(new AlgorithmSetupException("During the algorithm initialization' the following exception has occurred: "' err));                  }              }' controls.RamAllocation'                  sleepIntervalMillis:50'  // entire system is waiting on this' so be as fast as possible                  workerThread: WorkerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The following statement contains a magic number: var initializeComplete = isolator.ExecuteWithTimeLimit(TimeSpan.FromMinutes(5)' () =>              {                  try                  {                      parameters.ResultHandler.SendStatusUpdate(AlgorithmStatus.Initializing' "Initializing algorithm...");                      //Set our parameters                      algorithm.SetParameters(job.Parameters);                        //Algorithm is backtesting' not live:                      algorithm.SetLiveMode(false);                        //Set the source impl for the event scheduling                      algorithm.Schedule.SetEventSchedule(parameters.RealTimeHandler);                        // set the option chain provider                      algorithm.SetOptionChainProvider(new CachingOptionChainProvider(new BacktestingOptionChainProvider()));                        // set the future chain provider                      algorithm.SetFutureChainProvider(new CachingFutureChainProvider(new BacktestingFutureChainProvider()));                        // set the object store                      algorithm.SetObjectStore(parameters.ObjectStore);                        //Initialise the algorithm' get the required data:                      algorithm.Initialize();                        // set start and end date if present in the job                      if (job.PeriodStart.HasValue)                      {                          algorithm.SetStartDate(job.PeriodStart.Value);                      }                      if (job.PeriodFinish.HasValue)                      {                          algorithm.SetEndDate(job.PeriodFinish.Value);                      }                        // finalize initialization                      algorithm.PostInitialize();                  }                  catch (Exception err)                  {                      Log.Error(err);                      Errors.Add(new AlgorithmSetupException("During the algorithm initialization' the following exception has occurred: "' err));                  }              }' controls.RamAllocation'                  sleepIntervalMillis:50'  // entire system is waiting on this' so be as fast as possible                  workerThread: WorkerThread);
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The following statement contains a magic number: MaximumRuntime = MaximumRuntime.Add(TimeSpan.FromSeconds(MaximumRuntime.TotalSeconds * 9));
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,Setup,The following statement contains a magic number: MaxOrders = 10000;
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: maxRunTime = 10 * subscriptionCount * jobDays;
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: maxRunTime = 3600 * 12;
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: maxRunTime = 3600 * 12;
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: (maxRunTime / 3600) > 12
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: (maxRunTime / 3600) > 12
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: Log.Trace("BacktestingSetupHandler.GetMaxRunTime(): Job Days: " + jobDays + " Max Runtime: " + Math.Round(maxRunTime / 60) + " min");
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: maxRunTime = 24 * 60 * 60;
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: maxRunTime = 24 * 60 * 60;
Magic Number,QuantConnect.Lean.Engine.Setup,BacktestingSetupHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Setup\BacktestingSetupHandler.cs,GetMaximumRuntime,The following statement contains a magic number: maxRunTime = 24 * 60 * 60;
Magic Number,QuantConnect.Lean.Engine.Storage,LocalObjectStore,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Storage\LocalObjectStore.cs,BytesToMb,The following statement contains a magic number: return bytes / 1024.0 / 1024.0;
Magic Number,QuantConnect.Lean.Engine.Storage,LocalObjectStore,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Storage\LocalObjectStore.cs,BytesToMb,The following statement contains a magic number: return bytes / 1024.0 / 1024.0;
Magic Number,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: TimeSinceLastFill > TimeSpan.FromSeconds(10)
Magic Number,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,ProcessSynchronousEvents,The following statement contains a magic number: const int maxOrdersToKeep = 10000;
Magic Number,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,Exit,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(60);
Missing Default,QuantConnect.Lean.Engine,Engine,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\Engine.cs,Run,The following switch statement is missing a default case: switch (message.Type)                          {                              case BrokerageMessageType.Disconnect:                                  algorithm.OnBrokerageDisconnect();                                  break;                              case BrokerageMessageType.Reconnect:                                  algorithm.OnBrokerageReconnect();                                  break;                          }
Missing Default,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,Create,The following switch statement is missing a default case: switch (baseData.DataType)                              {                                  case MarketDataType.Tick:                                      if (ticks == null)                                      {                                          ticks = new Ticks(algorithmTime);                                      }                                      ticks.Add(baseData.Symbol' (Tick)baseData);                                      break;                                    case MarketDataType.TradeBar:                                      if (tradeBars == null)                                      {                                          tradeBars = new TradeBars(algorithmTime);                                      }                                        var newTradeBar = (TradeBar)baseData;                                      TradeBar existingTradeBar;                                      // if we have an existing bar keep the highest resolution one                                      // e.g Hour and Minute resolution subscriptions for the same symbol                                      // see CustomUniverseWithBenchmarkRegressionAlgorithm                                      if (!tradeBars.TryGetValue(baseData.Symbol' out existingTradeBar)                                          || existingTradeBar.Period > newTradeBar.Period)                                      {                                          tradeBars[baseData.Symbol] = newTradeBar;                                      }                                      break;                                    case MarketDataType.QuoteBar:                                      if (quoteBars == null)                                      {                                          quoteBars = new QuoteBars(algorithmTime);                                      }                                        var newQuoteBar = (QuoteBar)baseData;                                      QuoteBar existingQuoteBar;                                      // if we have an existing bar keep the highest resolution one                                      // e.g Hour and Minute resolution subscriptions for the same symbol                                      // see CustomUniverseWithBenchmarkRegressionAlgorithm                                      if (!quoteBars.TryGetValue(baseData.Symbol' out existingQuoteBar)                                          || existingQuoteBar.Period > newQuoteBar.Period)                                      {                                          quoteBars[baseData.Symbol] = newQuoteBar;                                      }                                      break;                                    case MarketDataType.OptionChain:                                      if (optionChains == null)                                      {                                          optionChains = new OptionChains(algorithmTime);                                      }                                      optionChains[baseData.Symbol] = (OptionChain)baseData;                                      break;                                    case MarketDataType.FuturesChain:                                      if (futuresChains == null)                                      {                                          futuresChains = new FuturesChains(algorithmTime);                                      }                                      futuresChains[baseData.Symbol] = (FuturesChain)baseData;                                      break;                              }
Missing Default,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,HandleOptionData,The following switch statement is missing a default case: switch (baseData.DataType)              {                  case MarketDataType.Tick:                      var tick = (Tick)baseData;                      chain.Ticks.Add(tick.Symbol' tick);                      UpdateContract(contract' tick);                      break;                    case MarketDataType.TradeBar:                      var tradeBar = (TradeBar)baseData;                      chain.TradeBars[symbol] = tradeBar;                      UpdateContract(contract' tradeBar);                      break;                    case MarketDataType.QuoteBar:                      var quote = (QuoteBar)baseData;                      chain.QuoteBars[symbol] = quote;                      UpdateContract(contract' quote);                      break;                    case MarketDataType.Base:                      chain.AddAuxData(baseData);                      break;              }
Missing Default,QuantConnect.Lean.Engine.DataFeeds,TimeSliceFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\DataFeeds\TimeSliceFactory.cs,HandleFuturesData,The following switch statement is missing a default case: switch (baseData.DataType)              {                  case MarketDataType.Tick:                      var tick = (Tick)baseData;                      chain.Ticks.Add(tick.Symbol' tick);                      UpdateContract(contract' tick);                      break;                    case MarketDataType.TradeBar:                      var tradeBar = (TradeBar)baseData;                      chain.TradeBars[symbol] = tradeBar;                      UpdateContract(contract' tradeBar);                      break;                    case MarketDataType.QuoteBar:                      var quote = (QuoteBar)baseData;                      chain.QuoteBars[symbol] = quote;                      UpdateContract(contract' quote);                      break;                    case MarketDataType.Base:                      chain.AddAuxData(baseData);                      break;              }
Missing Default,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,HandleOrderEvent,The following switch statement is missing a default case: switch (fill.Status)                  {                      case OrderStatus.Canceled:                          order.CanceledTime = fill.UtcTime;                          break;                        case OrderStatus.PartiallyFilled:                      case OrderStatus.Filled:                          order.LastFillTime = fill.UtcTime;                            // append fill message to order tag' for additional information                          if (fill.Status == OrderStatus.Filled && !string.IsNullOrWhiteSpace(fill.Message))                          {                              if (string.IsNullOrWhiteSpace(order.Tag))                              {                                  order.Tag = fill.Message;                              }                              else                              {                                  order.Tag += " - " + fill.Message;                              }                          }                          break;                        case OrderStatus.Submitted:                          // submit events after the initial submission are all order updates                          if (ticket.UpdateRequests.Count > 0)                          {                              order.LastUpdateTime = fill.UtcTime;                          }                          break;                  }
Missing Default,QuantConnect.Lean.Engine.TransactionHandlers,BrokerageTransactionHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Engine\TransactionHandlers\BrokerageTransactionHandler.cs,RoundOrderPrices,The following switch statement is missing a default case: switch (order.Type)              {                  case OrderType.Limit:                      {                          var limitPrice = ((LimitOrder) order).LimitPrice;                          var increment = security.PriceVariationModel.GetMinimumPriceVariation(                              new GetMinimumPriceVariationParameters(security' limitPrice));                          if (increment > 0)                          {                              var limitRound = Math.Round(limitPrice / increment) * increment;                              ((LimitOrder) order).LimitPrice = limitRound;                              SendWarningOnPriceChange("Limit"' limitRound' limitPrice);                          }                      }                      break;                    case OrderType.StopMarket:                      {                          var stopPrice = ((StopMarketOrder) order).StopPrice;                          var increment = security.PriceVariationModel.GetMinimumPriceVariation(                              new GetMinimumPriceVariationParameters(security' stopPrice));                          if (increment > 0)                          {                              var stopRound = Math.Round(stopPrice / increment) * increment;                              ((StopMarketOrder) order).StopPrice = stopRound;                              SendWarningOnPriceChange("Stop"' stopRound' stopPrice);                          }                      }                      break;                    case OrderType.StopLimit:                      {                          var limitPrice = ((StopLimitOrder) order).LimitPrice;                          var increment = security.PriceVariationModel.GetMinimumPriceVariation(                              new GetMinimumPriceVariationParameters(security' limitPrice));                          if (increment > 0)                          {                              var limitRound = Math.Round(limitPrice / increment) * increment;                              ((StopLimitOrder) order).LimitPrice = limitRound;                              SendWarningOnPriceChange("Limit"' limitRound' limitPrice);                          }                            var stopPrice = ((StopLimitOrder) order).StopPrice;                          increment = security.PriceVariationModel.GetMinimumPriceVariation(                              new GetMinimumPriceVariationParameters(security' stopPrice));                          if (increment > 0)                          {                              var stopRound = Math.Round(stopPrice / increment) * increment;                              ((StopLimitOrder) order).StopPrice = stopRound;                              SendWarningOnPriceChange("Stop"' stopRound' stopPrice);                          }                      }                      break;              }
