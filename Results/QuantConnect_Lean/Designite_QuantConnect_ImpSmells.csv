Implementation smell,Namespace,Class,File,Method,Description
Long Method,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,BalanceSheet,The method has 310 lines of code.
Long Method,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The method has 312 lines of code.
Long Method,QuantConnect.Data.Fundamental,CashFlowStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CashFlowStatement.cs,CashFlowStatement,The method has 201 lines of code.
Long Method,QuantConnect.Data.Fundamental,CashFlowStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CashFlowStatement.cs,UpdateValues,The method has 203 lines of code.
Long Method,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,IncomeStatement,The method has 183 lines of code.
Long Method,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The method has 185 lines of code.
Long Method,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The method has 127 lines of code.
Long Method,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,PandasData,The method has 234 lines of code.
Long Method,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The method has 125 lines of code.
Long Method,QuantConnect.Securities,SecurityService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityService.cs,CreateSecurity,The method has 101 lines of code.
Long Method,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The method has 119 lines of code.
Long Method,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The method has 135 lines of code.
Long Method,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The method has 120 lines of code.
Long Method,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The method has 123 lines of code.
Long Method,QuantConnect.Statistics,TradeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeStatistics.cs,TradeStatistics,The method has 105 lines of code.
Long Method,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The method has 215 lines of code.
Long Method,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,The method has 109 lines of code.
Long Method,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The method has 280 lines of code.
Complex Method,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ToHigherResolutionEquivalent,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,SecurityTypeToLower,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect,StringExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\StringExtensions.cs,ConvertInvariant,Cyclomatic complexity of the method is 20
Complex Method,QuantConnect,Symbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Symbol.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Algorithm.Framework.Alphas.Analysis,InsightManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Analysis\InsightManager.cs,UpdateScores,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages,DefaultBrokerageMessageHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\DefaultBrokerageMessageHandler.cs,Handle,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Brokerages,BrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\IBrokerageModel.cs,Create,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Data.Consolidators,PeriodCountConsolidatorBase<T;TConsolidated>,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Consolidators\PeriodCountConsolidatorBase.cs,Update,Cyclomatic complexity of the method is 18
Complex Method,QuantConnect.Data.Consolidators,QuoteBarConsolidator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Consolidators\QuoteBarConsolidator.cs,AggregateBar,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Data.Consolidators,RenkoConsolidator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Consolidators\RenkoConsolidator.cs,UpdateWicked,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Data.Custom.Benzinga,BenzingaNewsJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Benzinga\BenzingaNewsJsonConverter.cs,DeserializeNews,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Data.Fundamental,AssetClassification,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\AssetClassification.cs,UpdateValues,Cyclomatic complexity of the method is 19
Complex Method,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,Cyclomatic complexity of the method is 34
Complex Method,QuantConnect.Data.Fundamental,CompanyReference,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyReference.cs,UpdateValues,Cyclomatic complexity of the method is 27
Complex Method,QuantConnect.Data.Fundamental,FinancialStatements,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\FinancialStatements.cs,UpdateValues,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,Cyclomatic complexity of the method is 13
Complex Method,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,Cyclomatic complexity of the method is 13
Complex Method,QuantConnect.Data.Fundamental,SecurityReference,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\SecurityReference.cs,UpdateValues,Cyclomatic complexity of the method is 27
Complex Method,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,Cyclomatic complexity of the method is 126
Complex Method,QuantConnect.Data,Slice,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Slice.cs,CreateDynamicDataDictionary,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,SubscriptionDataConfig,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Data.UniverseSelection,UserDefinedUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UserDefinedUniverse.cs,CreateSymbol,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Orders.Fees,AlphaStreamsFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\AlphaStreamsFeeModel.cs,GetOrderFee,Cyclomatic complexity of the method is 11
Complex Method,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,GetOrderFee,Cyclomatic complexity of the method is 13
Complex Method,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,StopLimitFill,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,GetPrices,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Orders.Fills,LatestPriceFillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\LatestPriceFillModel.cs,GetPrices,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,PandasData,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,Add,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Securities,SecurityService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityService.cs,CreateSecurity,Cyclomatic complexity of the method is 19
Complex Method,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetOpenOrdersReservedQuantity,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,EnsureCurrencyDataFeed,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Securities,OptionFilterUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionFilterUniverse.cs,Strikes,Cyclomatic complexity of the method is 12
Complex Method,QuantConnect.Securities,SecurityExchangeHours,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityExchangeHours.cs,GetMarketHours,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Securities,DefaultMarginCallModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DefaultMarginCallModel.cs,GetMarginCallOrders,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,Cyclomatic complexity of the method is 15
Complex Method,QuantConnect.Securities,SecurityCache,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityCache.cs,AddDataImpl,Cyclomatic complexity of the method is 29
Complex Method,QuantConnect.Data.Custom.Intrinio,IntrinioEconomicData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\IntrinioEconomicData.cs,GetStringForDataTransformation,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Orders,OrderJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OrderJsonConverter.cs,CreateOrder,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Orders,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Order.cs,CreateOrder,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,NthBusinessDay,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Data.Market,FuturesChain,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\FuturesChain.cs,FuturesChain,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Data.Market,OptionChain,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\OptionChain.cs,OptionChain,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,Cyclomatic complexity of the method is 13
Complex Method,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Reader,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Reader,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Parameters,ParameterAttribute,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Parameters\ParameterAttribute.cs,ApplyAttributes,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Statistics,TradeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeStatistics.cs,TradeStatistics,Cyclomatic complexity of the method is 21
Complex Method,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,Cyclomatic complexity of the method is 13
Complex Method,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToFlat,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToReduced,Cyclomatic complexity of the method is 10
Complex Method,QuantConnect.Util,Composer,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\Composer.cs,GetExportedValueByTypeName,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,Cyclomatic complexity of the method is 52
Complex Method,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateZipEntryName,Cyclomatic complexity of the method is 8
Complex Method,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateZipFileName,Cyclomatic complexity of the method is 9
Complex Method,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,Cyclomatic complexity of the method is 10
Long Parameter List,QuantConnect,Chart,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Chart.cs,TryAddAndGetSeries,The method has 7 parameters. Parameters: name' type' index' unit' color' symbol' forceAddNew
Long Parameter List,QuantConnect,Series,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Series.cs,Series,The method has 5 parameters. Parameters: name' type' unit' color' symbol
Long Parameter List,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,GenerateOption,The method has 6 parameters. Parameters: expiry' underlying' market' strike' optionRight' optionStyle
Long Parameter List,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,GenerateEquity,The method has 5 parameters. Parameters: symbol' market' mapSymbol' mapFileProvider' mappingResolveDate
Long Parameter List,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,GenerateBase,The method has 5 parameters. Parameters: dataType' symbol' market' mapSymbol' date
Long Parameter List,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,Generate,The method has 9 parameters. Parameters: date' symbol' securityType' market' strike' optionRight' optionStyle' underlying' forceSymbolToUpper
Long Parameter List,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,ExecuteWithTimeLimit,The method has 6 parameters. Parameters: timeSpan' withinCustomLimits' codeBlock' memoryCap' sleepIntervalMillis' workerThread
Long Parameter List,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The method has 5 parameters. Parameters: task' timeSpan' withinCustomLimits' memoryCap' sleepIntervalMillis
Long Parameter List,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,ExecuteWithTimeLimit,The method has 5 parameters. Parameters: timeSpan' codeBlock' memoryCap' sleepIntervalMillis' workerThread
Long Parameter List,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ExchangeRoundDownInTimeZone,The method has 5 parameters. Parameters: dateTime' interval' exchangeHours' roundingTimeZone' extendedMarket
Long Parameter List,QuantConnect,Symbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Symbol.cs,Create,The method has 5 parameters. Parameters: ticker' securityType' market' alias' baseDataType
Long Parameter List,QuantConnect,Symbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Symbol.cs,CreateOption,The method has 8 parameters. Parameters: underlying' market' style' right' strike' expiry' alias' mapSymbol
Long Parameter List,QuantConnect,Symbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Symbol.cs,CreateOption,The method has 7 parameters. Parameters: underlyingSymbol' market' style' right' strike' expiry' alias
Long Parameter List,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,EachTradeableDayInTimeZone,The method has 5 parameters. Parameters: exchange' from' thru' timeZone' includeExtendedMarketHours
Long Parameter List,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,GetStartTimeForTradeBars,The method has 5 parameters. Parameters: exchangeHours' end' barSize' barCount' extendedMarketHours
Long Parameter List,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,GetEndTimeForTradeBars,The method has 5 parameters. Parameters: exchangeHours' start' barSize' barCount' extendedMarketHours
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas.Analysis,SecurityValues,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Analysis\SecurityValues.cs,SecurityValues,The method has 7 parameters. Parameters: symbol' timeUtc' exchangeHours' price' volatility' volume' quoteCurrencyConversionRate
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Insight,The method has 8 parameters. Parameters: symbol' period' type' direction' magnitude' confidence' sourceModel' weight
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Insight,The method has 7 parameters. Parameters: symbol' expiryFunc' type' direction' magnitude' confidence' sourceModel
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Insight,The method has 9 parameters. Parameters: generatedTimeUtc' symbol' period' type' direction' magnitude' confidence' sourceModel' weight
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Insight,The method has 8 parameters. Parameters: symbol' periodSpec' type' direction' magnitude' confidence' sourceModel' weight
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Price,The method has 8 parameters. Parameters: symbol' resolution' barCount' direction' magnitude' confidence' sourceModel' weight
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Price,The method has 7 parameters. Parameters: symbol' closeTimeLocal' direction' magnitude' confidence' sourceModel' weight
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Price,The method has 7 parameters. Parameters: symbol' period' direction' magnitude' confidence' sourceModel' weight
Long Parameter List,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Price,The method has 6 parameters. Parameters: symbol' expiryFunc' direction' magnitude' confidence' sourceModel
Long Parameter List,QuantConnect.API,LiveAlgorithmApiSettingsWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\API\LiveAlgorithmSettings.cs,LiveAlgorithmApiSettingsWrapper,The method has 5 parameters. Parameters: projectId' compileId' serverType' settings' version
Long Parameter List,QuantConnect.Brokerages,DefaultBrokerageMessageHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\DefaultBrokerageMessageHandler.cs,DefaultBrokerageMessageHandler,The method has 5 parameters. Parameters: algorithm' job' api' initialDelay' openThreshold
Long Parameter List,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,IsValidOrderPrices,The method has 6 parameters. Parameters: security' orderType' orderDirection' stopPrice' limitPrice' message
Long Parameter List,QuantConnect.Data,HistoryProviderInitializeParameters,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\HistoryProviderInitializeParameters.cs,HistoryProviderInitializeParameters,The method has 8 parameters. Parameters: job' api' dataProvider' dataCacheProvider' mapFileProvider' factorFileProvider' statusUpdateAction' parallelHistoryRequestsEnabled
Long Parameter List,QuantConnect.Data,HistoryRequestFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\HistoryRequestFactory.cs,CreateHistoryRequest,The method has 5 parameters. Parameters: subscription' startAlgoTz' endAlgoTz' exchangeHours' resolution
Long Parameter List,QuantConnect.Data,HistoryRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\HistoryRequest.cs,HistoryRequest,The method has 12 parameters. Parameters: startTimeUtc' endTimeUtc' dataType' symbol' resolution' exchangeHours' dataTimeZone' fillForwardResolution' includeExtendedMarketHours' isCustomData' dataNormalizationMode' tickType
Long Parameter List,QuantConnect.Data,Slice,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Slice.cs,Slice,The method has 12 parameters. Parameters: time' data' tradeBars' quoteBars' ticks' optionChains' futuresChains' splits' dividends' delistings' symbolChanges' hasData
Long Parameter List,QuantConnect.Data,BaseData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\BaseData.cs,Update,The method has 6 parameters. Parameters: lastTrade' bidPrice' askPrice' volume' bidSize' askSize
Long Parameter List,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,SubscriptionDataConfig,The method has 12 parameters. Parameters: objectType' symbol' resolution' dataTimeZone' exchangeTimeZone' fillForward' extendedHours' isInternalFeed' isCustom' tickType' isFilteredSubscription' dataNormalizationMode
Long Parameter List,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,SubscriptionDataConfig,The method has 13 parameters. Parameters: config' objectType' symbol' resolution' dataTimeZone' exchangeTimeZone' fillForward' extendedHours' isInternalFeed' isCustom' tickType' isFilteredSubscription' dataNormalizationMode
Long Parameter List,QuantConnect.Data,SubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionManager.cs,Add,The method has 7 parameters. Parameters: symbol' resolution' timeZone' exchangeTimeZone' isCustomData' fillDataForward' extendedMarketHours
Long Parameter List,QuantConnect.Data,SubscriptionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionManager.cs,Add,The method has 12 parameters. Parameters: dataType' tickType' symbol' resolution' dataTimeZone' exchangeTimeZone' isCustomData' fillDataForward' extendedMarketHours' isInternalFeed' isFilteredSubscription' dataNormalizationMode
Long Parameter List,QuantConnect.Data.UniverseSelection,ScheduledUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\ScheduledUniverse.cs,ScheduledUniverse,The method has 6 parameters. Parameters: timeZone' dateRule' timeRule' selector' settings' securityInitializer
Long Parameter List,QuantConnect.Data.UniverseSelection,ScheduledUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\ScheduledUniverse.cs,ScheduledUniverse,The method has 5 parameters. Parameters: dateRule' timeRule' selector' settings' securityInitializer
Long Parameter List,QuantConnect.Data.UniverseSelection,ScheduledUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\ScheduledUniverse.cs,ScheduledUniverse,The method has 6 parameters. Parameters: timeZone' dateRule' timeRule' selector' settings' securityInitializer
Long Parameter List,QuantConnect.Data.UniverseSelection,ScheduledUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\ScheduledUniverse.cs,ScheduledUniverse,The method has 5 parameters. Parameters: dateRule' timeRule' selector' settings' securityInitializer
Long Parameter List,QuantConnect.Data.UniverseSelection,SubscriptionRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\SubscriptionRequest.cs,SubscriptionRequest,The method has 6 parameters. Parameters: isUniverseSubscription' universe' security' configuration' startTimeUtc' endTimeUtc
Long Parameter List,QuantConnect.Data.UniverseSelection,SubscriptionRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\SubscriptionRequest.cs,SubscriptionRequest,The method has 7 parameters. Parameters: template' isUniverseSubscription' universe' security' configuration' startTimeUtc' endTimeUtc
Long Parameter List,QuantConnect.Data.UniverseSelection,OptionChainUniverseDataCollection,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\OptionChainUniverseDataCollection.cs,OptionChainUniverseDataCollection,The method has 5 parameters. Parameters: time' endTime' symbol' data' underlying
Long Parameter List,QuantConnect.Data.UniverseSelection,UserDefinedUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UserDefinedUniverse.cs,UserDefinedUniverse,The method has 5 parameters. Parameters: configuration' universeSettings' securityInitializer' interval' symbols
Long Parameter List,QuantConnect.Data.UniverseSelection,UserDefinedUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UserDefinedUniverse.cs,UserDefinedUniverse,The method has 5 parameters. Parameters: configuration' universeSettings' securityInitializer' interval' selector
Long Parameter List,QuantConnect.Data.UniverseSelection,UniverseSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UniverseSettings.cs,UniverseSettings,The method has 6 parameters. Parameters: resolution' leverage' fillForward' extendedMarketHours' minimumTimeInUniverse' dataNormalizationMode
Long Parameter List,QuantConnect.Interfaces,IObjectStore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Interfaces\IObjectStore.cs,Initialize,The method has 5 parameters. Parameters: algorithmName' userId' projectId' userToken' controls
Long Parameter List,QuantConnect.Interfaces,ISubscriptionDataConfigService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Interfaces\ISubscriptionDataConfigService.cs,Add,The method has 9 parameters. Parameters: dataType' symbol' resolution' fillForward' extendedMarketHours' isFilteredSubscription' isInternalFeed' isCustomData' dataNormalizationMode
Long Parameter List,QuantConnect.Interfaces,ISubscriptionDataConfigService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Interfaces\ISubscriptionDataConfigService.cs,Add,The method has 9 parameters. Parameters: symbol' resolution' fillForward' extendedMarketHours' isFilteredSubscription' isInternalFeed' isCustomData' subscriptionDataTypes' dataNormalizationMode
Long Parameter List,QuantConnect.Interfaces,IAlgorithm,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Interfaces\IAlgorithm.cs,AddSecurity,The method has 7 parameters. Parameters: securityType' symbol' resolution' market' fillDataForward' leverage' extendedMarketHours
Long Parameter List,QuantConnect.Interfaces,IApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Interfaces\IApi.cs,CreateLiveAlgorithm,The method has 5 parameters. Parameters: projectId' compileId' serverType' baseLiveAlgorithmSettings' versionId
Long Parameter List,QuantConnect.Interfaces,IApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Interfaces\IApi.cs,SendStatistics,The method has 10 parameters. Parameters: algorithmId' unrealized' fees' netProfit' holdings' equity' netReturn' volume' trades' sharpe
Long Parameter List,QuantConnect.Orders.Fills,Prices,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,Prices,The method has 6 parameters. Parameters: endTime' current' open' high' low' close
Long Parameter List,QuantConnect.Packets,SystemDebugPacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\SystemDebugPacket.cs,SystemDebugPacket,The method has 5 parameters. Parameters: projectId' algorithmId' compileId' message' toast
Long Parameter List,QuantConnect.Packets,BacktestNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestNodePacket.cs,BacktestNodePacket,The method has 7 parameters. Parameters: userId' projectId' sessionId' algorithmData' startingCapital' name' userPlan
Long Parameter List,QuantConnect.Packets,BacktestResultPacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestResultPacket.cs,BacktestResultPacket,The method has 5 parameters. Parameters: job' results' endDate' startDate' progress
Long Parameter List,QuantConnect.Packets,BacktestResult,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestResultPacket.cs,BacktestResult,The method has 7 parameters. Parameters: charts' orders' profitLoss' statistics' runtimeStatistics' rollingWindow' totalPerformance
Long Parameter List,QuantConnect.Packets,DebugPacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\DebugPacket.cs,DebugPacket,The method has 5 parameters. Parameters: projectId' algorithmId' compileId' message' toast
Long Parameter List,QuantConnect.Packets,LiveResult,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\LiveResultPacket.cs,LiveResult,The method has 8 parameters. Parameters: charts' orders' profitLoss' holdings' cashbook' statistics' runtime' serverStatistics
Long Parameter List,QuantConnect.Securities,AccountCurrencyImmediateSettlementModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\AccountCurrencyImmediateSettlementModel.cs,ApplyFunds,The method has 5 parameters. Parameters: portfolio' security' applicationTimeUtc' currency' amount
Long Parameter List,QuantConnect.Securities,SecurityService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityService.cs,SecurityService,The method has 6 parameters. Parameters: cashBook' marketHoursDatabase' symbolPropertiesDatabase' securityInitializerProvider' registeredTypes' cacheProvider
Long Parameter List,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,EnsureCurrencyDataFeed,The method has 6 parameters. Parameters: securities' subscriptions' marketMap' changes' securityService' accountCurrency
Long Parameter List,QuantConnect.Securities,CashBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBook.cs,EnsureCurrencyDataFeeds,The method has 5 parameters. Parameters: securities' subscriptions' marketMap' changes' securityService
Long Parameter List,QuantConnect.Securities,DelayedSettlementModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DelayedSettlementModel.cs,ApplyFunds,The method has 5 parameters. Parameters: portfolio' security' applicationTimeUtc' currency' amount
Long Parameter List,QuantConnect.Securities,ISettlementModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\ISettlementModel.cs,ApplyFunds,The method has 5 parameters. Parameters: portfolio' security' applicationTimeUtc' currency' amount
Long Parameter List,QuantConnect.Securities,LocalMarketHours,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\LocalMarketHours.cs,LocalMarketHours,The method has 5 parameters. Parameters: day' extendedMarketOpen' marketOpen' marketClose' extendedMarketClose
Long Parameter List,QuantConnect.Securities,SecurityExchangeHours,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityExchangeHours.cs,SecurityExchangeHours,The method has 5 parameters. Parameters: timeZone' holidayDates' marketHoursForEachDayOfWeek' earlyCloses' lateOpens
Long Parameter List,QuantConnect.Securities,MarketHoursDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\MarketHoursDatabase.cs,SetEntry,The method has 5 parameters. Parameters: market' symbol' securityType' exchangeHours' dataTimeZone
Long Parameter List,QuantConnect.Securities,ImmediateSettlementModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\ImmediateSettlementModel.cs,ApplyFunds,The method has 5 parameters. Parameters: portfolio' security' applicationTimeUtc' currency' amount
Long Parameter List,QuantConnect.Securities,SymbolProperties,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolProperties.cs,SymbolProperties,The method has 5 parameters. Parameters: description' quoteCurrency' contractMultiplier' minimumPriceVariation' lotSize
Long Parameter List,QuantConnect.Securities,Security,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Security.cs,Security,The method has 7 parameters. Parameters: exchangeHours' config' quoteCurrency' symbolProperties' currencyConverter' registeredTypesProvider' cache
Long Parameter List,QuantConnect.Securities,Security,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Security.cs,Security,The method has 7 parameters. Parameters: symbol' exchangeHours' quoteCurrency' symbolProperties' currencyConverter' registeredTypesProvider' cache
Long Parameter List,QuantConnect.Securities,Security,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Security.cs,Security,The method has 16 parameters. Parameters: symbol' quoteCurrency' symbolProperties' exchange' cache' portfolioModel' fillModel' feeModel' slippageModel' settlementModel' volatilityModel' buyingPowerModel' dataFilter' priceVariationModel' currencyConverter' registeredTypesProvider
Long Parameter List,QuantConnect.Securities,Security,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Security.cs,Security,The method has 16 parameters. Parameters: config' quoteCurrency' symbolProperties' exchange' cache' portfolioModel' fillModel' feeModel' slippageModel' settlementModel' volatilityModel' buyingPowerModel' dataFilter' priceVariationModel' currencyConverter' registeredTypesProvider
Long Parameter List,QuantConnect.Orders,MarketOnCloseOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\MarketOnCloseOrder.cs,MarketOnCloseOrder,The method has 5 parameters. Parameters: symbol' quantity' time' tag' properties
Long Parameter List,QuantConnect.Orders,MarketOnOpenOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\MarketOnOpenOrder.cs,MarketOnOpenOrder,The method has 5 parameters. Parameters: symbol' quantity' time' tag' properties
Long Parameter List,QuantConnect.Orders,OptionExerciseOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OptionExerciseOrder.cs,OptionExerciseOrder,The method has 5 parameters. Parameters: symbol' quantity' time' tag' properties
Long Parameter List,QuantConnect.Orders,StopLimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\StopLimitOrder.cs,StopLimitOrder,The method has 7 parameters. Parameters: symbol' quantity' stopPrice' limitPrice' time' tag' properties
Long Parameter List,QuantConnect.Orders,StopMarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\StopMarketOrder.cs,StopMarketOrder,The method has 6 parameters. Parameters: symbol' quantity' stopPrice' time' tag' properties
Long Parameter List,QuantConnect.Orders,LimitOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\LimitOrder.cs,LimitOrder,The method has 6 parameters. Parameters: symbol' quantity' limitPrice' time' tag' properties
Long Parameter List,QuantConnect.Orders,MarketOrder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\MarketOrder.cs,MarketOrder,The method has 5 parameters. Parameters: symbol' quantity' time' tag' properties
Long Parameter List,QuantConnect.Orders,SubmitOrderRequest,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\SubmitOrderRequest.cs,SubmitOrderRequest,The method has 9 parameters. Parameters: orderType' securityType' symbol' quantity' stopPrice' limitPrice' time' tag' properties
Long Parameter List,QuantConnect.Orders,OrderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OrderEvent.cs,OrderEvent,The method has 9 parameters. Parameters: orderId' symbol' utcTime' status' direction' fillPrice' fillQuantity' orderFee' message
Long Parameter List,QuantConnect.Orders,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Order.cs,Order,The method has 5 parameters. Parameters: symbol' quantity' time' tag' properties
Long Parameter List,QuantConnect.Securities.Future,Future,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Future.cs,Future,The method has 6 parameters. Parameters: exchangeHours' config' quoteCurrency' symbolProperties' currencyConverter' registeredTypes
Long Parameter List,QuantConnect.Securities.Future,Future,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Future.cs,Future,The method has 7 parameters. Parameters: symbol' exchangeHours' quoteCurrency' symbolProperties' currencyConverter' registeredTypes' securityCache
Long Parameter List,QuantConnect.Securities.Option,Option,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\Option.cs,Option,The method has 6 parameters. Parameters: exchangeHours' config' quoteCurrency' symbolProperties' currencyConverter' registeredTypes
Long Parameter List,QuantConnect.Securities.Option,Option,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\Option.cs,Option,The method has 7 parameters. Parameters: symbol' exchangeHours' quoteCurrency' symbolProperties' currencyConverter' registeredTypes' securityCache
Long Parameter List,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallButterfly,The method has 5 parameters. Parameters: canonicalOption' leg1Strike' leg2Strike' leg3Strike' expiration
Long Parameter List,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutButterfly,The method has 5 parameters. Parameters: canonicalOption' leg1Strike' leg2Strike' leg3Strike' expiration
Long Parameter List,QuantConnect.Securities.Option,OptionSymbolProperties,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbolProperties.cs,OptionSymbolProperties,The method has 5 parameters. Parameters: description' quoteCurrency' contractMultiplier' pipSize' lotSize
Long Parameter List,QuantConnect.Data.Market,Greeks,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Greeks.cs,Greeks,The method has 6 parameters. Parameters: delta' gamma' vega' theta' rho' lambda
Long Parameter List,QuantConnect.Data.Market,Greeks,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Greeks.cs,Greeks,The method has 6 parameters. Parameters: delta' gamma' vega' theta' rho' lambda
Long Parameter List,QuantConnect.Data.Market,Greeks,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Greeks.cs,Greeks,The method has 5 parameters. Parameters: deltaGamma' vega' theta' rho' lambda
Long Parameter List,QuantConnect.Data.Market,FuturesChain,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\FuturesChain.cs,FuturesChain,The method has 6 parameters. Parameters: canonicalFutureSymbol' time' trades' quotes' contracts' filteredContracts
Long Parameter List,QuantConnect.Data.Market,OptionChain,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\OptionChain.cs,OptionChain,The method has 7 parameters. Parameters: canonicalOptionSymbol' time' underlying' trades' quotes' contracts' filteredContracts
Long Parameter List,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,QuoteBar,The method has 7 parameters. Parameters: time' symbol' bid' lastBidSize' ask' lastAskSize' period
Long Parameter List,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,Update,The method has 6 parameters. Parameters: lastTrade' bidPrice' askPrice' volume' bidSize' askSize
Long Parameter List,QuantConnect.Data.Market,RenkoBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\RenkoBar.cs,RenkoBar,The method has 5 parameters. Parameters: symbol' time' brickSize' open' volume
Long Parameter List,QuantConnect.Data.Market,RenkoBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\RenkoBar.cs,RenkoBar,The method has 8 parameters. Parameters: symbol' start' endTime' brickSize' open' high' low' close
Long Parameter List,QuantConnect.Data.Market,Split,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Split.cs,Split,The method has 5 parameters. Parameters: symbol' date' price' splitFactor' type
Long Parameter List,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The method has 5 parameters. Parameters: time' symbol' last' bid' ask
Long Parameter List,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Update,The method has 6 parameters. Parameters: lastTrade' bidPrice' askPrice' volume' bidSize' askSize
Long Parameter List,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,TradeBar,The method has 8 parameters. Parameters: time' symbol' open' high' low' close' volume' period
Long Parameter List,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Update,The method has 6 parameters. Parameters: lastTrade' bidPrice' askPrice' volume' bidSize' askSize
Long Parameter List,QuantConnect.Securities.Cfd,Cfd,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cfd\Cfd.cs,Cfd,The method has 6 parameters. Parameters: exchangeHours' quoteCurrency' config' symbolProperties' currencyConverter' registeredTypes
Long Parameter List,QuantConnect.Securities.Cfd,Cfd,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cfd\Cfd.cs,Cfd,The method has 7 parameters. Parameters: symbol' exchangeHours' quoteCurrency' symbolProperties' currencyConverter' registeredTypes' securityCache
Long Parameter List,QuantConnect.Securities.Crypto,Crypto,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Crypto\Crypto.cs,Crypto,The method has 6 parameters. Parameters: exchangeHours' quoteCurrency' config' symbolProperties' currencyConverter' registeredTypes
Long Parameter List,QuantConnect.Securities.Crypto,Crypto,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Crypto\Crypto.cs,Crypto,The method has 7 parameters. Parameters: symbol' exchangeHours' quoteCurrency' symbolProperties' currencyConverter' registeredTypes' securityCache
Long Parameter List,QuantConnect.Securities.Equity,Equity,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Equity\Equity.cs,Equity,The method has 7 parameters. Parameters: symbol' exchangeHours' quoteCurrency' symbolProperties' currencyConverter' registeredTypes' securityCache
Long Parameter List,QuantConnect.Securities.Equity,Equity,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Equity\Equity.cs,Equity,The method has 6 parameters. Parameters: exchangeHours' config' quoteCurrency' symbolProperties' currencyConverter' registeredTypes
Long Parameter List,QuantConnect.Securities.Forex,Forex,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Forex\Forex.cs,Forex,The method has 6 parameters. Parameters: exchangeHours' quoteCurrency' config' symbolProperties' currencyConverter' registeredTypes
Long Parameter List,QuantConnect.Securities.Forex,Forex,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Forex\Forex.cs,Forex,The method has 7 parameters. Parameters: symbol' exchangeHours' quoteCurrency' symbolProperties' currencyConverter' registeredTypes' securityCache
Long Parameter List,QuantConnect.Statistics,AlgorithmPerformance,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\AlgorithmPerformance.cs,AlgorithmPerformance,The method has 6 parameters. Parameters: trades' profitLoss' equity' listPerformance' listBenchmark' startingCapital
Long Parameter List,QuantConnect.Statistics,PortfolioStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\PortfolioStatistics.cs,PortfolioStatistics,The method has 6 parameters. Parameters: profitLoss' equity' listPerformance' listBenchmark' startingCapital' tradingDaysPerYear
Long Parameter List,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,Generate,The method has 8 parameters. Parameters: trades' profitLoss' pointsEquity' pointsPerformance' pointsBenchmark' startingCapital' totalFees' totalTransactions
Long Parameter List,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetAlgorithmPerformance,The method has 8 parameters. Parameters: fromDate' toDate' trades' profitLoss' equity' pointsPerformance' pointsBenchmark' startingCapital
Long Parameter List,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetRollingPerformances,The method has 8 parameters. Parameters: firstDate' lastDate' trades' profitLoss' equity' pointsPerformance' pointsBenchmark' startingCapital
Long Parameter List,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The method has 8 parameters. Parameters: pointsEquity' profitLoss' pointsPerformance' unsortedBenchmark' startingCash' totalFees' totalTrades' tradingDaysPerYear
Long Parameter List,QuantConnect.Storage,ObjectStore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Storage\ObjectStore.cs,SaveJson,The method has 5 parameters. Parameters: store' key' obj' encoding' settings
Long Parameter List,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateZipFilePath,The method has 5 parameters. Parameters: dataDirectory' symbol' date' resolution' tickType
Long Parameter List,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateZipFilePath,The method has 6 parameters. Parameters: dataDirectory' symbol' securityType' market' date' resolution
Long Parameter List,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateRelativeZipFilePath,The method has 5 parameters. Parameters: symbol' securityType' market' date' resolution
Long Parameter List,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateZipFileName,The method has 5 parameters. Parameters: symbol' securityType' date' resolution' tickType
Long Parameter List,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,LeanDataPathComponents,The method has 7 parameters. Parameters: securityType' market' resolution' symbol' filename' date' tickType
Long Identifier,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,,The length of the parameter _overrideEstimatedMonthlyAlphaValue is 35.
Long Identifier,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,,The length of the parameter _kellyCriterionProbabilityValue is 31.
Long Identifier,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,RoundDownInTimeZone,The length of the parameter roundedDateTimeInRoundingTimeZone is 33.
Long Identifier,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ExchangeRoundDownInTimeZone,The length of the parameter roundedDateTimeInRoundingTimeZone is 33.
Long Identifier,QuantConnect.Brokerages,GDAXBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\GDAXBrokerageModel.cs,,The length of the parameter _stopMarketOrderSupportEndDate is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CBOE.cs,,The length of the parameter TenYearTreasuryNoteVolatilityFutures is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CBOE.cs,,The length of the parameter SP500ThreeMonthVolatilityIndex is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CBOE.cs,,The length of the parameter EmergingMarketsETFVolatilityIndex is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CBOE.cs,,The length of the parameter EuroCurrencyETFVolatilityIndex is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CBOE.cs,,The length of the parameter EnergySectorETFVolatilityIndex is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter JapaneseBankPurchasesOfDmEuroAgainstJpy is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter JapaneseBankPurchasesOfUsdAgainstDm is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter JapaneseBankPurchasesOfUsdAgainstRupiah is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter USInterventionInMarketTransactionsInTheJpyUsd is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter USInterventionWithCustomerTransactionsInOtherCurrencies is 55.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter USInterventionWithCustomerTransactionsInTheJpyUsd is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter USInterventionWithCustomerTransactionsInTheDemUsdEuro is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter USInterventionInMarketTransactionsInOtherCurrencies is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter CentralBankOfTurkeyPurchasesOfUsd is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter JapaneseBankPurchasesOfUsdAgainstJpy is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter USInterventionInMarketTransactionsInTheDemUsdEuro is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter SwissNationalBankPurchasesOfDemAgainstChfMillionsOfDem is 54.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter SwissNationalBankPurchasesOfUsdAgainstDem is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter SwissNationalBankPurchasesOfUsdAgainstJpy is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,CentralBankInterventions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CentralBankInterventions.cs,,The length of the parameter SwissNationalBankPurchasesOfUsdAgainstChf is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter ThreeMonthAANonfinancialCommercialPaperRate is 43.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter OneMonthAANonfinancialCommercialPaperRate is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TwoMonthAANonfinancialCommercialPaperRate is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter ThreeMonthAAFinancialCommercialPaperRate is 40.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TwoMonthAAFinancialCommercialPaperRate is 38.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter OneMonthAAFinancialCommercialPaperRate is 38.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween1and4DaysUsedForA2P2Nonfinancial is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween5and9DaysUsedForA2P2Nonfinancial is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForA2P2Nonfinancial is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween41and80DaysUsedForAANonfinancial is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForAAAssetBacked is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForAANonfinancial is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween41and80DaysUsedForA2P2Nonfinancial is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForA2P2Nonfinancial is 71.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween21and40DaysUsedForAANonfinancial is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForAANonfinancial is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween21and40DaysUsedForA2P2Nonfinancial is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForA2P2Nonfinancial is 71.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween1and4DaysUsedForAANonfinancial is 63.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween10And20DaysUsedForA2P2Nonfinancial is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForAANonfinancial is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForAAAssetBacked is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween10And20DaysUsedForAANonfinancial is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForA2P2Nonfinancial is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForAANonfinancial is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueofCommercialPaperIssueswithaMaturityBetween1and4Days is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForA2P2Nonfinancial is 71.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityGreaterThan80DaysUsedForAAFinancial is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween10And20DaysUsedForAAFinancial is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForAAFinancial is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween1and4DaysUsedForAAFinancial is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueofCommercialPaperIssueswithaMaturityBetween10And20Days is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberofCommercialPaperIssueswithaMaturityBetween10And20Days is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween21and40DaysUsedForAAFinancial is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberofCommercialPaperIssueswithaMaturityBetween1and4Days is 58.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueofIssuersofCommercialPaperwithaMaturityBetween21and40Days is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberofCommercialPaperIssueswithaMaturityBetween21and40Days is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween21and40DaysUsedForAAFinancial is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueofIssuersofCommercialPaperwithaMaturityBetween41and80Days is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForAANonfinancial is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberofCommercialPaperIssueswithaMaturityBetween41and80Days is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberofCommercialPaperIssueswithaMaturityBetween5and9Days is 58.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueofIssuersofCommercialPaperwithaMaturityGreaterThan80Days is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberofCommercialPaperIssueswithaMaturityGreaterThan80Days is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForAAFinancial is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween41and80DaysUsedForAAFinancial is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween41and80DaysUsedForAAAssetBacked is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForAAFinancial is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween5and9DaysUsedForAAFinancial is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForAAFinancial is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForAAFinancial is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween21and40DaysUsedForAAAssetBacked is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueofIssuersofCommercialPaperwithaMaturityBetween5and9Days is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityGreaterThan80DaysUsedForAAAssetBacked is 63.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween5and9DaysUsedForAANonfinancial is 63.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter FifteenDayAAAssetbackedCommercialPaperInterestRate is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween5and9DaysUsedForAAAssetBacked is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween41and80DaysUsedForAAAssetBacked is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter FifteenDayA2P2NonfinancialCommercialPaperInterestRate is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SevenDayA2P2NonfinancialCommercialPaperInterestRate is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter OvernightA2P2NonfinancialCommercialPaperInterestRate is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NinetyDayAAFinancialCommercialPaperInterestRate is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter OvernightAAAssetbackedCommercialPaperInterestRate is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter Three0DayA2P2NonfinancialCommercialPaperInterestRate is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SixtyDayAAFinancialCommercialPaperInterestRate is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter Three0DayAAFinancialCommercialPaperInterestRate is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForA2P2Nonfinancial is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter Three0DayAAAssetbackedCommercialPaperInterestRate is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SixtyDayAAAssetbackedCommercialPaperInterestRate is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NinetyDayAAAssetbackedCommercialPaperInterestRate is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter FifteenDayAAFinancialCommercialPaperInterestRate is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SevenDayAAFinancialCommercialPaperInterestRate is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SevenDayAAAssetbackedCommercialPaperInterestRate is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter OvernightAAFinancialCommercialPaperInterestRate is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SixtyDayA2P2NonfinancialCommercialPaperInterestRate is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween5and9DaysUsedForAAAssetBacked is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween1and4DaysUsedForAAAssetBacked is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityGreaterThan80DaysUsedForA2P2Nonfinancial is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween1and4DaysUsedForAAAssetBacked is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NinetyDayA2P2NonfinancialCommercialPaperInterestRate is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityBetween10And20DaysUsedForAAAssetBacked is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityGreaterThan80DaysUsedForAANonfinancial is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter OvernightAANonfinancialCommercialPaperInterestRate is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter TotalValueOfIssuesWithMaturityBetween10And20DaysUsedForAAAssetBacked is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SevenDayAANonfinancialCommercialPaperInterestRate is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NinetyDayAANonfinancialCommercialPaperInterestRate is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter FifteenDayAANonfinancialCommercialPaperInterestRate is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter Three0DayAANonfinancialCommercialPaperInterestRate is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter SixtyDayAANonfinancialCommercialPaperInterestRate is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter NumberOfIssuesWithMaturityGreaterThan80DaysUsedForAANonfinancial is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,CommercialPaper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CommercialPaper.cs,,The length of the parameter ThreeMonthCommercialPaperMinusFederalFundsRate is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 74.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 74.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EmergingMarketsCorporatePlusIndexTotalReturnIndexValue is 54.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 74.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 74.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 74.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 77.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 77.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateMasterOptionAdjustedSpread is 37.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldMasterIIOptionAdjustedSpread is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate1To3YearOptionAdjustedSpread is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate10To15YearOptionAdjustedSpread is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateMoreThan15YearOptionAdjustedSpread is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate3To5YearOptionAdjustedSpread is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate5To7YearOptionAdjustedSpread is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate7To10YearOptionAdjustedSpread is 40.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexTotalReturnIndexValue is 84.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsCorporatePlusSubIndexTotalReturnIndexValue is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsLiquidCorporatePlusIndexTotalReturnIndexValue is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroHighYieldIndexTotalReturnIndexValue is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorp1To3YearsTotalReturnIndexValue is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorp10To15TotalReturnIndexValue is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorpMoreThan15YearsTotalReturnIndexValue is 42.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorpeTo5YearsTotalReturnIndexValue is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorp5To7YearsTotalReturnIndexValue is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate7To10YearsTotalReturnIndexValue is 42.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorpAAATotalReturnIndexValue is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldBTotalReturnIndexValue is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldBBTotalReturnIndexValue is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorpBBBTotalReturnIndexValue is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldCCCorBelowTotalReturnIndexValue is 42.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorpMasterTotalReturnIndexValue is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldMasterIITotalReturnIndexValue is 40.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 73.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 58.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 73.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EmergingMarketsCorporatePlusIndexOptionAdjustedSpread is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 73.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 73.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 65.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 73.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 76.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 76.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexOptionAdjustedSpread is 83.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsCorporatePlusSubIndexOptionAdjustedSpread is 58.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsLiquidCorporatePlusIndexOptionAdjustedSpread is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroHighYieldIndexOptionAdjustedSpread is 38.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateAOptionAdjustedSpread is 32.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateAAOptionAdjustedSpread is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateAAAOptionAdjustedSpread is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldBOptionAdjustedSpread is 32.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldBBOptionAdjustedSpread is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateBBBOptionAdjustedSpread is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldCCCorBelowOptionAdjustedSpread is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAEmergingMarketsCorporatePlusSubIndexEffectiveYield is 54.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaEmergingMarketsCorporatePlusSubIndexEffectiveYield is 54.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerEmergingMarketsCorporatePlusSubIndexEffectiveYield is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBEmergingMarketsCorporatePlusSubIndexEffectiveYield is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBEmergingMarketsCorporatePlusSubIndexEffectiveYield is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverEmergingMarketsCorporatePlusSubIndexEffectiveYield is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EmergingMarketsCorporatePlusIndexEffectiveYield is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroEmergingMarketsCorporatePlusSubIndexEffectiveYield is 54.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroHighYieldIndexEffectiveYield is 32.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAEmergingMarketsCorporatePlusSubIndexEffectiveYield is 54.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialEmergingMarketsCorporatePlusSubIndexEffectiveYield is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeEmergingMarketsCorporatePlusSubIndexEffectiveYield is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldEmergingMarketsCorporatePlusSubIndexEffectiveYield is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaEmergingMarketsCorporatePlusSubIndexEffectiveYield is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialEmergingMarketsCorporatePlusSubIndexEffectiveYield is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexEffectiveYield is 77.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate1ThreeYearEffectiveYield is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate10To15YearEffectiveYield is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateMoreThan15YearEffectiveYield is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate3To5YearEffectiveYield is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate5To7YearEffectiveYield is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate7To10YearEffectiveYield is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldCCCorBelowEffectiveYield is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateMasterEffectiveYield is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsCorporatePlusSubIndexEffectiveYield is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsLiquidCorporatePlusIndexEffectiveYield is 55.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldMasterIIEffectiveYield is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AAAAUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter AsiaUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BandLowerUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 75.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 68.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter BBBUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 69.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter CrossoverUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 75.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EmergingMarketsCorporatePlusIndexSemiAnnualYieldtoWorst is 55.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EuroHighYieldIndexSemiAnnualYieldtoWorst is 40.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 62.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter EMEAUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter FinancialUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 75.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighGradeUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 75.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter HighYieldUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 75.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter LatinAmericaUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 78.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 70.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter NonFinancialUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 78.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter PrivateSectorIssuersEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 78.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter PrivateSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 86.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter PublicSectorIssuersEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 77.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter PublicSectorIssuersUSEmergingMarketsLiquidCorporatePlusSubIndexSemiAnnualYieldtoWorst is 85.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate1To3YearSemiAnnualYieldtoWorst is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate10To15YearSemiAnnualYieldtoWorst is 43.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateMoreThan15YearSemiAnnualYieldtoWorst is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate3To5YearSemiAnnualYieldtoWorst is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate5To7YearSemiAnnualYieldtoWorst is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporate7To10YearSemiAnnualYieldtoWorst is 42.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateASemiAnnualYieldtoWorst is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateAASemiAnnualYieldtoWorst is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateAAASemiAnnualYieldtoWorst is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldBSemiAnnualYieldtoWorst is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldBBSemiAnnualYieldtoWorst is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateBBBSemiAnnualYieldtoWorst is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldCCCorBelowSemiAnnualYieldtoWorst is 43.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USCorporateMasterSemiAnnualYieldtoWorst is 39.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsCorporatePlusSubIndexSemiAnnualYieldtoWorst is 60.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USEmergingMarketsLiquidCorporatePlusIndexSemiAnnualYieldtoWorst is 63.
Long Identifier,QuantConnect.Data.Custom.Fred,ICEBofAML,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\ICEBofAML.cs,,The length of the parameter USHighYieldMasterIISemiAnnualYieldtoWorst is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,LIBOR,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\LIBOR.cs,,The length of the parameter TwelveMonthBasedOnBritishPound is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FourBigEuropeanCountriesFromPeakThroughTheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter AustraliaFromPeakThroughTheTrough is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter AustriaFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter BelgiumFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter BrazilFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter CanadaFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SwitzerlandFromPeakThroughTheTrough is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter CzechRepublicFromPeakThroughTheTrough is 37.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter GermanyFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter DenmarkFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter EstoniaFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter EuroAreaFromPeakThroughTheTrough is 32.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FinlandFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FranceFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter UnitedKingdomFromPeakThroughTheTrough is 37.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter GreeceFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter HungaryFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IndonesiaFromPeakThroughTheTrough is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IrelandFromPeakThroughTheTrough is 31.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IsraelFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter LuxembourgFromPeakThroughTheTrough is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MajorFiveAsiaFromPeakThroughTheTrough is 37.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MexicoFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MajorSevenCountriesFromPeakThroughTheTrough is 43.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NAFTAAreaFromPeakThroughTheTrough is 33.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NetherlandsFromPeakThroughTheTrough is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NorwayFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NewZealandFromPeakThroughTheTrough is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDEuropeFromPeakThroughTheTrough is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDAndNonmemberEconomiesFromPeakThroughTheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDTotalAreaFromPeakThroughTheTrough is 37.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter PolandFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter PortugalFromPeakThroughTheTrough is 32.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter RussianFederationFromPeakThroughTheTrough is 41.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SlovakRepublicFromPeakThroughTheTrough is 38.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SloveniaFromPeakThroughTheTrough is 32.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SwedenFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter TurkeyFromPeakThroughTheTrough is 30.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter UnitedStatesFromPeakThroughTheTrough is 36.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SouthAfricaFromPeakThroughTheTrough is 35.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FourBigEuropeanCountriesFromPeriodFollowingPeakThroughTheTrough is 63.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter AustraliaFromPeriodFollowingPeakThroughTheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter AustriaFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter BelgiumFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter BrazilFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter CanadaFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SwitzerlandFromPeriodFollowingPeakThroughTheTrough is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter ChileFromPeriodFollowingPeakThroughTheTrough is 44.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter ChinaFromPeriodFollowingPeakThroughTheTrough is 44.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter CzechRepublicFromPeriodFollowingPeakThroughTheTrough is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter GermanyFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter DenmarkFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SpainFromPeriodFollowingPeakThroughTheTrough is 44.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter EstoniaFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter EuroAreaFromPeriodFollowingPeakThroughTheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FinlandFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FranceFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter UnitedKingdomFromPeriodFollowingPeakThroughTheTrough is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter GreeceFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter HungaryFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IndonesiaFromPeriodFollowingPeakThroughTheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IndiaFromPeriodFollowingPeakThroughTheTrough is 44.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IrelandFromPeriodFollowingPeakThroughTheTrough is 46.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IsraelFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter ItalyFromPeriodFollowingPeakThroughTheTrough is 44.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter JapanFromPeriodFollowingPeakThroughTheTrough is 44.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter KoreaFromPeriodFollowingPeakThroughTheTrough is 44.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter LuxembourgFromPeriodFollowingPeakThroughTheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MajorFiveAsiaFromPeriodFollowingPeakThroughTheTrough is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MexicoFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MajorSevenCountriesFromPeriodFollowingPeakThroughTheTrough is 58.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NAFTAAreaFromPeriodFollowingPeakThroughTheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NetherlandsFromPeriodFollowingPeakThroughTheTrough is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NorwayFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NewZealandFromPeriodFollowingPeakThroughTheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDEuropeFromPeriodFollowingPeakThroughTheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDandNonmemberEconomiesFromPeriodFollowingPeakThroughTheTrough is 64.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDTotalAreaFromPeriodFollowingPeakThroughTheTrough is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter PolandFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter PortugalFromPeriodFollowingPeakThroughTheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter RussianFederationFromPeriodFollowingPeakThroughTheTrough is 56.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SlovakRepublicFromPeriodFollowingPeakThroughTheTrough is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SloveniaFromPeriodFollowingPeakThroughTheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SwedenFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter TurkeyFromPeriodFollowingPeakThroughTheTrough is 45.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter UnitedStatesFromPeriodFollowingPeakThroughTheTrough is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SouthAfricaFromPeriodFollowingPeakThroughTheTrough is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FourBigEuropeanCountriesFromPeakThroughThePeriodPrecedingtheTrough is 66.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter AustraliaFromPeakThroughThePeriodPrecedingtheTrough is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter AustriaFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter BelgiumFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter BrazilFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter CanadaFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SwitzerlandFromPeakThroughThePeriodPrecedingtheTrough is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter ChileFromPeakThroughThePeriodPrecedingtheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter ChinaFromPeakThroughThePeriodPrecedingtheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter CzechRepublicFromPeakThroughThePeriodPrecedingtheTrough is 55.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter GermanyFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter DenmarkFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SpainFromPeakThroughThePeriodPrecedingtheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter EstoniaFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter EuroAreaFromPeakThroughThePeriodPrecedingtheTrough is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FinlandFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter FranceFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter UnitedKingdomFromPeakThroughThePeriodPrecedingtheTrough is 55.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter GreeceFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter HungaryFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IndonesiaFromPeakThroughThePeriodPrecedingtheTrough is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IndiaFromPeakThroughThePeriodPrecedingtheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IrelandFromPeakThroughThePeriodPrecedingtheTrough is 49.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter IsraelFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter ItalyFromPeakThroughThePeriodPrecedingtheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter JapanFromPeakThroughThePeriodPrecedingtheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter KoreaFromPeakThroughThePeriodPrecedingtheTrough is 47.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter LuxembourgFromPeakThroughThePeriodPrecedingtheTrough is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MajorFiveAsiaFromPeakThroughThePeriodPrecedingtheTrough is 55.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MexicoFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter MajorSevenCountriesFromPeakThroughThePeriodPrecedingtheTrough is 61.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NAFTAAreaFromPeakThroughThePeriodPrecedingtheTrough is 51.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NetherlandsFromPeakThroughThePeriodPrecedingtheTrough is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NorwayFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter NewZealandFromPeakThroughThePeriodPrecedingtheTrough is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDEuropeFromPeakThroughThePeriodPrecedingtheTrough is 52.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDandNonmemberEconomiesFromPeakThroughThePeriodPrecedingtheTrough is 67.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter OECDTotalAreaFromPeakThroughThePeriodPrecedingtheTrough is 55.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter PolandFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter PortugalFromPeakThroughThePeriodPrecedingtheTrough is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter RussianFederationFromPeakThroughThePeriodPrecedingtheTrough is 59.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SlovakRepublicFromPeakThroughThePeriodPrecedingtheTrough is 56.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SloveniaFromPeakThroughThePeriodPrecedingtheTrough is 50.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SwedenFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter TurkeyFromPeakThroughThePeriodPrecedingtheTrough is 48.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter UnitedStatesFromPeakThroughThePeriodPrecedingtheTrough is 54.
Long Identifier,QuantConnect.Data.Custom.Fred,OECDRecessionIndicators,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\OECDRecessionIndicators.cs,,The length of the parameter SouthAfricaFromPeakThroughThePeriodPrecedingtheTrough is 53.
Long Identifier,QuantConnect.Data.Custom.Fred,TradeWeightedIndexes,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\TradeWeightedIndexes.cs,,The length of the parameter OtherImportantTradingPartnersGoods is 34.
Long Identifier,QuantConnect.Data.Custom.Fred,TradeWeightedIndexes,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\TradeWeightedIndexes.cs,,The length of the parameter AdvancedForeignEconomiesGoodsAndServices is 40.
Long Identifier,QuantConnect.Data.Custom.Fred,TradeWeightedIndexes,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\TradeWeightedIndexes.cs,,The length of the parameter EmergingMarketsEconomiesGoodsAndServices is 40.
Long Identifier,QuantConnect.Data.Custom.Fred,Wilshire,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\Wilshire.cs,,The length of the parameter USRealEstateInvestmentTrustPrice is 32.
Long Identifier,QuantConnect.Data.Custom.TradingEconomics,Singapore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomics.cs,,The length of the parameter ExportsOfNon_oilDomesticExportsOf is 33.
Long Identifier,QuantConnect.Data.Custom.TradingEconomics,Singapore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomics.cs,,The length of the parameter DomesticExportsOfNonOilNODXPercentYoy is 37.
Long Identifier,QuantConnect.Data.Custom.TradingEconomics,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomics.cs,,The length of the parameter ChicagoFedNationalActivityIndex is 31.
Long Identifier,QuantConnect.Data.Custom.TradingEconomics,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomics.cs,,The length of the parameter DurableGoodsOrdersExTransportation is 34.
Long Identifier,QuantConnect.Data.Custom.TradingEconomics,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomics.cs,,The length of the parameter NyEmpireStateManufacturingIndex is 31.
Long Identifier,QuantConnect.Data.Custom.TradingEconomics,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomics.cs,,The length of the parameter PhiladelphiaFedManufacturingIndex is 33.
Long Identifier,QuantConnect.Data.Custom.TradingEconomics,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomics.cs,,The length of the parameter NyEmpireStateManufacturingIndex is 31.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderAdjustedNetProductionOfFinishedMotorGasoline is 67.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfFinishedMotorGasoline is 41.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductSuppliedOfFinishedMotorGasoline is 44.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfCrudeOilInSpr is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfDistillateFuelOilGreaterThan500PpmSulfur is 78.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfDistillateFuelOilGreaterThan500PpmSulfur is 60.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyExportsOfTotalDistillate is 30.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfDistillateFuelOil is 32.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfDistillateFuelOil is 55.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfKeroseneTypeJetFuel is 39.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductSuppliedOfKeroseneTypeJetFuel is 42.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfTotalGasoline is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyGrossInputsIntoRefineries is 31.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfReformulatedMotorGasoline is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfReformulatedMotorGasoline is 63.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfReformulatedMotorGasoline is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfDistillateFuelOil is 37.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductSuppliedOfDistillateFuelOil is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfMilitaryKeroseneTypeJetFuel is 65.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyOperableCrudeOilDistillationCapacity is 42.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyPropyleneNonfuelUseStocksAtBulkTerminals is 46.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfPropaneAndPropylene is 39.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyPercentUtilizationOfRefineryOperableCapacity is 50.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyExportsOfResidualFuelOil is 30.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfResidualFuelOil is 30.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfCommercialKeroseneTypeJetFuel is 67.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyExportsOfKeroseneTypeJetFuel is 34.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfKeroseneTypeJetFuel is 34.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfKeroseneTypeJetFuel is 57.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksExcludingSprOfCrudeOil is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyFieldProductionOfCrudeOil is 31.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetInputOfCrudeOil is 31.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfResidualFuelOil is 53.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfResidualFuelOil is 35.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductSuppliedOfResidualFuelOil is 38.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyExportsOfTotalPetroleumProducts is 37.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfTotalPetroleumProducts is 37.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyNetImportsOfTotalPetroleumProducts is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductSuppliedOfPetroleumProducts is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksExcludingSprOfCrudeOilAndPetroleumProducts is 60.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyExportsOfCrudeOilAndPetroleumProducts is 43.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfCrudeOilAndPetroleumProducts is 43.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyNetImportsOfCrudeOilAndPetroleumProducts is 46.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfCrudeOilAndPetroleumProducts is 48.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfUnfinishedOils is 34.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfOtherFinishedConventionalMotorGasoline is 76.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfDistillateFuelOil0To15PpmSulfur is 69.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfDistillateFuelOilGreaterThan15To500PpmSulfur is 64.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductionOfDistillateFuelOilGreaterThan15To500PpmSulfur is 62.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfReformulatedMotorGasolineWithFuelAlcohol is 60.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfGasolineBlendingComponents is 41.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfGasolineBlendingComponents is 46.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyCommercialCrudeOilImportsExcludingSpr is 43.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerBlenderAndGasPlantNetProductionOfPropaneAndPropylene is 65.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfFinishedReformulatedMotorGasolineWithEthanol is 82.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfReformulatedMotorGasolineNonOxygentated is 59.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfConventionalMotorGasoline is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfConventionalMotorGasoline is 63.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfConventionalMotorGasolineWithFuelEthanol is 60.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfFinishedConventionalMotorGasolineWithEthanol is 82.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfOtherConventionalMotorGasoline is 50.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetInputOfConventionalCbobGasolineBlendingComponents is 75.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfConventionalCbobGasolineBlendingComponents is 62.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetInputOfConventionalGtabGasolineBlendingComponents is 75.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfConventionalGtabGasolineBlendingComponents is 62.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetInputOfConventionalOtherGasolineBlendingComponents is 76.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfConventionalOtherGasolineBlendingComponents is 63.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyNo2HeatingOilWholesaleResalePrice is 39.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyCrudeOilStocksInTransitOnShipsFromAlaska is 46.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyDaysOfSupplyOfCrudeOilExcludingSpr is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyDaysOfSupplyOfTotalDistillate is 35.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyWeeklyNo2HeatingOilResidentialPrice is 41.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductSuppliedOfPropaneAndPropylene is 42.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyProductSuppliedOfOtherOils is 32.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetInputOfGasolineBlendingComponents is 59.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfDistillateFuelOil0To15PpmSulfur is 51.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyDaysOfSupplyOfKeroseneTypeJetFuel is 39.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyDaysOfSupplyOfTotalGasoline is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfAsphaltAndRoadOil is 37.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklySupplyAdjustmentOfDistillateFuelOilGreaterThan15To500PpmSulfur is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfConventionalMotorGasolineWithFuelEthanol is 55.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfOtherConventionalMotorGasoline is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfDistillateFuelOil0To15PpmSulfur is 46.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfDistillateFuelOilGreaterThan15To500PpmSulfur is 59.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfDistillateFuelOilGreaterThan500To2000PpmSulfur is 61.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfPropaneAndPropylene is 34.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfConventionalGtabGasolineBlendingComponents is 57.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfDistillateFuelOilGreaterThan2000PpmSulfur is 56.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfReformulatedMotorGasolineWithFuelAlcohol is 55.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfConventionalMotorGasoline is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfConventionalOtherGasolineBlendingComponents is 58.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfConventionalCbobGasolineBlendingComponents is 57.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfKerosene is 36.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfKerosene is 36.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfOtherOilsExcludingFuelEthanol is 49.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfResidualFuelOil is 43.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfReformulatedMotorGasoline is 53.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfReformulatedMotorGasoline is 53.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfFuelEthanol is 31.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfDistillateFuelOil is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfDistillateFuelOil is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfKeroseneTypeJetFuel is 47.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfKeroseneTypeJetFuel is 47.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyPropaneWholesaleResalePrice is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetInputOfMotorGasolineBlendingComponentsRbob is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfNgplsLrgsExcludingPropanePropylene is 54.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyDaysOfSupplyOfPropanePropylene is 36.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfConventionalMotorGasoline is 53.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfConventionalMotorGasoline is 53.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklySupplyAdjustmentOfFinishedMotorGasoline is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfFinishedMotorGasoline is 49.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfFinishedMotorGasoline is 59.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfFinishedMotorGasoline is 49.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfDistillateFuelOilGreaterThan500PpmSulfur is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfDistillateFuelOilGreaterThan500PpmSulfur is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfDistillateFuelOilGreaterThan15To500PpmSulfur is 72.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfDistillateFuelOilGreaterThan15To500PpmSulfur is 72.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfDistillateFuelOil0To15PpmSulfur is 59.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfDistillateFuelOil0To15PpmSulfur is 59.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfConventionalMotorGasolineWithFuelEthanol is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfConventionalMotorGasolineWithFuelEthanol is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfOtherConventionalMotorGasoline is 58.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfOtherConventionalMotorGasoline is 58.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfReformulatedMotorGasolineWithFuelAlcohol is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfReformulatedMotorGasolineWithFuelAlcohol is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyOxygenatePlantProductionOfFuelEthanol is 43.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfMotorGasolineFinishedConventionalEd55AndLower is 73.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfFinishedConventionalMotorGasolineEd55AndLower is 83.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfMotorGasolineFinishedConventionalEd55AndLower is 73.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyExportsOfFinishedMotorGasoline is 36.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfFinishedMotorGasoline is 36.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfOtherReformulatedMotorGasoline is 58.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfOtherFinishedReformulatedMotorGasoline is 76.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfOtherReformulatedMotorGasoline is 58.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfMotorGasolineBlendingComponentsRbob is 55.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetInputOfFuelEthanol is 44.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfMotorGasolineFinishedConventionalGreaterThanEd55 is 63.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfMotorGasolineFinishedConventionalEd55AndLower is 60.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyCrudeOilImportsForSprByOthers is 35.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfConventionalMotorGasolineGreaterThanEd55 is 60.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfLiquefiedPetroleumGassesLessPropanePropylene is 59.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyExportsOfPropaneAndPropylene is 34.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfOtherReformulatedMotorGasoline is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyBlenderNetProductionOfMotorGasolineFinishedConventionalGreaterThanEd55 is 76.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerAndBlenderNetProductionOfFinishedConventionalMotorGasolineGreaterThanEd55 is 86.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRefinerNetProductionOfFinishedConventionalMotorGasolineGreaterThanEd55 is 76.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfConventionalMotorGasolineEd55AndLower is 57.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfOtherOilsExcludingFuelEthanol is 44.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromAllCountriesOfMotorGasolineBlendingComponentsRbob is 66.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRegularAllFormulationsRetailGasolinePrices is 48.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyMidgradeAllFormulationsRetailGasolinePrices is 49.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyPremiumAllFormulationsRetailGasolinePrices is 48.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyAllGradesAllFormulationsRetailGasolinePrices is 50.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyAllGradesReformulatedRetailGasolinePrices is 47.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyMidgradeReformulatedRetailGasolinePrices is 46.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyPremiumReformulatedRetailGasolinePrices is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRegularConventionalRetailGasolinePrices is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyRegularReformulatedRetailGasolinePrices is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyPremiumConventionalRetailGasolinePrices is 45.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyMidgradeConventionalRetailGasolinePrices is 46.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyAllGradesConventionalRetailGasolinePrices is 47.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyNo2DieselUltraLowSulfur015PpmRetailPrices is 47.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksExcludingSprAndIncludingLeaseStockOfCrudeOil is 62.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyNo2DieselLowSulfur15500PpmRetailPrices is 44.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfReformulatedRbobWithAlcoholGasolineBlendingComponents is 68.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsOfReformulatedRbobWithEtherGasolineBlendingComponents is 66.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfReformulatedGtabGasolineBlendingComponents is 62.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfReformulatedRbobWithAlcoholGasolineBlendingComponents is 73.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedStates,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyEndingStocksOfReformulatedRbobWithEtherGasolineBlendingComponents is 71.
Long Identifier,QuantConnect.Data.Custom.USEnergy,EquatorialGuinea,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromEquatorialGuineaOfCrudeOil is 43.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Iraq,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromIraqOfCrudeOil is 31.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Kuwait,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromKuwaitOfCrudeOil is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Mexico,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromMexicoOfCrudeOil is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Nigeria,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromNigeriaOfCrudeOil is 34.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Norway,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromNorwayOfCrudeOil is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Russia,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromRussiaOfCrudeOil is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,SaudiArabia,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromSaudiArabiaOfCrudeOil is 38.
Long Identifier,QuantConnect.Data.Custom.USEnergy,UnitedKingdom,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromUnitedKingdomOfCrudeOil is 40.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Venezuela,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromVenezuelaOfCrudeOil is 36.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Algeria,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromAlgeriaOfCrudeOil is 34.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Angola,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromAngolaOfCrudeOil is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Brazil,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromBrazilOfCrudeOil is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Canada,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromCanadaOfCrudeOil is 33.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Congo,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromCongoBrazzavilleOfCrudeOil is 43.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Colombia,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromColombiaOfCrudeOil is 35.
Long Identifier,QuantConnect.Data.Custom.USEnergy,Ecuador,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.Category.cs,,The length of the parameter WeeklyImportsFromEcuadorOfCrudeOil is 34.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryGroupCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter ManufacturingApparelAndAccessories is 34.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryGroupCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter HealthcareProvidersAndServices is 30.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryGroupCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter UtilitiesIndependentPowerProducers is 34.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryGroupCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter FarmAndHeavyConstructionMachinery is 33.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter OtherIndustrialMetalsAndMining is 30.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter FinancialDataAndStockExchanges is 30.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter BeveragesWineriesAndDistilleries is 32.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter DrugManufacturersSpecialtyAndGeneric is 36.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter UtilitiesIndependentPowerProducers is 34.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter FarmAndHeavyConstructionMachinery is 33.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter ElectronicsAndComputerDistribution is 34.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter ScientificAndTechnicalInstruments is 33.
Long Identifier,QuantConnect.Data.Fundamental,MorningstarIndustryCode,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\AssetClassificationHelper.cs,,The length of the parameter SemiconductorEquipmentAndMaterials is 34.
Long Identifier,QuantConnect.Data,HistoryProviderInitializeParameters,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\HistoryProviderInitializeParameters.cs,HistoryProviderInitializeParameters,The length of the parameter parallelHistoryRequestsEnabled is 30.
Long Identifier,QuantConnect.Data.UniverseSelection,Universe,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\Universe.cs,,The length of the parameter _minimumTimeInUniverseRoundingInterval is 38.
Long Identifier,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,InteractiveBrokersFeeModel,The length of the parameter monthlyForexTradeAmountInUSDollars is 34.
Long Identifier,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,InteractiveBrokersFeeModel,The length of the parameter monthlyOptionsTradeAmountInContracts is 36.
Long Identifier,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessForexRateSchedule,The length of the parameter monthlyForexTradeAmountInUSDollars is 34.
Long Identifier,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The length of the parameter monthlyOptionsTradeAmountInContracts is 36.
Long Identifier,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,,The length of the parameter MaximumDataPointsPerChartSeries is 31.
Long Identifier,QuantConnect.Python,VolatilityModelPythonWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\VolatilityModelPythonWrapper.cs,SetSubscriptionDataConfigProvider,The length of the parameter subscriptionDataConfigProvider is 30.
Long Identifier,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,BuyingPowerModel,The length of the parameter requiredFreeBuyingPowerPercent is 30.
Long Identifier,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,BuyingPowerModel,The length of the parameter requiredFreeBuyingPowerPercent is 30.
Long Identifier,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the parameter initialMarginRequiredForRemainderOfOrder is 40.
Long Identifier,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,,The length of the parameter RequiredFreeBuyingPowerPercent is 30.
Long Identifier,QuantConnect.Securities,ReservedBuyingPowerForPosition,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\ReservedBuyingPowerForPosition.cs,ReservedBuyingPowerForPosition,The length of the parameter reservedBuyingPowerForPosition is 30.
Long Identifier,QuantConnect.Securities,Grains,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter BlackSeaCornFinanciallySettledPlatts is 36.
Long Identifier,QuantConnect.Securities,Grains,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter BlackSeaWheatFinanciallySettledPlatts is 37.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter MiniEuropeanThreePointPercentFiveFuelOilBargesPlatts is 52.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter MiniSingaporeFuelOil180CstPlatts is 32.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GulfCoastULSDPlattsUpDownBALMO is 30.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter EuropeanPropaneCIFARAArgusBALMO is 31.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter PremiumUnleadedGasoline10ppmFOBMEDPlatts is 40.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GasolineEurobobOxyNWEBargesArgusCrackSpreadBALMO is 48.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter MontBelvieuNaturalGasolineOPIS is 30.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter MontBelvieuNormalButaneOPISBALMO is 32.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter MontBelvieuLDHPropaneOPISBALMO is 30.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter ArgusPropaneFarEastIndexVsEuropeanPropaneCIFARAArgus is 52.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GroupThreeULSDPlattsVsNYHarborULSD is 34.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GroupThreeSuboctaneGasolinePlattsVsRBOB is 39.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter SingaporeFuelOil180cstPlattsBALMO is 33.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter SingaporeFuelOil380cstPlattsBALMO is 33.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter BrentCrudeOilVsDubaiCrudeOilPlatts is 34.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter SingaporeGasoilPlattsVsLowSulphurGasoilFutures is 46.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter LosAngelesCARBOBGasolineOPISvsRBOBGasoline is 42.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter LosAngelesJetOPISvsNYHarborULSD is 31.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter LosAngelesCARBDieselOPISvsNYHarborULSD is 38.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter MontBelvieuNaturalGasolineOPISBALMO is 35.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter EthanolT2FOBRdamIncludingDutyPlatts is 35.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GasolineEurobobOxyNWEBargesArgus is 32.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter ThreePointFivePercentFuelOilBargesFOBRdamPlattsCrackSpread1000mt is 64.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GasolineEurobobOxyNWEBargesArgusBALMO is 37.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GulfCoastCBOBGasolineA2PlattsVsRBOBGasoline is 43.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter ClearbrookBakkenSweetCrudeOilMonthlyIndexNetEnergy is 50.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter SingaporeMogas92UnleadedPlattsBrentCrackSpread is 46.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter EuropeanNaphthaPlattsCrackSpread is 32.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter EuropeanPropaneCIFARAArgusVsNaphthaCargoesCIFNWEPlatts is 54.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter SingaporeFuelOil380cstPlattsVsEuropeanThreePointFivePercentFuelOilBargesFOBRdamPlatts is 85.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter EastWestGasolineSpreadPlattsArgus is 33.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter EastWestNaphthaJapanCFvsCargoesCIFNWESpreadPlatts is 49.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter RBOBGasolineVsEurobobOxyNWEBargesArgusThreeHundredFiftyThousandGallons is 70.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter ThreePointFivePercentFuelOilBargesFOBRdamPlattsCrackSpread is 58.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter OnePercentFuelOilCargoesFOBNWEPlattsVsThreePointFivePercentFuelOilBargesFOBRdamPlatts is 85.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter GulfCoastHSFOPlattsVsEuropeanThreePointFivePercentFuelOilBargesFOBRdamPlatts is 76.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter NaturalGasHenryHubLastDayFinancial is 34.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter NaturalGasHenryHubPenultimateFinancial is 38.
Long Identifier,QuantConnect.Securities,Energies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter WTIHoustonArgusVsWTITradeMonth is 30.
Long Identifier,QuantConnect.Securities,Metals,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter AluminumMWUSTransactionPremiumPlatts25MT is 40.
Long Identifier,QuantConnect.Securities,Metals,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter AluminiumEuropeanPremiumDutyPaidMetalBulletin is 45.
Long Identifier,QuantConnect.Securities,Metals,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Futures.cs,,The length of the parameter USMidwestDomesticHotRolledCoilSteelCRUIndex is 43.
Long Identifier,QuantConnect.Securities,MarketHoursDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\MarketHoursDatabase.cs,,The length of the parameter _dataFolderMarketHoursDatabase is 30.
Long Identifier,QuantConnect.Securities,MarketHoursDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\MarketHoursDatabase.cs,,The length of the parameter DataFolderMarketHoursDatabaseLock is 33.
Long Identifier,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The length of the parameter closedSaleValueInQuoteCurrency is 30.
Long Identifier,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The length of the parameter lastTradeProfitInAccountCurrency is 32.
Long Identifier,QuantConnect.Securities,SecurityMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityMarginModel.cs,SecurityMarginModel,The length of the parameter requiredFreeBuyingPowerPercent is 30.
Long Identifier,QuantConnect.Securities,SecurityMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityMarginModel.cs,SecurityMarginModel,The length of the parameter requiredFreeBuyingPowerPercent is 30.
Long Identifier,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,,The length of the parameter _dataFolderSymbolPropertiesDatabase is 35.
Long Identifier,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,,The length of the parameter DataFolderSymbolPropertiesDatabaseLock is 38.
Long Identifier,QuantConnect.Securities.Volatility,BaseVolatilityModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Volatility\BaseVolatilityModel.cs,SetSubscriptionDataConfigProvider,The length of the parameter subscriptionDataConfigProvider is 30.
Long Identifier,QuantConnect.Securities.Volatility,BaseVolatilityModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Volatility\BaseVolatilityModel.cs,,The length of the parameter SubscriptionDataConfigProvider is 30.
Long Identifier,QuantConnect.Data.Custom.Intrinio,IntrinioEconomicData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\IntrinioEconomicData.cs,,The length of the parameter _backtestingFirstTimeCallOrLiveMode is 35.
Long Identifier,QuantConnect.Data.Custom.Intrinio,BofAMerrillLynch,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter USCorporateBBBOptionAdjustedSpread is 34.
Long Identifier,QuantConnect.Data.Custom.Intrinio,BofAMerrillLynch,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter USCorporateMasterOptionAdjustedSpread is 37.
Long Identifier,QuantConnect.Data.Custom.Intrinio,BofAMerrillLynch,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter USHighYieldBBOptionAdjustedSpread is 33.
Long Identifier,QuantConnect.Data.Custom.Intrinio,BofAMerrillLynch,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter USHighYieldBOptionAdjustedSpread is 32.
Long Identifier,QuantConnect.Data.Custom.Intrinio,BofAMerrillLynch,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter USHighYieldCCCorBelowOptionAdjustedSpread is 41.
Long Identifier,QuantConnect.Data.Custom.Intrinio,BofAMerrillLynch,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter USHighYieldMasterIITotalReturnIndexValue is 40.
Long Identifier,QuantConnect.Data.Custom.Intrinio,BofAMerrillLynch,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter USHighYieldOptionAdjustedSpread is 31.
Long Identifier,QuantConnect.Data.Custom.Intrinio,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter EmergingMarketsETFVolatilityIndex is 33.
Long Identifier,QuantConnect.Data.Custom.Intrinio,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter TenYearTreasuryNoteVolatilityFutures is 36.
Long Identifier,QuantConnect.Data.Custom.Intrinio,Moodys,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter SeasonedAaaCorporateBondYieldRelativeTo10YearTreasuryConstantMaturity is 69.
Long Identifier,QuantConnect.Data.Custom.Intrinio,Moodys,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\EconomicDataSources.cs,,The length of the parameter SeasonedBaaCorporateBondYieldRelativeTo10YearTreasuryConstantMaturity is 69.
Long Identifier,QuantConnect.Orders,OrderSizing,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OrderSizing.cs,Value,The length of the parameter maximumOrderValueInAccountCurrency is 34.
Long Identifier,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,FutureMarginModel,The length of the parameter requiredFreeBuyingPowerPercent is 30.
Long Identifier,QuantConnect.Securities.Option,OptionMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionMarginModel.cs,OptionMarginModel,The length of the parameter requiredFreeBuyingPowerPercent is 30.
Long Identifier,QuantConnect.Securities.Option,OptionMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionMarginModel.cs,,The length of the parameter NakedPositionMarginRequirement is 30.
Long Identifier,QuantConnect.Securities.Option,OptionMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionMarginModel.cs,,The length of the parameter NakedPositionMarginRequirementOtm is 33.
Long Identifier,QuantConnect.Parameters,ParameterAttribute,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Parameters\ParameterAttribute.cs,,The length of the parameter ParameterAttributeNameProperty is 30.
Long Identifier,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,,The length of the parameter _negativeDailyDeltaPortfolioValue is 33.
Long Identifier,QuantConnect.Statistics,KellyCriterionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\KellyCriterionManager.cs,UpdateScores,The length of the parameter kellyCriterionStandardDeviation is 31.
Long Identifier,QuantConnect.Util,WorkerThread,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\WorkerThread.cs,,The length of the parameter _threadCancellationTokenSource is 30.
Long Statement,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The length of the statement  "                {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}' " is 136.
Long Statement,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The length of the statement  "                {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}' " is 136.
Long Statement,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The length of the statement  "                {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}' " is 122.
Long Statement,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The length of the statement  "                {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}' " is 122.
Long Statement,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,GenerateEquity,The length of the statement  "                var firstTickerDate = GetFirstTickerAndDate(mapFileProvider ?? MapFileProvider.Value' symbol' market' mappingResolveDate: mappingResolveDate); " is 142.
Long Statement,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,TryParseProperties,The length of the statement  "                Log.Error($"SecurityIdentifier.TryParseProperties(): Error parsing SecurityIdentifier: '{value}'' Exception: {exception}"); " is 123.
Long Statement,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The length of the statement  "                message = $"Execution Security Error: Operation timed out - {timeSpan.TotalMinutes.ToStringInvariant()} minutes max. Check for recursive loops."; " is 145.
Long Statement,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,OrderTargetsByMarginImpact,The length of the statement  "                                         && Math.Abs((targetIsDelta ? (x.TargetQuantity + x.ExistingQuantity) : x.TargetQuantity)) < Math.Abs(x.ExistingQuantity) " is 120.
Long Statement,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,AddOrUpdate,The length of the statement  "            var result = dictionary.AddOrUpdate(key' new Lazy<TValue>(() => addValueFactory(key))' (key2' old) => new Lazy<TValue>(() => updateValueFactory(key2' old.Value))); " is 163.
Long Statement,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ExchangeRoundDownInTimeZone,The length of the statement  "                // Will subtract interval to 'dateTime' in the roundingTimeZone (using the same value type instance) to avoid issues with daylight saving time changes. " is 151.
Long Statement,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ExchangeRoundDownInTimeZone,The length of the statement  "                // caused the substraction to be neutralized by daylight saving time change' which caused an infinite loop situation in this loop. " is 130.
Long Statement,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,WithEmbeddedHtmlAnchors,The length of the statement  "            var regx = new Regex("http(s)?://([\\w+?\\.\\w+])+([a-zA-Z0-9\\~\\!\\@\\#\\$\\%\\^\\&amp;\\*\\(\\)_\\-\\=\\+\\\\\\/\\?\\.\\:\\;\\'\\']*([a-zA-Z0-9\\?\\#\\=\\/]){1})?"' RegexOptions.IgnoreCase); " is 193.
Long Statement,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateOptionTickerOSI,The length of the statement  "                throw new ArgumentException(Invariant($"{nameof(GenerateOptionTickerOSI)} returns symbol to be an option' received {symbol.SecurityType}.")); " is 141.
Long Statement,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateOptionTickerOSI,The length of the statement  "            return Invariant($"{underlying'-6}{expiration.ToStringInvariant(DateFormat.SixCharacter)}{right.ToString()[0]}{(strikePrice * 1000m):00000000}"); " is 145.
Long Statement,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The length of the statement  "            var sid = SecurityIdentifier.GenerateOption(expiration' underlyingSid' Market.USA' strike' right' OptionStyle.American); " is 120.
Long Statement,QuantConnect,SymbolValueJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolValueJsonConverter.cs,CanConvert,The length of the statement  "            throw new NotImplementedException("The SymbolValueJsonConverter is intended to be decorated on the appropriate member directly."); " is 130.
Long Statement,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,ParseDate,The length of the statement  "                if (DateTime.TryParseExact(dateToParse' DateFormat.SixCharacter' CultureInfo.InvariantCulture' DateTimeStyles.None' out date)) " is 126.
Long Statement,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,ParseDate,The length of the statement  "                if (DateTime.TryParseExact(dateToParse' DateFormat.EightCharacter' CultureInfo.InvariantCulture' DateTimeStyles.None' out date)) " is 128.
Long Statement,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,ParseDate,The length of the statement  "                if (DateTime.TryParseExact(dateToParse.Substring(0' 19)' DateFormat.JsonFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out date)) " is 141.
Long Statement,QuantConnect.Algorithm.Framework.Alphas.Analysis,InsightManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Analysis\InsightManager.cs,Step,The length of the statement  "                            Log.Error(Invariant($"InsightManager.Step(): Warning {frontierTimeUtc} UTC: insight {insight} initial price value is 0")); " is 122.
Long Statement,QuantConnect.Algorithm.Framework.Alphas.Analysis,InsightManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Analysis\InsightManager.cs,UpdateScores,The length of the statement  "                        // not all insights can receive every score type' for example' insight.Magnitude==null' not point in doing magnitude scoring " is 124.
Long Statement,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,Group,The length of the statement  "                    throw new InvalidOperationException($"Unable to set group id on insight {insight} because it has already been assigned to a group."); " is 133.
Long Statement,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,ComputeCloseTime,The length of the statement  "            // remap hours to minutes to avoid complications w/ stepping through' for example 9->10 is an hour step but market opens at 9:30 " is 128.
Long Statement,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,ComputePeriod,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(closeTimeUtc)' "Insight closeTimeUtc must be greater than generatedTimeUtc."); " is 123.
Long Statement,QuantConnect.Algorithm.Framework.Portfolio,PortfolioTarget,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Portfolio\PortfolioTarget.cs,Percent,The length of the statement  "                    Invariant($"'Algorithm.Settings' 'MaxAbsolutePortfolioTargetPercentage': {algorithm.Settings.MaxAbsolutePortfolioTargetPercentage}") + " is 134.
Long Statement,QuantConnect.Algorithm.Framework.Portfolio,PortfolioTarget,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Portfolio\PortfolioTarget.cs,Percent,The length of the statement  "                    Invariant($" or 'MinAbsolutePortfolioTargetPercentage': {algorithm.Settings.MinAbsolutePortfolioTargetPercentage}. Skipping") " is 125.
Long Statement,QuantConnect.Algorithm.Framework.Portfolio,PortfolioTarget,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Portfolio\PortfolioTarget.cs,Percent,The length of the statement  "                new GetMaximumOrderQuantityForTargetValueParameters(algorithm.Portfolio' security' adjustedPercent' silenceNonErrorReasons:true) " is 128.
Long Statement,QuantConnect.Algorithm.Framework.Alphas.Analysis.Providers,AlgorithmSecurityValuesProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Analysis\Providers\AlgorithmSecurityValuesProvider.cs,GetValues,The length of the statement  "            return new SecurityValues(symbol' _algorithm.UtcTime' security.Exchange.Hours' security.Price' security.VolatilityModel.Volatility' volume' security.QuoteCurrency.ConversionRate); " is 179.
Long Statement,QuantConnect.Algorithm.Framework.Alphas.Analysis.Providers,AlgorithmSecurityValuesProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Analysis\Providers\AlgorithmSecurityValuesProvider.cs,GetAllValues,The length of the statement  "                    return new SecurityValues(security.Symbol' _algorithm.UtcTime' security.Exchange.Hours' security.Price' security.VolatilityModel.Volatility' volume' security.QuoteCurrency.ConversionRate); " is 188.
Long Statement,QuantConnect.Brokerages,AlpacaBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\AlpacaBrokerageModel.cs,CanSubmitOrder,The length of the statement  "            if (order.Type != OrderType.Limit && order.Type != OrderType.Market && order.Type != OrderType.StopMarket && order.Type != OrderType.StopLimit && order.Type != OrderType.MarketOnOpen) " is 183.
Long Statement,QuantConnect.Brokerages,DefaultBrokerageMessageHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\DefaultBrokerageMessageHandler.cs,Handle,The length of the statement  "                        Log.Trace("DefaultBrokerageMessageHandler.Handle(): Disconnect when exchanges are closed' checking back before exchange open."); " is 128.
Long Statement,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,CanSubmitOrder,The length of the statement  "                return IsValidOrderPrices(security' OrderType.StopMarket' stopMarket.Direction' stopMarket.StopPrice' security.Price' ref message); " is 131.
Long Statement,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,IsValidOrderPrices,The length of the statement  "            var invalidPrice = orderType == OrderType.Limit && orderDirection == OrderDirection.Buy && limitPrice > security.Price || " is 121.
Long Statement,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,IsValidOrderPrices,The length of the statement  "                    "Limit Buy orders and Stop Sell orders must be below market' Limit Sell orders and Stop Buy orders must be above market." " is 121.
Long Statement,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,IsValidOrderPrices,The length of the statement  "                    Invariant($"The {orderType} {orderDirection} order price ({orderPrice}) is too far from the current market price ({currentPrice}).") " is 132.
Long Statement,QuantConnect.Brokerages,GDAXBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\GDAXBrokerageModel.cs,CanSubmitOrder,The length of the statement  "            if (order.Type != OrderType.Limit && order.Type != OrderType.Market && order.Type != OrderType.StopMarket && order.Type != OrderType.StopLimit) " is 143.
Long Statement,QuantConnect.Brokerages,InteractiveBrokersBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\InteractiveBrokersBrokerageModel.cs,CanSubmitOrder,The length of the statement  "                    Invariant($"The {nameof(InteractiveBrokersBrokerageModel)} does not support {order.TimeInForce.GetType().Name} time in force.") " is 127.
Long Statement,QuantConnect.Data.Auxiliary,FactorFile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFile.cs,Read,The length of the statement  "            return new FactorFile(permtick' FactorFileRow.Read(permtick' market' out factorFileMinimumDate)' factorFileMinimumDate); " is 120.
Long Statement,QuantConnect.Data.Auxiliary,FactorFile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFile.cs,Apply,The length of the statement  "            var firstFactorFileRow = new FactorFileRow(firstEntry.Date' factorFileRows.Last().PriceFactor' factorFileRows.Last().SplitFactor' firstEntry.ReferencePrice == 0 ? 0 : firstEntry.ReferencePrice); " is 194.
Long Statement,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,Read,The length of the statement  "            var path = Path.Combine(Globals.CacheDataFolder' "equity"' market' "factor_files"' permtick.ToLowerInvariant() + ".csv"); " is 121.
Long Statement,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,Apply,The length of the statement  "                    $"Factor file row date '{Date:yyy-MM-dd}' is before dividend previous trading date '{previousTradingDay.Date:yyyy-MM-dd}'." " is 123.
Long Statement,QuantConnect.Data.Auxiliary,MapFileResolver,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\MapFileResolver.cs,ResolveMapFile,The length of the statement  "                // otherwise' a negative number that is the bitwise complement of the index of the next element that is larger than item " is 120.
Long Statement,QuantConnect.Data.Consolidators,PeriodCountConsolidatorBase<T;TConsolidated>,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Consolidators\PeriodCountConsolidatorBase.cs,Update,The length of the statement  "                throw new InvalidOperationException($"Consolidators can only be used with a single symbol. The previous consolidated symbol ({symbol}) is not the same as in the current data ({data.Symbol})."); " is 193.
Long Statement,QuantConnect.Data.Consolidators,PeriodCountConsolidatorBase<T;TConsolidated>,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Consolidators\PeriodCountConsolidatorBase.cs,Scan,The length of the statement  "                if (_period.Value != TimeSpan.Zero && currentLocalTime - _workingBar.Time >= _period.Value && currentLocalTime > _lastEmit) " is 123.
Long Statement,QuantConnect.Data.Custom.Benzinga,BenzingaNewsJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Benzinga\BenzingaNewsJsonConverter.cs,DeserializeNews,The length of the statement  "                            SecurityIdentifier.GenerateEquity(symbolTicker' QuantConnect.Market.USA' mapSymbol: true' mappingResolveDate: instance.CreatedAt)' " is 130.
Long Statement,QuantConnect.Data.Custom.Benzinga,BenzingaNewsJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Benzinga\BenzingaNewsJsonConverter.cs,DeserializeNews,The length of the statement  "                            Log.Trace($"BenzingaNewsJsonConverter.DeserializeNews(): Ticker {symbolTicker} will be added as: {string.Join("'"' ShareClassMappedTickers[symbolTicker])}"); " is 157.
Long Statement,QuantConnect.Data.Custom.Benzinga,BenzingaNewsJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Benzinga\BenzingaNewsJsonConverter.cs,DeserializeNews,The length of the statement  "                                SecurityIdentifier.GenerateEquity(mappedTicker' QuantConnect.Market.USA' mapSymbol: true' mappingResolveDate: instance.CreatedAt)' " is 130.
Long Statement,QuantConnect.Data.Custom.CBOE,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\CBOE\CBOE.cs,GetSource,The length of the statement  "                return new SubscriptionDataSource($"http://cache.quantconnect.com/alternative/cboe/{config.Symbol.Value.ToLowerInvariant()}.csv"' SubscriptionTransportMedium.RemoteFile); " is 170.
Long Statement,QuantConnect.Data.Custom.Fred,Fred,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\CBOE.cs,GetSource,The length of the statement  "                return new SubscriptionDataSource($"http://cache.quantconnect.com/alternative/fred/{config.Symbol.Value.ToLowerInvariant()}.csv"' " is 129.
Long Statement,QuantConnect.Data.Custom.Fred,FredApi,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Fred\FredApi.cs,GetSource,The length of the statement  "                $"https://api.stlouisfed.org/fred/series/observations?file_type=json&observation_start=1998-01-01&api_key={AuthCode}&series_id={config.Symbol}"' " is 144.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            EventType = string.IsNullOrWhiteSpace(tsv[1]) ? (SmartInsiderEventType?)null : JsonConvert.DeserializeObject<SmartInsiderEventType>($"\"{tsv[1]}\""); " is 149.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 142.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture); " is 124.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 162.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 159.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 145.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 145.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            AnnouncementDate = string.IsNullOrWhiteSpace(tsv[37]) ? (DateTime?)null : DateTime.ParseExact(tsv[37]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 147.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            TimeReleased = string.IsNullOrWhiteSpace(tsv[38]) ? (DateTime?)null : DateTime.ParseExact(tsv[38].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture); " is 175.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            TimeProcessed = string.IsNullOrWhiteSpace(tsv[39]) ? (DateTime?)null : DateTime.ParseExact(tsv[39].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture); " is 176.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[40]) ? (DateTime?)null : DateTime.ParseExact(tsv[40].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture); " is 178.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[41]) ? (DateTime?)null : DateTime.ParseExact(tsv[41].Replace(" "' "").Trim()' "yyyy-MM-ddHH:mm:ss"' CultureInfo.InvariantCulture); " is 179.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            Execution = string.IsNullOrWhiteSpace(tsv[43]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[43]}\""); " is 151.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            ExecutionEntity = string.IsNullOrWhiteSpace(tsv[44]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[44]}\""); " is 169.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            ExecutionHolding = string.IsNullOrWhiteSpace(tsv[45]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[45]}\""); " is 172.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            ExecutionHolding = ExecutionHolding == SmartInsiderExecutionHolding.Error ? SmartInsiderExecutionHolding.SatisfyStockVesting : ExecutionHolding; " is 144.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            AmountValue = string.IsNullOrWhiteSpace(tsv[48]) ? (long?)null : Convert.ToInt64(tsv[48]' CultureInfo.InvariantCulture); " is 120.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            Percentage = string.IsNullOrWhiteSpace(tsv[49]) ? (decimal?)null : Convert.ToDecimal(tsv[49]' CultureInfo.InvariantCulture); " is 124.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            AuthorizationStartDate = string.IsNullOrWhiteSpace(tsv[50]) ? (DateTime?)null : DateTime.ParseExact(tsv[50]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 153.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            AuthorizationEndDate = string.IsNullOrWhiteSpace(tsv[51]) ? (DateTime?)null : DateTime.ParseExact(tsv[51]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 151.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            MinimumPrice = string.IsNullOrWhiteSpace(tsv[53]) ? (decimal?)null : Convert.ToDecimal(tsv[53]' CultureInfo.InvariantCulture); " is 126.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The length of the statement  "            MaximumPrice = string.IsNullOrWhiteSpace(tsv[54]) ? (decimal?)null : Convert.ToDecimal(tsv[54]' CultureInfo.InvariantCulture); " is 126.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            EventType = string.IsNullOrWhiteSpace(tsv[1]) ? (SmartInsiderEventType?)null : JsonConvert.DeserializeObject<SmartInsiderEventType>($"\"{tsv[1]}\""); " is 149.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 142.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture); " is 124.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 162.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 159.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 145.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 145.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            BuybackDate = string.IsNullOrWhiteSpace(tsv[20]) ? (DateTime?)null : DateTime.ParseExact(tsv[20]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 142.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            Execution = string.IsNullOrWhiteSpace(tsv[21]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[21]}\""); " is 151.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            ExecutionEntity = string.IsNullOrWhiteSpace(tsv[22]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[22]}\""); " is 169.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            ExecutionHolding = string.IsNullOrWhiteSpace(tsv[23]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[23]}\""); " is 172.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            ExecutionHolding = ExecutionHolding == SmartInsiderExecutionHolding.Error ? SmartInsiderExecutionHolding.SatisfyStockVesting : ExecutionHolding; " is 144.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            ExecutionPrice = string.IsNullOrWhiteSpace(tsv[25]) ? (decimal?)null : Convert.ToDecimal(tsv[25]' CultureInfo.InvariantCulture); " is 128.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            Amount = string.IsNullOrWhiteSpace(tsv[26]) ? (decimal?)null : Convert.ToDecimal(tsv[26]' CultureInfo.InvariantCulture); " is 120.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            GBPValue = string.IsNullOrWhiteSpace(tsv[27]) ? (decimal?)null : Convert.ToDecimal(tsv[27]' CultureInfo.InvariantCulture); " is 122.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            EURValue = string.IsNullOrWhiteSpace(tsv[28]) ? (decimal?)null : Convert.ToDecimal(tsv[28]' CultureInfo.InvariantCulture); " is 122.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            USDValue = string.IsNullOrWhiteSpace(tsv[29]) ? (decimal?)null : Convert.ToDecimal(tsv[29]' CultureInfo.InvariantCulture); " is 122.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            BuybackPercentage = string.IsNullOrWhiteSpace(tsv[31]) ? (decimal?)null : Convert.ToDecimal(tsv[31]' CultureInfo.InvariantCulture); " is 131.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            VolumePercentage = string.IsNullOrWhiteSpace(tsv[32]) ? (decimal?)null : Convert.ToDecimal(tsv[32]' CultureInfo.InvariantCulture); " is 130.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            ConversionRate = string.IsNullOrWhiteSpace(tsv[33]) ? (decimal?)null : Convert.ToDecimal(tsv[33]' CultureInfo.InvariantCulture); " is 128.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            AmountAdjustedFactor = string.IsNullOrWhiteSpace(tsv[34]) ? (decimal?)null : Convert.ToDecimal(tsv[34]' CultureInfo.InvariantCulture); " is 134.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            PriceAdjustedFactor = string.IsNullOrWhiteSpace(tsv[35]) ? (decimal?)null : Convert.ToDecimal(tsv[35]' CultureInfo.InvariantCulture); " is 133.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            TreasuryHolding = string.IsNullOrWhiteSpace(tsv[36]) ? (int?)null : Convert.ToInt32(tsv[36]' CultureInfo.InvariantCulture); " is 123.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            AnnouncementDate = string.IsNullOrWhiteSpace(tsv[37]) ? (DateTime?)null : DateTime.ParseExact(tsv[37]' "yyyy-MM-dd"' CultureInfo.InvariantCulture); " is 147.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            TimeReleased = string.IsNullOrWhiteSpace(tsv[38]) ? (DateTime?)null : DateTime.ParseExact(tsv[38].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture); " is 175.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            TimeProcessed = string.IsNullOrWhiteSpace(tsv[39]) ? (DateTime?)null : DateTime.ParseExact(tsv[39].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture); " is 176.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[40]) ? (DateTime?)null : DateTime.ParseExact(tsv[40].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture); " is 178.
Long Statement,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The length of the statement  "            TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[41]) ? (DateTime?)null : DateTime.ParseExact(tsv[41].Replace(" "' "").Trim()' "yyyy-MM-ddHH:mm:ss"' CultureInfo.InvariantCulture); " is 179.
Long Statement,QuantConnect.Data.Custom.Tiingo,TiingoNews,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Tiingo\TiingoNews.cs,GetSource,The length of the statement  "                    throw new InvalidOperationException("TiingoNews API token has to be set using Tiingo.SetAuthCode(). See https://api.tiingo.com/about/pricing"); " is 143.
Long Statement,QuantConnect.Data.Custom.Tiingo,TiingoNews,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Tiingo\TiingoNews.cs,GetSource,The length of the statement  "                var url = Invariant($"https://api.tiingo.com/tiingo/news?tickers={tiingoTicker}&startDate={date:yyyy-MM-dd}&token={Tiingo.AuthCode}&sortBy=crawlDate"); " is 151.
Long Statement,QuantConnect.Data.Custom.Tiingo,TiingoPrice,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Tiingo\TiingoPrice.cs,GetSource,The length of the statement  "            var source = Invariant($"https://api.tiingo.com/tiingo/daily/{tiingoTicker}/prices?startDate={startDate:yyyy-MM-dd}&token={Tiingo.AuthCode}"); " is 142.
Long Statement,QuantConnect.Data.Custom.TradingEconomics,TradingEconomicsIndicator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomicsIndicator.cs,GetSource,The length of the statement  "            var source = Path.Combine(Globals.DataFolder' "alternative"' "trading-economics"' "indicator"' symbol' Invariant($"{date:yyyyMMdd}.zip")); " is 138.
Long Statement,QuantConnect.Data.Custom.TradingEconomics,TradingEconomicsCalendar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\TradingEconomics\TradingEconomicsCalendar.cs,GetSource,The length of the statement  "            var source = Path.Combine(Globals.DataFolder' "alternative"' "trading-economics"' "calendar"' symbol' Invariant($"{date:yyyyMMdd}.zip")); " is 137.
Long Statement,QuantConnect.Data.Custom.USEnergy,USEnergy,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergy.cs,GetSource,The length of the statement  "                return new SubscriptionDataSource($"http://cache.quantconnect.com/alternative/usenergy/{config.Symbol.Value.ToLowerInvariant()}.csv"' SubscriptionTransportMedium.RemoteFile); " is 174.
Long Statement,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The length of the statement  "            // Date[0]' 1 mo[1]' 2 mo[2]' 3 mo[3]' 6 mo[4]' 1 yr[5]' 2 yr[6] 3 yr[7]' 5 yr[8]' 7 yr [9]' 10 yr[10]' 20 yr[11]' 30 yr[12] " is 124.
Long Statement,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The length of the statement  "            if (!DateTime.TryParseExact(csv[0]' DateFormat.EightCharacter' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal' out csvDate)) " is 138.
Long Statement,QuantConnect.Data.Fundamental,AssetClassification,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\AssetClassification.cs,UpdateValues,The length of the statement  "			if (update.MorningstarIndustryGroupCode != default(int)) MorningstarIndustryGroupCode = update.MorningstarIndustryGroupCode; " is 124.
Long Statement,QuantConnect.Data.Fundamental,AssetClassification,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\AssetClassification.cs,UpdateValues,The length of the statement  "			if (update.MorningstarEconomySphereCode != default(int)) MorningstarEconomySphereCode = update.MorningstarEconomySphereCode; " is 124.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.HeadquarterAddressLine1)) HeadquarterAddressLine1 = update.HeadquarterAddressLine1; " is 121.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.HeadquarterAddressLine2)) HeadquarterAddressLine2 = update.HeadquarterAddressLine2; " is 121.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.HeadquarterAddressLine3)) HeadquarterAddressLine3 = update.HeadquarterAddressLine3; " is 121.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.HeadquarterAddressLine4)) HeadquarterAddressLine4 = update.HeadquarterAddressLine4; " is 121.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.HeadquarterAddressLine5)) HeadquarterAddressLine5 = update.HeadquarterAddressLine5; " is 121.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (update.IsHeadOfficeSameWithRegisteredOfficeFlag != default(bool)) IsHeadOfficeSameWithRegisteredOfficeFlag = update.IsHeadOfficeSameWithRegisteredOfficeFlag; " is 161.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (update.ShareClassLevelSharesOutstanding != default(long)) ShareClassLevelSharesOutstanding = update.ShareClassLevelSharesOutstanding; " is 137.
Long Statement,QuantConnect.Data.Fundamental,CompanyProfile,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CompanyProfile.cs,UpdateValues,The length of the statement  "			if (update.SharesOutstandingWithBalanceSheetEndingDate != default(long)) SharesOutstandingWithBalanceSheetEndingDate = update.SharesOutstandingWithBalanceSheetEndingDate; " is 170.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase?.UpdateValues(update.FederalFundsPurchasedAndSecuritiesSoldUnderAgreementToRepurchase); " is 152.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell?.UpdateValues(update.FederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell); " is 144.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			FinancialInstrumentsSoldUnderAgreementsToRepurchase?.UpdateValues(update.FinancialInstrumentsSoldUnderAgreementsToRepurchase); " is 126.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			NonCurrentPensionAndOtherPostretirementBenefitPlans?.UpdateValues(update.NonCurrentPensionAndOtherPostretirementBenefitPlans); " is 126.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			TotalDeferredCreditsAndOtherNonCurrentLiabilities?.UpdateValues(update.TotalDeferredCreditsAndOtherNonCurrentLiabilities); " is 122.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal?.UpdateValues(update.FinancialAssetsDesignatedasFairValueThroughProfitorLossTotal); " is 144.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			PensionandOtherPostRetirementBenefitPlansCurrent?.UpdateValues(update.PensionandOtherPostRetirementBenefitPlansCurrent); " is 120.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal?.UpdateValues(update.AssetsPledgedasCollateralSubjecttoSaleorRepledgingTotal); " is 134.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal?.UpdateValues(update.FinancialLiabilitiesDesignatedasFairValueThroughProfitorLossTotal); " is 154.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			FinancialLiabilitiesMeasuredatAmortizedCostTotal?.UpdateValues(update.FinancialLiabilitiesMeasuredatAmortizedCostTotal); " is 120.
Long Statement,QuantConnect.Data.Fundamental,BalanceSheet,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\BalanceSheet.cs,UpdateValues,The length of the statement  "			FinancialOrDerivativeInvestmentCurrentLiabilities?.UpdateValues(update.FinancialOrDerivativeInvestmentCurrentLiabilities); " is 122.
Long Statement,QuantConnect.Data.Fundamental,CashFlowStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CashFlowStatement.cs,UpdateValues,The length of the statement  "			ChangeInFederalFundsAndSecuritiesSoldForRepurchase?.UpdateValues(update.ChangeInFederalFundsAndSecuritiesSoldForRepurchase); " is 124.
Long Statement,QuantConnect.Data.Fundamental,CashFlowStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CashFlowStatement.cs,UpdateValues,The length of the statement  "			ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses?.UpdateValues(update.ChangeInReinsuranceRecoverableOnPaidAndUnpaidLosses); " is 126.
Long Statement,QuantConnect.Data.Fundamental,CashFlowStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CashFlowStatement.cs,UpdateValues,The length of the statement  "			ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell?.UpdateValues(update.ProceedsPaymentFederalFundsSoldAndSecuritiesPurchasedUnderAgreementToResell); " is 174.
Long Statement,QuantConnect.Data.Fundamental,CashFlowStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\CashFlowStatement.cs,UpdateValues,The length of the statement  "			CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties?.UpdateValues(update.CashReceiptsfromRepaymentofAdvancesandLoansMadetoOtherParties); " is 146.
Long Statement,QuantConnect.Data.Fundamental,FinancialStatements,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\FinancialStatements.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.InventoryValuationMethod)) InventoryValuationMethod = update.InventoryValuationMethod; " is 124.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			NetIncomeContinuousOperationsNetMinorityInterest?.UpdateValues(update.NetIncomeContinuousOperationsNetMinorityInterest); " is 120.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			ExplorationDevelopmentAndMineralPropertyLeaseExpenses?.UpdateValues(update.ExplorationDevelopmentAndMineralPropertyLeaseExpenses); " is 130.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell?.UpdateValues(update.InterestExpenseForFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell); " is 180.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			InterestExpenseForLongTermDebtAndCapitalSecurities?.UpdateValues(update.InterestExpenseForLongTermDebtAndCapitalSecurities); " is 124.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell?.UpdateValues(update.InterestIncomeFromFederalFundsSoldAndSecuritiesPurchaseUnderAgreementsToResell); " is 180.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			NetIncomeFromContinuingOperationNetMinorityInterest?.UpdateValues(update.NetIncomeFromContinuingOperationNetMinorityInterest); " is 126.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			IncomefromAssociatesandOtherParticipatingInterests?.UpdateValues(update.IncomefromAssociatesandOtherParticipatingInterests); " is 124.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			GainLossonFinancialInstrumentsDesignatedasCashFlowHedges?.UpdateValues(update.GainLossonFinancialInstrumentsDesignatedasCashFlowHedges); " is 136.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			GainLossonDerecognitionofAvailableForSaleFinancialAssets?.UpdateValues(update.GainLossonDerecognitionofAvailableForSaleFinancialAssets); " is 136.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal?.UpdateValues(update.GainsLossesonFinancialInstrumentsDuetoFairValueAdjustmentsinHedgeAccountingTotal); " is 184.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			ImpairmentLossesReversalsFinancialInstrumentsNet?.UpdateValues(update.ImpairmentLossesReversalsFinancialInstrumentsNet); " is 120.
Long Statement,QuantConnect.Data.Fundamental,IncomeStatement,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\IncomeStatement.cs,UpdateValues,The length of the statement  "			ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare?.UpdateValues(update.ChangeinTheGrossProvisionforUnearnedPremiumsReinsurersShare); " is 142.
Long Statement,QuantConnect.Data.Fundamental,SecurityReference,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\SecurityReference.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.ExchangeSubMarketGlobalId)) ExchangeSubMarketGlobalId = update.ExchangeSubMarketGlobalId; " is 127.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.WorkingCapitalPerShare3YrAvg != default(decimal)) WorkingCapitalPerShare3YrAvg = update.WorkingCapitalPerShare3YrAvg; " is 128.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.WorkingCapitalPerShare5YrAvg != default(decimal)) WorkingCapitalPerShare5YrAvg = update.WorkingCapitalPerShare5YrAvg; " is 128.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.TwoYearsForwardEarningYield != default(decimal)) TwoYearsForwardEarningYield = update.TwoYearsForwardEarningYield; " is 125.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.ForwardCalculationStyle)) ForwardCalculationStyle = update.ForwardCalculationStyle; " is 121.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (!string.IsNullOrWhiteSpace(update.TrailingCalculationStyle)) TrailingCalculationStyle = update.TrailingCalculationStyle; " is 124.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.ExpectedDividendGrowthRate != default(decimal)) ExpectedDividendGrowthRate = update.ExpectedDividendGrowthRate; " is 122.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.EVToTotalAssets1YearGrowth != default(decimal)) EVToTotalAssets1YearGrowth = update.EVToTotalAssets1YearGrowth; " is 122.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.EVToTotalAssets3YrAvgChange != default(decimal)) EVToTotalAssets3YrAvgChange = update.EVToTotalAssets3YrAvgChange; " is 125.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.EVToTotalAssets3YearGrowth != default(decimal)) EVToTotalAssets3YearGrowth = update.EVToTotalAssets3YearGrowth; " is 122.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.EVToTotalAssets5YearGrowth != default(decimal)) EVToTotalAssets5YearGrowth = update.EVToTotalAssets5YearGrowth; " is 122.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.EVToTotalAssets10YearGrowth != default(decimal)) EVToTotalAssets10YearGrowth = update.EVToTotalAssets10YearGrowth; " is 125.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.FirstYearEstimatedEPSGrowth != default(decimal)) FirstYearEstimatedEPSGrowth = update.FirstYearEstimatedEPSGrowth; " is 125.
Long Statement,QuantConnect.Data.Fundamental,ValuationRatios,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Generated\ValuationRatios.cs,UpdateValues,The length of the statement  "			if (update.SecondYearEstimatedEPSGrowth != default(decimal)) SecondYearEstimatedEPSGrowth = update.SecondYearEstimatedEPSGrowth; " is 128.
Long Statement,QuantConnect.Data,HistoryRequestFactory,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\HistoryRequestFactory.cs,CreateHistoryRequest,The length of the statement  "            var dataType = subscription.IsCustomData ? subscription.Type : LeanData.GetDataType(resolution.Value' subscription.TickType); " is 125.
Long Statement,QuantConnect.Data,Slice,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Slice.cs,GetImpl,The length of the statement  "                            instance._data.Value.Values.SelectMany<dynamic' dynamic>(x => x.GetData()).Where(o => o != null && (Type)o.GetType() == type)) " is 126.
Long Statement,QuantConnect.Data,Slice,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Slice.cs,GetImpl,The length of the statement  "                        foreach (var data in instance._data.Value.Values.Select(x => x.GetData()).Where(o => o != null && (Type)o.GetType() == type)) " is 125.
Long Statement,QuantConnect.Data.UniverseSelection,UniverseExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UniverseExtensions.cs,ChainedTo,The length of the statement  "                return first.GetSubscriptionRequests(security' currentTimeUtc' maximumEndTimeUtc).Select(request => new SubscriptionRequest( " is 124.
Long Statement,QuantConnect.Data.UniverseSelection,UniverseExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UniverseExtensions.cs,ChainedTo,The length of the statement  "                    configuration: configurationPerSymbol ? new SubscriptionDataConfig(prefilteredSecond.Configuration' symbol: security.Symbol) : prefilteredSecond.Configuration' " is 159.
Long Statement,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,GetSource,The length of the statement  "            var path = Path.Combine(Globals.DataFolder' "equity"' config.Market' "fundamental"' "coarse"' Invariant($"{date:yyyyMMdd}.csv")); " is 129.
Long Statement,QuantConnect.Data.UniverseSelection,UserDefinedUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UserDefinedUniverse.cs,Add,The length of the statement  "                OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add' subscriptionDataConfig.Symbol)); " is 124.
Long Statement,QuantConnect.Data.UniverseSelection,UserDefinedUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\UserDefinedUniverse.cs,GetSubscriptionRequests,The length of the statement  "                    result = base.GetSubscriptionRequests(security' currentTimeUtc' maximumEndTimeUtc' subscriptionService).Select(x => x.Configuration).ToList(); " is 142.
Long Statement,QuantConnect.Indicators,IndicatorDataPoint,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Indicators\IndicatorDataPoint.cs,Reader,The length of the statement  "            throw new NotImplementedException("IndicatorDataPoint does not support the Reader function. This function should never be called on this type."); " is 145.
Long Statement,QuantConnect.Indicators,IndicatorDataPoint,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Indicators\IndicatorDataPoint.cs,GetSource,The length of the statement  "            throw new NotImplementedException("IndicatorDataPoint does not support the GetSource function. This function should never be called on this type."); " is 148.
Long Statement,QuantConnect.Python,MarginCallModelPythonWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\MarginCallModelPythonWrapper.cs,GetMarginCallOrders,The length of the statement  "                    throw new ArgumentException($"{_model.__class__.__name__}.GetMarginCallOrders: Must return a tuple' where the first item is a list and the second a boolean"); " is 158.
Long Statement,QuantConnect.Python,PythonWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PythonWrapper.cs,ValidateImplementationOf,The length of the statement  "                throw new ArgumentException($"{nameof(PythonWrapper)}.{nameof(ValidateImplementationOf)} expected an interface type parameter."); " is 129.
Long Statement,QuantConnect.Python,PythonWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PythonWrapper.cs,ValidateImplementationOf,The length of the statement  "                throw new NotImplementedException($"{nameof(TInterface)} must be fully implemented. Missing implementations: {string.Join("' "' missingMembers)}"); " is 147.
Long Statement,QuantConnect.Scheduling,DateRules,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Scheduling\DateRules.cs,Every,The length of the statement  "            return new FuncDateRule(string.Join("'"' days)' (start' end) => Time.EachDay(start' end).Where(date => hash.Contains(date.DayOfWeek))); " is 135.
Long Statement,QuantConnect.Scheduling,DateRules,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Scheduling\DateRules.cs,MonthStart,The length of the statement  "            return new FuncDateRule($"{symbol.Value}: MonthStart"' (start' end) => MonthStartIterator(GetSecurity(symbol)' start' end)); " is 124.
Long Statement,QuantConnect.Scheduling,DateRules,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Scheduling\DateRules.cs,MonthEnd,The length of the statement  "            return new FuncDateRule($"{symbol.Value}: MonthEnd"' (start' end) => MonthEndIterator(GetSecurity(symbol)' start' end)); " is 120.
Long Statement,QuantConnect.Scheduling,DateRules,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Scheduling\DateRules.cs,WeekStart,The length of the statement  "            return new FuncDateRule($"{symbol.Value}: WeekStart"' (start' end) => WeekStartIterator(GetSecurity(symbol)' start' end)); " is 122.
Long Statement,QuantConnect.Scheduling,DateRules,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Scheduling\DateRules.cs,GetSecurity,The length of the statement  "                throw new KeyNotFoundException(symbol.Value + " not found in portfolio. Request this data when initializing the algorithm."); " is 125.
Long Statement,QuantConnect.Scheduling,ScheduledEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Scheduling\ScheduledEvent.cs,SkipEventsUntil,The length of the statement  "                Log.Trace($"ScheduledEvent.{Name}: Exhausted event stream during skip until {utcTime.ToStringInvariant(DateFormat.UI)}"); " is 121.
Long Statement,QuantConnect.Scheduling,TimeRules,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Scheduling\TimeRules.cs,Every,The length of the statement  "            Func<IEnumerable<DateTime>' IEnumerable<DateTime>> applicator = dates => EveryIntervalIterator(dates' interval' _timeZone); " is 123.
Long Statement,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                // for option assignment and exercise orders we look into the requirements to process the underlying security transaction " is 121.
Long Statement,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "            if (parameters.Security.Holdings.Quantity * parameters.Order.Quantity < 0 && Math.Abs(parameters.Security.Holdings.Quantity) >= Math.Abs(parameters.Order.Quantity)) " is 164.
Long Statement,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "            var percentUnfilled = (Math.Abs(parameters.Order.Quantity) - Math.Abs(ticket.QuantityFilled)) / Math.Abs(parameters.Order.Quantity); " is 132.
Long Statement,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                var reason = $"The price of the {parameters.Security.Symbol.Value} security is zero because it does not have any market " + " is 123.
Long Statement,QuantConnect.Securities,IdentityCurrencyConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\IdentityCurrencyConverter.cs,ConvertToAccountCurrency,The length of the statement  "                throw new ArgumentException($"The {nameof(IdentityCurrencyConverter)} can only handle CashAmounts in units of the account currency"); " is 133.
Long Statement,QuantConnect.Securities,DynamicSecurityData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DynamicSecurityData.cs,SetProperty,The length of the statement  "            throw new InvalidOperationException("DynamicSecurityData is a view of the SecurityCache. It is readonly' properties can not be set"); " is 133.
Long Statement,QuantConnect.Securities,SecurityService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityService.cs,CreateSecurity,The length of the statement  "            if (symbol.ID.SecurityType == SecurityType.Crypto && !_symbolPropertiesDatabase.ContainsKey(symbol.ID.Market' symbol' symbol.ID.SecurityType)) " is 142.
Long Statement,QuantConnect.Securities,SecurityService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityService.cs,CreateSecurity,The length of the statement  "            var symbolProperties = _symbolPropertiesDatabase.GetSymbolProperties(symbol.ID.Market' symbol' symbol.ID.SecurityType' defaultQuoteCurrency); " is 141.
Long Statement,QuantConnect.Securities,SecurityService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityService.cs,CreateSecurity,The length of the statement  "                    security = new Option.Option(symbol' exchangeHours' quoteCash' new Option.OptionSymbolProperties(symbolProperties)' _cashBook' _registeredTypes' cache); " is 152.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                return new HasSufficientBuyingPowerForOrderResult(false' $"The '{parameters.Security.Symbol.Value}' security is not supported by this cash model. Currently only SecurityType.Crypto and SecurityType.Forex are supported."); " is 221.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "            var openOrdersReservedQuantity = GetOpenOrdersReservedQuantity(parameters.Portfolio' parameters.Security' parameters.Order); " is 124.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                    reason = Invariant($"Your portfolio holds {totalQuantity.Normalize()} {baseCurrency.BaseCurrencySymbol}' {openOrdersReservedQuantity.Normalize()} {baseCurrency.BaseCurrencySymbol} of which are reserved for open orders' but your Sell order is for {orderQuantity.Normalize()} {baseCurrency.BaseCurrencySymbol}. Cash Modeling trading does not permit short holdings so ensure you only sell what you have' including any additional open orders."); " is 441.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                        parameters.Portfolio.CashBook[baseCurrency.BaseCurrencySymbol].Amount' baseCurrency.BaseCurrencySymbol' parameters.Security.QuoteCurrency.Symbol); " is 146.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                var targetPercent = parameters.Portfolio.TotalPortfolioValue == 0 ? 0 : targetValue / parameters.Portfolio.TotalPortfolioValue; " is 127.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                        new GetMaximumOrderQuantityForTargetValueParameters(parameters.Portfolio' parameters.Security' targetPercent)).Quantity * GetOrderPrice(parameters.Security' parameters.Order); " is 175.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                    reason = Invariant($"Your portfolio holds {totalQuantity.Normalize()} {parameters.Security.QuoteCurrency.Symbol}' {openOrdersReservedQuantity.Normalize()} {parameters.Security.QuoteCurrency.Symbol} of which are reserved for open orders' but your Buy order is for {parameters.Order.AbsoluteQuantity.Normalize()} {baseCurrency.BaseCurrencySymbol}. Your order requires a total value of {orderQuantity.Normalize()} {parameters.Security.QuoteCurrency.Symbol}' but only a total value of {Math.Abs(maximumQuantity).Normalize()} {parameters.Security.QuoteCurrency.Symbol} is available."); " is 580.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,HasSufficientBuyingPowerForOrder,The length of the statement  "                reason = Invariant($"Your portfolio holds {totalQuantity.Normalize()} {parameters.Security.QuoteCurrency.Symbol}' {openOrdersReservedQuantity.Normalize()} {parameters.Security.QuoteCurrency.Symbol} of which are reserved for open orders' but your Buy order is for {parameters.Order.AbsoluteQuantity.Normalize()} {baseCurrency.BaseCurrencySymbol}. Your order requires a total value of {orderQuantity.Normalize()} {parameters.Security.QuoteCurrency.Symbol}' but only a total value of {(totalQuantity - openOrdersReservedQuantity - orderFee).Normalize()} {parameters.Security.QuoteCurrency.Symbol} is available."); " is 610.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                return new GetMaximumOrderQuantityForTargetValueResult(0' "The security type must be SecurityType.Crypto or SecurityType.Forex."); " is 130.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                return new GetMaximumOrderQuantityForTargetValueResult(-parameters.Portfolio.CashBook[baseCurrency.BaseCurrencySymbol].Amount); " is 127.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "            unitPrice *= parameters.Security.QuoteCurrency.ConversionRate * parameters.Security.SymbolProperties.ContractMultiplier; " is 120.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                    return new GetMaximumOrderQuantityForTargetValueResult(0' $"The contract multiplier for the {parameters.Security.Symbol.Value} security is zero. The symbol properties database may be out of date."); " is 198.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                return new GetMaximumOrderQuantityForTargetValueResult(0' $"The price of the {parameters.Security.Symbol.Value} security is zero because it does not have any market data yet. When the security price is set this security will be ready for trading."); " is 249.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "            var currency = direction == OrderDirection.Buy ? parameters.Security.QuoteCurrency.Symbol : baseCurrency.BaseCurrencySymbol; " is 124.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                return new GetMaximumOrderQuantityForTargetValueResult(0' $"The portfolio does not hold any {currency} for the order."); " is 120.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                        $"The order quantity is less than the lot size of {parameters.Security.SymbolProperties.LotSize} and has been rounded to zero." " is 127.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                        Invariant($"The order quantity is less than the lot size of {parameters.Security.SymbolProperties.LotSize} and has been rounded to zero.") + " is 140.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetMaximumOrderQuantityForTargetValue,The length of the statement  "                        Invariant($"{parameters.Security.SymbolProperties.LotSize}. Order fees {orderFees}. Security symbol {parameters.Security.Symbol}") " is 130.
Long Statement,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetBuyingPower,The length of the statement  "            var unitPrice = new MarketOrder(security.Symbol' 1' utcTime).GetValue(security) / security.QuoteCurrency.ConversionRate; " is 120.
Long Statement,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,EnsureCurrencyDataFeed,The length of the statement  "            var markets = securities.Select(x => x.Key).GroupBy(x => x.SecurityType).ToDictionary(x => x.Key' y => y.First().ID.Market); " is 124.
Long Statement,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,EnsureCurrencyDataFeed,The length of the statement  "                .Concat(Currencies.CryptoCurrencyPairs.Select(crypto => CreateSymbol(marketMap' crypto' markets' SecurityType.Crypto))); " is 120.
Long Statement,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,ToString,The length of the statement  "            return Invariant($"{Symbol}: {CurrencySymbol}{Amount'15:0.00} @ {rate'10:0.00####} = ${Math.Round(ValueInAccountCurrency' 2)}"); " is 128.
Long Statement,QuantConnect.Securities,OptionFilterUniverse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionFilterUniverse.cs,Strikes,The length of the statement  "            // otherwise' a negative number that is the bitwise complement of the index of the next element that is larger than item " is 120.
Long Statement,QuantConnect.Securities,EquityPriceVariationModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\EquityPriceVariationModel.cs,GetMinimumPriceVariation,The length of the statement  "                throw new ArgumentException(Invariant($"EquityPriceVariationModel.GetMinimumPriceVariation(): Invalid SecurityType: {parameters.Security.Type}")); " is 146.
Long Statement,QuantConnect.Securities,SecurityExchangeHours,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityExchangeHours.cs,IsOpen,The length of the statement  "            if (_holidays.Contains(localDateTime.Date.Ticks) || IsTimeAfterEarlyClose(localDateTime) || IsTimeBeforeLateOpen(localDateTime)) " is 128.
Long Statement,QuantConnect.Securities,DefaultMarginCallModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DefaultMarginCallModel.cs,GetMarginCallOrders,The length of the statement  "                            var marginCallOrder = GenerateMarginCallOrder(security' totalPortfolioValue' totalMarginUsed' maintenanceMarginRequirement); " is 124.
Long Statement,QuantConnect.Securities,DefaultMarginCallModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DefaultMarginCallModel.cs,GenerateMarginCallOrder,The length of the statement  "            var quantity = Math.Round(deltaInQuoteCurrency / unitPriceInQuoteCurrency' MidpointRounding.AwayFromZero) / maintenanceMarginRequirement; " is 137.
Long Statement,QuantConnect.Securities,DefaultMarginCallModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DefaultMarginCallModel.cs,GenerateMarginCallOrder,The length of the statement  "            // don't try and liquidate more share than we currently hold' minimum value of LotSize' maximum value for absolute quantity " is 123.
Long Statement,QuantConnect.Securities,DefaultMarginCallModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DefaultMarginCallModel.cs,GenerateMarginCallOrder,The length of the statement  "            return new SubmitOrderRequest(OrderType.Market' security.Type' security.Symbol' quantity' 0' 0' security.LocalTime.ConvertToUtc(security.Exchange.TimeZone)' "Margin Call"' DefaultOrderProperties?.Clone()); " is 205.
Long Statement,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The length of the statement  "                var saleValueInQuoteCurrency = fill.FillPrice * Convert.ToDecimal(fill.AbsoluteFillQuantity) * security.SymbolProperties.ContractMultiplier; " is 140.
Long Statement,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The length of the statement  "                    security.SettlementModel.ApplyFunds(portfolio' security' fill.UtcTime' quoteCash.Symbol' -fill.FillQuantity * fill.FillPrice * security.SymbolProperties.ContractMultiplier); " is 173.
Long Statement,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The length of the statement  "                            averageHoldingsPrice = ((averageHoldingsPrice*quantityHoldings) + (fill.FillQuantity*fill.FillPrice))/(quantityHoldings + fill.FillQuantity); " is 141.
Long Statement,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The length of the statement  "                            averageHoldingsPrice = ((averageHoldingsPrice*quantityHoldings) + (fill.FillQuantity*fill.FillPrice))/(quantityHoldings + fill.FillQuantity); " is 141.
Long Statement,QuantConnect.Securities,Security,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Security.cs,AddData,The length of the statement  "            if (!subscription.ExchangeTimeZone.Equals(Exchange.TimeZone)) throw new ArgumentException("ExchangeTimeZones must match."' "subscription.ExchangeTimeZone"); " is 156.
Long Statement,QuantConnect.Securities,Security,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Security.cs,AddData,The length of the statement  "                if (!subscription.ExchangeTimeZone.Equals(Exchange.TimeZone)) throw new ArgumentException("ExchangeTimeZones must match."' "subscription.ExchangeTimeZone"); " is 156.
Long Statement,QuantConnect.Securities,SecurityCache,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityCache.cs,StoreData,The length of the statement  "#if DEBUG // don't run this in release as we should never fail here' but it's also nice to have here as documentation of intent " is 127.
Long Statement,QuantConnect.Securities,SecurityExchange,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityExchange.cs,SetMarketHours,The length of the statement  "            _exchangeHours = new SecurityExchangeHours(_exchangeHours.TimeZone' _exchangeHours.Holidays' marketHours' _exchangeHours.EarlyCloses' _exchangeHours.LateOpens); " is 160.
Long Statement,QuantConnect.Securities,SecurityHolding,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityHolding.cs,TotalCloseProfit,The length of the statement  "            var marketOrder = new MarketOrder(_security.Symbol' -Quantity' _security.LocalTime.ConvertToUtc(_security.Exchange.TimeZone)); " is 126.
Long Statement,QuantConnect.Securities,SecurityPortfolioManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioManager.cs,Add,The length of the statement  "{ throw new NotImplementedException("Portfolio object is an adaptor for Security Manager. To add a new asset add the required data during initialization."); }" is 158.
Long Statement,QuantConnect.Securities,SecurityPortfolioManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioManager.cs,Add,The length of the statement  "{ throw new NotImplementedException("Portfolio object is an adaptor for Security Manager. To add a new asset add the required data during initialization."); }" is 158.
Long Statement,QuantConnect.Securities,SecurityPortfolioManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioManager.cs,Remove,The length of the statement  "{ throw new NotImplementedException("Portfolio object is an adaptor for Security Manager and objects cannot be removed."); }" is 124.
Long Statement,QuantConnect.Securities,SecurityPortfolioManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioManager.cs,Remove,The length of the statement  "{ throw new NotImplementedException("Portfolio object is an adaptor for Security Manager and objects cannot be removed."); }" is 124.
Long Statement,QuantConnect.Securities,SecurityTransactionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityTransactionManager.cs,CancelOpenOrders,The length of the statement  "                throw new InvalidOperationException("This operation is not allowed in Initialize or during warm up: CancelOpenOrders. Please move this code to the OnWarmupFinished() method."); " is 176.
Long Statement,QuantConnect.Securities,SecurityTransactionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityTransactionManager.cs,CancelOpenOrders,The length of the statement  "                throw new InvalidOperationException("This operation is not allowed in Initialize or during warm up: CancelOpenOrders. Please move this code to the OnWarmupFinished() method."); " is 176.
Long Statement,QuantConnect.Securities,SecurityTransactionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityTransactionManager.cs,Completed,The length of the statement  "            return order.Status == OrderStatus.Filled || order.Status == OrderStatus.PartiallyFilled || order.Status == OrderStatus.Invalid || order.Status == OrderStatus.Canceled; " is 168.
Long Statement,QuantConnect.Exceptions,DllNotFoundPythonExceptionInterpreter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Exceptions\DllNotFoundPythonExceptionInterpreter.cs,Interpret,The length of the statement  "            var message = $"The dynamic-link library for {dllName} could not be found. Please visit https://github.com/QuantConnect/Lean/blob/master/Algorithm.Python/readme.md for instructions on how to enable python support in {platform}"; " is 228.
Long Statement,QuantConnect.Exceptions,InvalidTokenPythonExceptionInterpreter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Exceptions\InvalidTokenPythonExceptionInterpreter.cs,Interpret,The length of the statement  "            var message = "Trying to include an invalid token/character in any statement throws a SyntaxError exception. To prevent the exception' ensure no invalid token are mistakenly included (e.g: leading zero)."; " is 205.
Long Statement,QuantConnect.Exceptions,KeyErrorPythonExceptionInterpreter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Exceptions\KeyErrorPythonExceptionInterpreter.cs,Interpret,The length of the statement  "            var message = $"Trying to retrieve an element from a collection using a key that does not exist in that collection throws a KeyError exception. To prevent the exception' ensure that the {key} key exist in the collection and/or that collection is not empty."; " is 258.
Long Statement,QuantConnect.Exceptions,NoMethodMatchPythonExceptionInterpreter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Exceptions\NoMethodMatchPythonExceptionInterpreter.cs,Interpret,The length of the statement  "            var message = $"Trying to dynamically access a method that does not exist throws a TypeError exception. To prevent the exception' ensure each parameter type matches those required by the {methodName} method. Please checkout the API documentation."; " is 248.
Long Statement,QuantConnect.Exceptions,UnsupportedOperandPythonExceptionInterpreter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Exceptions\UnsupportedOperandPythonExceptionInterpreter.cs,Interpret,The length of the statement  "            var message = $"Trying to perform a summation' subtraction' multiplication or division between {types} objects throws a TypeError exception. To prevent the exception' ensure that both values share the same type."; " is 213.
Long Statement,QuantConnect.Orders,TimeInForceJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\TimeInForceJsonConverter.cs,ReadJson,The length of the statement  "            var constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null); " is 133.
Long Statement,QuantConnect.Orders,TimeInForceJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\TimeInForceJsonConverter.cs,ReadJson,The length of the statement  "            foreach (var property in timeInForce.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)) " is 131.
Long Statement,QuantConnect.Orders,OrderResponse,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OrderResponse.cs,WarmingUp,The length of the statement  "                Invariant($"This operation is not allowed in Initialize or during warm up: OrderRequest.{request.OrderRequestType}. ") + " is 120.
Long Statement,QuantConnect.Orders,OrderTicket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OrderTicket.cs,InvalidCancelOrderId,The length of the statement  "            var submit = new SubmitOrderRequest(OrderType.Market' SecurityType.Base' Symbol.Empty' 0' 0' 0' DateTime.MaxValue' request.Tag); " is 128.
Long Statement,QuantConnect.Orders,OrderTicket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OrderTicket.cs,InvalidUpdateOrderId,The length of the statement  "            var submit = new SubmitOrderRequest(OrderType.Market' SecurityType.Base' Symbol.Empty' 0' 0' 0' DateTime.MaxValue' request.Tag); " is 128.
Long Statement,QuantConnect.Orders,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Order.cs,ToString,The length of the statement  "            return Invariant($"OrderId: {Id} (BrokerId: {string.Join("'"' BrokerId)}) {Status} {Type} order for {Quantity} unit{(Quantity == 1 ? "" : "s")} of {Symbol}"); " is 158.
Long Statement,QuantConnect.Orders,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Order.cs,CreateOrder,The length of the statement  "                    order = new LimitOrder(request.Symbol' request.Quantity' request.LimitPrice' request.Time' request.Tag' request.OrderProperties); " is 129.
Long Statement,QuantConnect.Orders,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Order.cs,CreateOrder,The length of the statement  "                    order = new StopMarketOrder(request.Symbol' request.Quantity' request.StopPrice' request.Time' request.Tag' request.OrderProperties); " is 133.
Long Statement,QuantConnect.Orders,Order,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Order.cs,CreateOrder,The length of the statement  "                    order = new StopLimitOrder(request.Symbol' request.Quantity' request.StopPrice' request.LimitPrice' request.Time' request.Tag' request.OrderProperties); " is 152.
Long Statement,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,NthBusinessDay,The length of the statement  "                    $"Argument nthBusinessDay (${nthBusinessDay}) is less than one. Provide a number greater than one and less than the days in month" " is 130.
Long Statement,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,NthBusinessDay,The length of the statement  "            while (daysCounted < nthBusinessDay || holidays.Contains(time) || USHoliday.Dates.Contains(time) || !time.IsCommonBusinessDay()) " is 128.
Long Statement,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,DairyLastTradeDate,The length of the statement  "            // Trading shall terminate on the business day immediately preceding the day on which the USDA announces the <DAIRY_PRODUCT> price for that contract month. (LTD 12:10 p.m.) " is 172.
Long Statement,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,DairyLastTradeDate,The length of the statement  "            // The USDA price announcements are erratic in their publication date. You can view the calendar the USDA announces prices here: https://www.ers.usda.gov/calendar/ " is 163.
Long Statement,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,DairyLastTradeDate,The length of the statement  "            // To get the report dates found in FutuesExpiryFunctions.DairyReportDates' visit this website: https://mpr.datamart.ams.usda.gov/menu.do?path=Products\Dairy\All%20Dairy\(DY_CL102)%20National%20Dairy%20Products%20Prices%20-%20Monthly " is 233.
Long Statement,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,FromCsvFile,The length of the statement  "                Log.Trace($"Unable to locate future margin requirements file. Defaulting to zero margin for this symbol. File: {file}"); " is 120.
Long Statement,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,FromCsvLine,The length of the statement  "            if(!DateTime.TryParseExact(line[0]' DateFormat.EightCharacter' CultureInfo.InvariantCulture' DateTimeStyles.None' out date)) " is 124.
Long Statement,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,FromCsvLine,The length of the statement  "                Log.Trace($"Couldn't parse Initial margin requirements while reading future margin requirement file. Date {line[1]}. Line: {csvLine}"); " is 135.
Long Statement,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,FromCsvLine,The length of the statement  "                Log.Trace($"Couldn't parse Maintenance margin requirements while reading future margin requirement file. Date {line[2]}. Line: {csvLine}"); " is 139.
Long Statement,QuantConnect.Securities.Option,OptionPriceModels,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionPriceModels.cs,AdditiveEquiprobabilities,The length of the statement  "            return new QLOptionPriceModel(process => new BinomialVanillaEngine<AdditiveEQPBinomialTree>(process' _timeStepsBinomial)' " is 121.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BearCallSpread,The length of the statement  "                throw new ArgumentException("BearCallSpread: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 125.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BearCallSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg1Strike' Quantity = -1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 160.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BearCallSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg2Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 158.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BearPutSpread,The length of the statement  "                throw new ArgumentException("BearPutSpread: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 124.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BearPutSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg1Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 158.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BearPutSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg2Strike' Quantity = -1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 158.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BullCallSpread,The length of the statement  "                throw new ArgumentException("BullCallSpread: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 125.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BullCallSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg1Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 159.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BullCallSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg2Strike' Quantity = -1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 159.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BullPutSpread,The length of the statement  "                throw new ArgumentException("BullPutSpread: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 124.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BullPutSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg1Strike' Quantity = -1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 159.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,BullPutSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg2Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 157.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,Straddle,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 155.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,Straddle,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 153.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,Strangle,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg1Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 159.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,Strangle,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg2Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 157.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallButterfly,The length of the statement  "                throw new ArgumentException("CallButterfly: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 124.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallButterfly,The length of the statement  "                throw new ArgumentException("CallButterfly: upper and lower strikes must both be equidistant from the middle strike"' "leg1Strike' leg2Strike' leg3Strike"); " is 156.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallButterfly,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg1Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 159.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallButterfly,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg2Strike' Quantity = -2' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 160.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallButterfly,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg3Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 158.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutButterfly,The length of the statement  "                throw new ArgumentException("PutButterfly: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 123.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutButterfly,The length of the statement  "                throw new ArgumentException("PutButterfly: upper and lower strikes must both be equidistant from the middle strike"' "leg1Strike' leg2Strike' leg3Strike"); " is 155.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutButterfly,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg1Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 158.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutButterfly,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg2Strike' Quantity = -2' OrderType = Orders.OrderType.Market' Expiration = expiration }' " is 159.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutButterfly,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg3Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration } " is 157.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallCalendarSpread,The length of the statement  "                throw new ArgumentException("CallCalendarSpread: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 129.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallCalendarSpread,The length of the statement  "                throw new ArgumentException("CallCalendarSpread: near expiration must be less than far expiration"' "expiration1' expiration2"); " is 128.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallCalendarSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = strike' Quantity = -1' OrderType = Orders.OrderType.Market' Expiration = expiration1 }' " is 157.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallCalendarSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration2 } " is 155.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutCalendarSpread,The length of the statement  "                throw new ArgumentException("PutCalendarSpread: canonicalOption must contain canonical option symbol"' nameof(canonicalOption)); " is 128.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutCalendarSpread,The length of the statement  "                throw new ArgumentException("PutCalendarSpread: near expiration must be less than far expiration"' "expiration1' expiration2"); " is 127.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutCalendarSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = strike' Quantity = -1' OrderType = Orders.OrderType.Market' Expiration = expiration1 }' " is 156.
Long Statement,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutCalendarSpread,The length of the statement  "                                            new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration2 } " is 154.
Long Statement,QuantConnect.Securities.Option,OptionMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionMarginModel.cs,GetMaintenanceMargin,The length of the statement  "            return security.Holdings.AbsoluteHoldingsCost * GetMaintenanceMarginRequirement(security' security.Holdings.HoldingsCost); " is 122.
Long Statement,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The length of the statement  "                var underlyingVol = new Handle<BlackVolTermStructure>(new BlackConstantVol(0' calendar' new Handle<Quote>(underlyingVolValue)' dayCounter)); " is 140.
Long Statement,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The length of the statement  "                var stochasticProcess = new BlackScholesMertonProcess(new Handle<Quote>(underlyingQuoteValue)' dividendYield' riskFreeRate' underlyingVol); " is 139.
Long Statement,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The length of the statement  "                var payoff = new PlainVanillaPayoff(contract.Right == OptionRight.Call ? QLNet.Option.Type.Call : QLNet.Option.Type.Put' (double)contract.Strike); " is 146.
Long Statement,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The length of the statement  "                // function extracts QL greeks catching exception if greek is not generated by the pricing engine and reevaluates option to get numerical estimate of the seisitivity " is 165.
Long Statement,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,Reader,The length of the statement  "                Log.Error(Invariant($"QuoteBar.Reader(): Error parsing line: '{line}'' Symbol: {config.Symbol.Value}' SecurityType: {config.SecurityType}' ") + " is 143.
Long Statement,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The length of the statement  "                Logging.Log.Error("QuoteBar.ParseTradeAsQuoteBar(): Data formatted as Trade when Quote format was expected.  Support for this will disappear June 2017."); " is 154.
Long Statement,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The length of the statement  "                quoteBar.Time = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 158.
Long Statement,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The length of the statement  "                quoteBar.Time = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 158.
Long Statement,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The length of the statement  "                quoteBar.Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 126.
Long Statement,QuantConnect.Data.Market,RenkoBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\RenkoBar.cs,Reader,The length of the statement  "            throw new NotSupportedException("RenkoBar does not support the Reader function. This function should never be called on this type."); " is 133.
Long Statement,QuantConnect.Data.Market,RenkoBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\RenkoBar.cs,GetSource,The length of the statement  "            throw new NotSupportedException("RenkoBar does not support the GetSource function. This function should never be called on this type."); " is 136.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Reader,The length of the statement  "                Log.Error(Invariant($"TradeBar.Reader(): Error parsing line: '{line}'' Symbol: {config.Symbol.Value}' SecurityType: ") + " is 120.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Reader,The length of the statement  "                Log.Error(Invariant($"TradeBar.Reader(): Error parsing line: '{stream}'' Symbol: {config.Symbol.Value}' SecurityType: ") + " is 122.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseEquity,The length of the statement  "                tradeBar.Time = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 158.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseForex,The length of the statement  "                tradeBar.Time = date.Date.AddMilliseconds(streamReader.GetInt32()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 123.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseForex,The length of the statement  "                tradeBar.Time = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 158.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseCrypto,The length of the statement  "                tradeBar.Time = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 158.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseCrypto,The length of the statement  "                tradeBar.Time = date.Date.AddMilliseconds(streamReader.GetInt32()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 123.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseOption,The length of the statement  "                tradeBar.Time = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 158.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseOption,The length of the statement  "                tradeBar.Time = date.Date.AddMilliseconds(streamReader.GetInt32()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 123.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseFuture,The length of the statement  "                tradeBar.Time = date.Date.AddMilliseconds(streamReader.GetInt32()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 123.
Long Statement,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseFuture,The length of the statement  "                tradeBar.Time = DateTime.ParseExact(csv[0]' DateFormat.TwelveCharacter' CultureInfo.InvariantCulture).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone); " is 158.
Long Statement,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,UpdateScores,The length of the statement  "                    var portfolioAnnualizedReturn = Statistics.CompoundingAnnualPerformance(_startingPortfolioValue' currentPortfolioValue' annualFactor); " is 134.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,Generate,The length of the statement  "            var totalPerformance = GetAlgorithmPerformance(firstDate' lastDate' trades' profitLoss' equity' pointsPerformance' pointsBenchmark' startingCapital); " is 149.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,Generate,The length of the statement  "            var rollingPerformances = GetRollingPerformances(firstDate' lastDate' trades' profitLoss' equity' pointsPerformance' pointsBenchmark' startingCapital); " is 151.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetAlgorithmPerformance,The length of the statement  "            var periodEquity = new SortedDictionary<DateTime' decimal>(equity.Where(x => x.Key.Date >= fromDate && x.Key.Date < toDate.AddDays(1)).ToDictionary(x => x.Key' y => y.Value)); " is 175.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetAlgorithmPerformance,The length of the statement  "            var periodProfitLoss = new SortedDictionary<DateTime' decimal>(profitLoss.Where(x => x.Key >= fromDate && x.Key.Date < toDate.AddDays(1)).ToDictionary(x => x.Key' y => y.Value)); " is 178.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetAlgorithmPerformance,The length of the statement  "            return new AlgorithmPerformance(periodTrades' periodProfitLoss' periodEquity' listPerformance' listBenchmark' runningCapital); " is 126.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetRollingPerformances,The length of the statement  "                    var periodPerformance = GetAlgorithmPerformance(period.StartDate' period.EndDate' trades' profitLoss' equity' pointsPerformance' pointsBenchmark' startingCapital); " is 163.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }' " is 131.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }' " is 132.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }' " is 153.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }' " is 121.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}' " is 128.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}' " is 154.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }' " is 137.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The length of the statement  "                { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }' " is 122.
Long Statement,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetPeriodRanges,The length of the statement  "            var ranges = new List<PeriodRange> { new PeriodRange { StartDate = firstDate' EndDate = endDates[endDates.Count - 1] } }; " is 121.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The length of the statement  "                // TODO : if these lists are required to be the same length then we should create structure to pair the values' this way' by contract it will be enforced. " is 154.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The length of the statement  "                    algoCompoundingPerformance = CompoundingAnnualPerformance(startingCash' equity.Values.LastOrDefault()' (decimal) fractionOfYears); " is 130.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The length of the statement  "                    benchCompoundingPerformance = CompoundingAnnualPerformance(startingCash' finalBenchmarkCash' (decimal) fractionOfYears); " is 120.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The length of the statement  "                    { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }' " is 129.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,CompoundingAnnualPerformance,The length of the statement  "            return (years == 0 ? 0d : Math.Pow((double)finalCapital / (double)startingCapital' 1 / (double)years) - 1).SafeDecimalCast(); " is 125.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Alpha,The length of the statement  "            return AnnualPerformance(algoPerformance) - (riskFreeRate + Beta(algoPerformance' benchmarkPerformance) * (AnnualPerformance(benchmarkPerformance) - riskFreeRate)); " is 164.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,TrackingError,The length of the statement  "            return Math.Sqrt(AnnualVariance(algoPerformance) - 2 * Correlation.Pearson(algoPerformance' benchmarkPerformance) * AnnualStandardDeviation(algoPerformance) * AnnualStandardDeviation(benchmarkPerformance) + AnnualVariance(benchmarkPerformance)); " is 245.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,InformationRatio,The length of the statement  "            return (AnnualPerformance(algoPerformance) - AnnualPerformance(benchmarkPerformance)) / (TrackingError(algoPerformance' benchmarkPerformance)); " is 143.
Long Statement,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,ProbabilisticSharpeRatio,The length of the statement  "            var value = estimateStandardDeviation.IsNaNOrZero() ? 0 : (observedSharpeRatio - benchmarkSharpeRatio) / estimateStandardDeviation; " is 131.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,The length of the statement  "                        trade.ProfitLoss = Math.Round((trade.ExitPrice - trade.EntryPrice) * trade.Quantity * (trade.Direction == TradeDirection.Long ? +1 : -1) * conversionRate * multiplier' 2); " is 171.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,The length of the statement  "                        trade.MAE = Math.Round((trade.Direction == TradeDirection.Long ? position.MinPrice - trade.EntryPrice : trade.EntryPrice - position.MaxPrice) * trade.Quantity * conversionRate * multiplier' 2); " is 193.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,The length of the statement  "                        trade.MFE = Math.Round((trade.Direction == TradeDirection.Long ? position.MaxPrice - trade.EntryPrice : trade.EntryPrice - position.MinPrice) * trade.Quantity * conversionRate * multiplier' 2); " is 193.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,The length of the statement  "                            ProfitLoss = Math.Round((fill.FillPrice - trade.EntryPrice) * absoluteUnexecutedQuantity * (trade.Direction == TradeDirection.Long ? +1 : -1) * conversionRate * multiplier' 2)' " is 176.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,The length of the statement  "                            MAE = Math.Round((trade.Direction == TradeDirection.Long ? position.MinPrice - trade.EntryPrice : trade.EntryPrice - position.MaxPrice) * absoluteUnexecutedQuantity * conversionRate * multiplier' 2)' " is 199.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFillToFill,The length of the statement  "                            MFE = Math.Round((trade.Direction == TradeDirection.Long ? position.MaxPrice - trade.EntryPrice : trade.EntryPrice - position.MinPrice) * absoluteUnexecutedQuantity * conversionRate * multiplier' 2) " is 198.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToFlat,The length of the statement  "                if (position.PendingFills.Aggregate(0m' (d' x) => d + x.FillQuantity) + fill.FillQuantity == 0 || fill.AbsoluteFillQuantity > Math.Abs(position.PendingFills.Aggregate(0m' (d' x) => d + x.FillQuantity))) " is 202.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToFlat,The length of the statement  "                            entryAveragePrice += (position.PendingFills[index].FillPrice - entryAveragePrice) * position.PendingFills[index].FillQuantity / totalEntryQuantity; " is 147.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToFlat,The length of the statement  "                            exitAveragePrice += (position.PendingFills[index].FillPrice - exitAveragePrice) * position.PendingFills[index].FillQuantity / totalExitQuantity; " is 144.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToFlat,The length of the statement  "                        ProfitLoss = Math.Round((exitAveragePrice - entryAveragePrice) * Math.Abs(totalEntryQuantity) * Math.Sign(totalEntryQuantity) * conversionRate * multiplier' 2)' " is 160.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToFlat,The length of the statement  "                        MAE = Math.Round((direction == TradeDirection.Long ? position.MinPrice - entryAveragePrice : entryAveragePrice - position.MaxPrice) * Math.Abs(totalEntryQuantity) * conversionRate * multiplier' 2)' " is 197.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToFlat,The length of the statement  "                        MFE = Math.Round((direction == TradeDirection.Long ? position.MaxPrice - entryAveragePrice : entryAveragePrice - position.MinPrice) * Math.Abs(totalEntryQuantity) * conversionRate * multiplier' 2) " is 196.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToReduced,The length of the statement  "                        entryPrice -= (position.PendingFills[index].FillPrice - entryPrice) * position.PendingFills[index].FillQuantity / totalExecutedQuantity; " is 136.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToReduced,The length of the statement  "                    ProfitLoss = Math.Round((fill.FillPrice - entryPrice) * Math.Abs(totalExecutedQuantity) * Math.Sign(-totalExecutedQuantity) * conversionRate * multiplier' 2)' " is 158.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToReduced,The length of the statement  "                    MAE = Math.Round((direction == TradeDirection.Long ? position.MinPrice - entryPrice : entryPrice - position.MaxPrice) * Math.Abs(totalExecutedQuantity) * conversionRate * multiplier' 2)' " is 186.
Long Statement,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFillUsingFlatToReduced,The length of the statement  "                    MFE = Math.Round((direction == TradeDirection.Long ? position.MaxPrice - entryPrice : entryPrice - position.MinPrice) * Math.Abs(totalExecutedQuantity) * conversionRate * multiplier' 2) " is 185.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The length of the statement  "                                return ToCsv(milliseconds' Scale(tick.LastPrice)' tick.Quantity' tick.Exchange' tick.SaleCondition' tick.Suspicious ? "1" : "0"); " is 129.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The length of the statement  "                                return ToCsv(milliseconds' Scale(tick.BidPrice)' tick.BidSize' Scale(tick.AskPrice)' tick.AskSize' tick.Exchange' tick.SaleCondition' tick.Suspicious ? "1" : "0"); " is 163.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The length of the statement  "                                return ToCsv(milliseconds' Scale(tradeBar.Open)' Scale(tradeBar.High)' Scale(tradeBar.Low)' Scale(tradeBar.Close)' tradeBar.Volume); " is 132.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The length of the statement  "                                return ToCsv(longTime' Scale(bigTradeBar.Open)' Scale(bigTradeBar.High)' Scale(bigTradeBar.Low)' Scale(bigTradeBar.Close)' bigTradeBar.Volume); " is 143.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateRelativeZipFilePath,The length of the statement  "            return Path.Combine(GenerateRelativeZipFileDirectory(symbol' resolution)' GenerateZipFileName(symbol' date' resolution' tickType)); " is 131.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateRelativeZipFilePath,The length of the statement  "            var directory = Path.Combine(securityType.SecurityTypeToLower()' market.ToLowerInvariant()' resolution.ResolutionToLower()); " is 124.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateZipEntryName,The length of the statement  "                    return Invariant($"{formattedDate}_{symbol.Value.ToLowerInvariant()}_{resolution.ResolutionToLower()}_{tickType.TickTypeToLower()}.csv"); " is 137.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateZipFileName,The length of the statement  "            tickType = tickType ?? (securityType == SecurityType.Forex || securityType == SecurityType.Cfd ? TickType.Quote : TickType.Trade); " is 130.
Long Statement,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,TryParsePath,The length of the statement  "                Log.Error($"LeanData.TryParsePath(): Error encountered while parsing the path {fileName}. Error: {ex.GetBaseException()}"); " is 123.
Long Statement,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The length of the statement  "            var resolution = (Resolution) Enum.Parse(typeof (Resolution)' parts[parts.Length - securityTypeOffset + ResolutionOffset]' true); " is 129.
Long Statement,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The length of the statement  "            var date = securityTypeOffset == LowResSecurityTypeOffset ? DateTime.MinValue : DateTime.ParseExact(filename.Substring(0' filename.IndexOf("_"' StringComparison.Ordinal))' DateFormat.EightCharacter' null); " is 205.
Long Statement,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The length of the statement  "                symbol = Symbol.CreateOption(ticker' market' style' OptionRight.Call | OptionRight.Put' 0' SecurityIdentifier.DefaultDate); " is 123.
Long Statement,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The length of the statement  "            var tickType = filename.Contains("_quote") ? TickType.Quote : (filename.Contains("_openinterest") ? TickType.OpenInterest : TickType.Trade); " is 140.
Long Statement,QuantConnect.Util,MarketHoursDatabaseEntryJson,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\MarketHoursDatabaseJsonConverter.cs,Convert,The length of the statement  "                var earlyCloses = EarlyCloses.ToDictionary(x => DateTime.ParseExact(x.Key' "M/d/yyyy"' CultureInfo.InvariantCulture)' x => x.Value); " is 132.
Long Statement,QuantConnect.Util,MarketHoursDatabaseEntryJson,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\MarketHoursDatabaseJsonConverter.cs,Convert,The length of the statement  "                var lateOpens = LateOpens.ToDictionary(x => DateTime.ParseExact(x.Key' "M/d/yyyy"' CultureInfo.InvariantCulture)' x => x.Value); " is 128.
Long Statement,QuantConnect.Util,MarketHoursDatabaseEntryJson,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\MarketHoursDatabaseJsonConverter.cs,Convert,The length of the statement  "                var exchangeHours = new SecurityExchangeHours(DateTimeZoneProviders.Tzdb[ExchangeTimeZone]' holidayDates' hours' earlyCloses' lateOpens); " is 137.
Long Statement,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,Convert,The length of the statement  "            return value.IsEmpty ? string.Empty : $"#{value.R.ToStringInvariant("X2")}{value.G.ToStringInvariant("X2")}{value.B.ToStringInvariant("X2")}"; " is 142.
Long Statement,QuantConnect.Util,StreamReaderEnumerable,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderEnumerable.cs,GetEnumerator,The length of the statement  "                throw new InvalidOperationException("A StreamReaderEnumerable may only be enumerated once. Consider using memoization or materialization."); " is 140.
Long Statement,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetDecimal,The length of the statement  "            while (!(current == delimiter || current == '\n' || current == '\r' && (stream.Peek() != '\n' || stream.Read() == '\n') || current == NoMoreData || current == ' ')) " is 164.
Long Statement,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetDateTime,The length of the statement  "            while (!(current == delimiter || current == '\n' || current == '\r' && (stream.Peek() != '\n' || stream.Read() == '\n') || current == NoMoreData)) " is 146.
Long Statement,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetInt32,The length of the statement  "            while (!(current == delimiter || current == '\n' || current == '\r' && (stream.Peek() != '\n' || stream.Read() == '\n') || current == NoMoreData || current == ' ')) " is 164.
Long Statement,QuantConnect.Util,ObjectActivator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ObjectActivator.cs,Clone,The length of the statement  "            var method = typeof (CloneFactory).GetMethods().FirstOrDefault(x => x.Name == "GetClone" && x.GetParameters().Length == 1); " is 123.
Long Statement,QuantConnect.Util,ObjectActivator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ObjectActivator.cs,AddActivator,The length of the statement  "                throw new ArgumentException($"ObjectActivator.AddActivator(): a method to return an instance of {key.Name} has already been added"); " is 132.
Complex Conditional,QuantConnect.Algorithm.Framework.Alphas,OrderBasedInsightGenerator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\OrderBasedInsightGenerator.cs,GenerateInsightFromFill,The conditional expression  "securityHolding.Quantity == 0                  // closing the entire position                  || desiredFinalQuantity == 0                  // changing market sides                  || Math.Sign(desiredFinalQuantity) != Math.Sign(securityHolding.Quantity)                  // increasing the position                  || Math.Sign(orderEvent.FillQuantity) == Math.Sign(securityHolding.Quantity)"  is complex.
Complex Conditional,QuantConnect.Brokerages,AlpacaBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\AlpacaBrokerageModel.cs,CanSubmitOrder,The conditional expression  "order.Type != OrderType.Limit && order.Type != OrderType.Market && order.Type != OrderType.StopMarket && order.Type != OrderType.StopLimit && order.Type != OrderType.MarketOnOpen"  is complex.
Complex Conditional,QuantConnect.Brokerages,GDAXBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\GDAXBrokerageModel.cs,CanSubmitOrder,The conditional expression  "order.Type != OrderType.Limit && order.Type != OrderType.Market && order.Type != OrderType.StopMarket && order.Type != OrderType.StopLimit"  is complex.
Complex Conditional,QuantConnect.Brokerages,InteractiveBrokersBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\InteractiveBrokersBrokerageModel.cs,CanSubmitOrder,The conditional expression  "security.Type != SecurityType.Equity &&                  security.Type != SecurityType.Forex &&                  security.Type != SecurityType.Option &&                  security.Type != SecurityType.Future"  is complex.
Complex Conditional,QuantConnect.Orders.Fees,AlphaStreamsFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\AlphaStreamsFeeModel.cs,GetOrderFee,The conditional expression  "order.Type == OrderType.Limit &&                          props?.Hidden != true &&                          (props?.PostOnly == true || !order.IsMarketable)"  is complex.
Complex Conditional,QuantConnect.Orders.Fees,BitfinexFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\BitfinexFeeModel.cs,GetOrderFee,The conditional expression  "order.Type == OrderType.Limit &&                  props?.Hidden != true &&                  (props?.PostOnly == true || !order.IsMarketable)"  is complex.
Complex Conditional,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,GetOrderFee,The conditional expression  "market == Market.Globex || market == Market.NYMEX                          || market == Market.CBOT || market == Market.ICE                          || market == Market.CBOE || market == Market.NSE"  is complex.
Complex Conditional,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,NthBusinessDay,The conditional expression  "daysCounted < nthBusinessDay || holidays.Contains(time) || USHoliday.Dates.Contains(time) || !time.IsCommonBusinessDay()"  is complex.
Complex Conditional,QuantConnect.Securities.Option,ConstantQLUnderlyingVolatilityEstimator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\ConstantQLUnderlyingVolatilityEstimator.cs,Estimate,The conditional expression  "option != null &&                  option.Underlying != null &&                  option.Underlying.VolatilityModel != null &&                  option.Underlying.VolatilityModel.Volatility > 0m"  is complex.
Complex Conditional,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallCalendarSpread,The conditional expression  "expiration1 == DateTime.MaxValue ||                  expiration1 == DateTime.MinValue ||                  expiration2 == DateTime.MaxValue ||                  expiration2 == DateTime.MinValue"  is complex.
Complex Conditional,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutCalendarSpread,The conditional expression  "expiration1 == DateTime.MaxValue ||                  expiration1 == DateTime.MinValue ||                  expiration2 == DateTime.MaxValue ||                  expiration2 == DateTime.MinValue"  is complex.
Complex Conditional,QuantConnect.Securities.Option,OptionMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionMarginModel.cs,GetMarginRequirement,The conditional expression  "value == 0m ||                  option.Close == 0m ||                  option.StrikePrice == 0m ||                  option.Underlying == null ||                  option.Underlying.Close == 0m"  is complex.
Complex Conditional,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The conditional expression  "csv[1].Length != 0 || csv[2].Length != 0 || csv[3].Length != 0 || csv[4].Length != 0"  is complex.
Complex Conditional,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The conditional expression  "csv[6].Length != 0 || csv[7].Length != 0 || csv[8].Length != 0 || csv[9].Length != 0"  is complex.
Complex Conditional,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetDecimal,The conditional expression  "!(current == delimiter || current == '\n' || current == '\r' && (stream.Peek() != '\n' || stream.Read() == '\n') || current == NoMoreData || current == ' ')"  is complex.
Complex Conditional,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetDateTime,The conditional expression  "!(current == delimiter || current == '\n' || current == '\r' && (stream.Peek() != '\n' || stream.Read() == '\n') || current == NoMoreData)"  is complex.
Complex Conditional,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetInt32,The conditional expression  "!(current == delimiter || current == '\n' || current == '\r' && (stream.Peek() != '\n' || stream.Read() == '\n') || current == NoMoreData || current == ' ')"  is complex.
Virtual Method Call from Constructor,QuantConnect.Data.Consolidators,SequentialConsolidator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Consolidators\SequentialConsolidator.cs,SequentialConsolidator,The constructor "SequentialConsolidator" calls a virtual method "OnDataConsolidated".
Virtual Method Call from Constructor,QuantConnect.Util,ReaderWriterLockSlimToken,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ReaderWriterLockSlimExtensions.cs,ReaderWriterLockSlimToken,The constructor "ReaderWriterLockSlimToken" calls a virtual method "EnterLock".
Empty Catch Block,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,TryConvert,The method has an empty catch block.
Empty Catch Block,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,TryConvertToDelegate,The method has an empty catch block.
Empty Catch Block,QuantConnect.Util,Composer,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\Composer.cs,Composer,The method has an empty catch block.
Empty Catch Block,QuantConnect.Util,WorkerThread,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\WorkerThread.cs,WorkerThread,The method has an empty catch block.
Magic Number,QuantConnect,AlgorithmSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlgorithmSettings.cs,AlgorithmSettings,The following statement contains a magic number: FreePortfolioValue = 250;
Magic Number,QuantConnect,AlgorithmSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlgorithmSettings.cs,AlgorithmSettings,The following statement contains a magic number: FreePortfolioValuePercentage = 0.0025m;
Magic Number,QuantConnect,AlgorithmSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlgorithmSettings.cs,AlgorithmSettings,The following statement contains a magic number: MaxAbsolutePortfolioTargetPercentage = 1000000000;
Magic Number,QuantConnect,AlgorithmSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlgorithmSettings.cs,AlgorithmSettings,The following statement contains a magic number: MinAbsolutePortfolioTargetPercentage = 0.0000000001m;
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,AlphaRuntimeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\AlphaRuntimeStatistics.cs,ToDictionary,The following statement contains a magic number: return new Dictionary<string' string>              {                  {"Fitness Score"' $"{Invariant(FitnessScore)}"}'                  {"Kelly Criterion Estimate"' $"{Invariant(KellyCriterionEstimate)}"}'                  {"Kelly Criterion Probability Value"' $"{Invariant(KellyCriterionProbabilityValue)}"}'                  {"Sortino Ratio"' $"{Invariant(SortinoRatio)}"}'                  {"Return Over Maximum Drawdown"' $"{Invariant(ReturnOverMaxDrawdown)}"}'                  {"Portfolio Turnover"' $"{Invariant(PortfolioTurnover)}"}'                  {"Total Insights Generated"' $"{Invariant(TotalInsightsGenerated)}"}'                  {"Total Insights Closed"' $"{Invariant(TotalInsightsClosed)}"}'                  {"Total Insights Analysis Completed"' $"{Invariant(TotalInsightsAnalysisCompleted)}"}'                  {"Long Insight Count"' $"{Invariant(LongCount)}"}'                  {"Short Insight Count"' $"{Invariant(ShortCount)}"}'                  {"Long/Short Ratio"' $"{Invariant(Math.Round(100*LongShortRatio' 2))}%"}'                  {"Estimated Monthly Alpha Value"' $"{accountCurrencySymbol}{Invariant(EstimatedMonthlyAlphaValue.SmartRounding())}"}'                  {"Total Accumulated Estimated Alpha Value"' $"{accountCurrencySymbol}{Invariant(TotalAccumulatedEstimatedAlphaValue.SmartRounding())}"}'                  {"Mean Population Estimated Insight Value"' $"{accountCurrencySymbol}{Invariant(MeanPopulationEstimatedInsightValue.SmartRounding())}"}'                  {"Mean Population Direction"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Direction' 4))}%"}'                  {"Mean Population Magnitude"' $"{Invariant(Math.Round(100 * MeanPopulationScore.Magnitude' 4))}%"}'                  {"Rolling Averaged Population Direction"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Direction' 4))}%"}'                  {"Rolling Averaged Population Magnitude"' $"{Invariant(Math.Round(100 * RollingAveragedPopulationScore.Magnitude' 4))}%"}'              };
Magic Number,QuantConnect,IsolatorLimitResultProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\IsolatorLimitResultProvider.cs,Consume,The following statement contains a magic number: Task.Run(async () =>              {                  if (Interlocked.Read(ref finished) != 0L)                  {                      // case when the code block has virtually no code in it and                      // was able to complete faster than the task was able to start                      return;                  }                    var next = timeProvider.GetUtcNow().AddMinutes(1);                  while (Interlocked.Read(ref finished) == 0L)                  {                      if (timeProvider.GetUtcNow() >= next)                      {                          // each minute request additional time from the isolator                          next = next.AddMinutes(1);                            // this will throw and notify the isolator that we've exceed the limits                          isolatorLimitProvider.RequestAdditionalTime(minutes: 1);                      }                        await Task.Delay(5).ConfigureAwait(false);                  }              });
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,SecurityIdentifier,The following statement contains a magic number: _hashCode = unchecked (symbol.GetHashCode() * 397) ^ properties.GetHashCode();
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,DecodeBase36,The following statement contains a magic number: var value = (uint)(c <= 57                      ? c - '0'                      : c - 'A' + 10);
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,DecodeBase36,The following statement contains a magic number: var value = (uint)(c <= 57                      ? c - '0'                      : c - 'A' + 10);
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,DecodeBase36,The following statement contains a magic number: baseValue *= 36;
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,EncodeBase36,The following statement contains a magic number: var value = data % 36;
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,EncodeBase36,The following statement contains a magic number: var c = value < 10                      ? (char)(value + '0')                      : (char)(value - 10 + 'A');
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,EncodeBase36,The following statement contains a magic number: var c = value < 10                      ? (char)(value + '0')                      : (char)(value - 10 + 'A');
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,EncodeBase36,The following statement contains a magic number: data /= 36;
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,NormalizeStrike,The following statement contains a magic number: strike /= 10;
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,NormalizeStrike,The following statement contains a magic number: strike % 10 == 0
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,NormalizeStrike,The following statement contains a magic number: strike >= 1000000
Magic Number,QuantConnect,SecurityIdentifier,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SecurityIdentifier.cs,TryParseProperties,The following statement contains a magic number: parts.Length != 2
Magic Number,QuantConnect,SeriesSampler,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SeriesSampler.cs,Sample,The following statement contains a magic number: series.Values.Count < 2 || series.SeriesType == SeriesType.Scatter
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: var emaPeriod = 60d;
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: memoryCap *= 1024 * 1024;
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: memoryCap *= 1024 * 1024;
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: var spikeLimit = memoryCap*2;
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: var sleepGranularity = sleepIntervalMillis >= 1000 ? 5 : 1;
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: var sleepGranularity = sleepIntervalMillis >= 1000 ? 5 : 1;
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: var sample = Convert.ToDouble(GC.GetTotalMemory(memoryUsed > memoryCap * 0.8));
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: memoryUsed > memoryCap * 0.8
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: Log.Trace("Isolator.ExecuteWithTimeLimit(): " +                                $"Used: {PrettyFormatRam(memoryUsed)}' " +                                $"Sample: {PrettyFormatRam((long)sample)}' " +                                $"App: {PrettyFormatRam(OS.ApplicationMemoryUsed * 1024 * 1024)}' " +                                Invariant($"CurrentTimeStepElapsed: {isolatorLimitResult.CurrentTimeStepElapsed:mm':'ss'.'fff}"));
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,MonitorTask,The following statement contains a magic number: Log.Trace("Isolator.ExecuteWithTimeLimit(): " +                                $"Used: {PrettyFormatRam(memoryUsed)}' " +                                $"Sample: {PrettyFormatRam((long)sample)}' " +                                $"App: {PrettyFormatRam(OS.ApplicationMemoryUsed * 1024 * 1024)}' " +                                Invariant($"CurrentTimeStepElapsed: {isolatorLimitResult.CurrentTimeStepElapsed:mm':'ss'.'fff}"));
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,PrettyFormatRam,The following statement contains a magic number: return Math.Round(Convert.ToDouble(ramInBytes/(1024*1024))).ToStringInvariant();
Magic Number,QuantConnect,Isolator,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Isolator.cs,PrettyFormatRam,The following statement contains a magic number: return Math.Round(Convert.ToDouble(ramInBytes/(1024*1024))).ToStringInvariant();
Magic Number,QuantConnect,Holding,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Global.cs,Holding,The following statement contains a magic number: var rounding = 2;
Magic Number,QuantConnect,Holding,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Global.cs,Holding,The following statement contains a magic number: rounding = 5;
Magic Number,QuantConnect,Holding,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Global.cs,Holding,The following statement contains a magic number: UnrealizedPnL = Math.Round(holding.UnrealizedProfit' 2);
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,RoundToSignificantDigits,The following statement contains a magic number: var scale = Math.Pow(10' Math.Floor(Math.Log10(Math.Abs(d))) + 1);
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,RoundToSignificantDigits,The following statement contains a magic number: var scale = (decimal)Math.Pow(10' Math.Floor(Math.Log10((double) Math.Abs(d))) + 1);
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,TruncateTo3DecimalPlaces,The following statement contains a magic number: value >= decimal.MaxValue / 1000                  || value <= decimal.MinValue / 1000                  || value == 0
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,TruncateTo3DecimalPlaces,The following statement contains a magic number: value >= decimal.MaxValue / 1000                  || value <= decimal.MinValue / 1000                  || value == 0
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,TruncateTo3DecimalPlaces,The following statement contains a magic number: return Math.Truncate(1000 * value) / 1000;
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,TruncateTo3DecimalPlaces,The following statement contains a magic number: return Math.Truncate(1000 * value) / 1000;
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,SmartRounding,The following statement contains a magic number: return Math.Round(input' 4);
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,SmartRounding,The following statement contains a magic number: input > 1000
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,SmartRounding,The following statement contains a magic number: return input.RoundToSignificantDigits(7).Normalize();
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ToDecimal,The following statement contains a magic number: var mid = (int)(value >> 32);
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ToInt32,The following statement contains a magic number: value = value * 10 + (str[i] - '0');
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,ToInt64,The following statement contains a magic number: value = value * 10 + (str[i] - '0');
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,GetDecimalEpsilon,The following statement contains a magic number: return new decimal(1' 0' 0' false' 27);
Magic Number,QuantConnect,Extensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Extensions.cs,GetExtension,The following statement contains a magic number: var ext = str.Substring(Math.Max(0' str.Length - 4));
Magic Number,QuantConnect,RealTimeSynchronizedTimer,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\RealTimeSynchronizedTimer.cs,Scanner,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseFutureTicker,The following statement contains a magic number: var doubleDigitYear = char.IsDigit(ticker.Substring(ticker.Length - 2' 1)[0]);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseFutureTicker,The following statement contains a magic number: var potentialExpirationDay = ticker.Substring(ticker.Length - 4 - doubleDigitOffset' 2);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseFutureTicker,The following statement contains a magic number: var potentialExpirationDay = ticker.Substring(ticker.Length - 4 - doubleDigitOffset' 2);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseFutureTicker,The following statement contains a magic number: expirationDayOffset = containsExpirationDay ? 2 : 0;
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseFutureTicker,The following statement contains a magic number: ticker.Length > 4 + doubleDigitOffset
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseFutureTicker,The following statement contains a magic number: var expirationMonthString = ticker.Substring(ticker.Length - 2 - doubleDigitOffset' 1);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseFutureTicker,The following statement contains a magic number: var underlyingString = ticker.Substring(0' ticker.Length - 2 - doubleDigitOffset - expirationDayOffset);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateFutureTicker,The following statement contains a magic number: var year = doubleDigitsYear ? expiration.Year % 100 : expiration.Year % 10;
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateFutureTicker,The following statement contains a magic number: var year = doubleDigitsYear ? expiration.Year % 100 : expiration.Year % 10;
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateFutureTicker,The following statement contains a magic number: month < 12
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateOptionTickerOSI,The following statement contains a magic number: underlying.Length > 5
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateOptionTickerOSI,The following statement contains a magic number: return Invariant($"{underlying'-6}{expiration.ToStringInvariant(DateFormat.SixCharacter)}{right.ToString()[0]}{(strikePrice * 1000m):00000000}");
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,GenerateOptionTickerOSI,The following statement contains a magic number: return Invariant($"{underlying'-6}{expiration.ToStringInvariant(DateFormat.SixCharacter)}{right.ToString()[0]}{(strikePrice * 1000m):00000000}");
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The following statement contains a magic number: var underlying = ticker.Substring(0' 6).Trim();
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The following statement contains a magic number: var expiration = DateTime.ParseExact(ticker.Substring(6' 6)' DateFormat.SixCharacter' null);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The following statement contains a magic number: var expiration = DateTime.ParseExact(ticker.Substring(6' 6)' DateFormat.SixCharacter' null);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The following statement contains a magic number: ticker[12] == 'C'
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The following statement contains a magic number: var strike = Parse.Decimal(ticker.Substring(13' 8)) / 1000m;
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The following statement contains a magic number: var strike = Parse.Decimal(ticker.Substring(13' 8)) / 1000m;
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerOSI,The following statement contains a magic number: var strike = Parse.Decimal(ticker.Substring(13' 8)) / 1000m;
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var symbology = new Dictionary<string' Tuple<int' OptionRight>>                          {                              { "A"' Tuple.Create(1' OptionRight.Call) }' { "M"' Tuple.Create(1' OptionRight.Put) }'                              { "B"' Tuple.Create(2' OptionRight.Call) }' { "N"' Tuple.Create(2' OptionRight.Put) }'                              { "C"' Tuple.Create(3' OptionRight.Call) }' { "O"' Tuple.Create(3' OptionRight.Put) }'                              { "D"' Tuple.Create(4' OptionRight.Call) }' { "P"' Tuple.Create(4' OptionRight.Put) }'                              { "E"' Tuple.Create(5' OptionRight.Call) }' { "Q"' Tuple.Create(5' OptionRight.Put) }'                              { "F"' Tuple.Create(6' OptionRight.Call) }' { "R"' Tuple.Create(6' OptionRight.Put) }'                              { "G"' Tuple.Create(7' OptionRight.Call) }' { "S"' Tuple.Create(7' OptionRight.Put) }'                              { "H"' Tuple.Create(8' OptionRight.Call) }' { "T"' Tuple.Create(8' OptionRight.Put) }'                              { "I"' Tuple.Create(9' OptionRight.Call) }' { "U"' Tuple.Create(9' OptionRight.Put) }'                              { "J"' Tuple.Create(10' OptionRight.Call) }' { "V"' Tuple.Create(10' OptionRight.Put) }'                              { "K"' Tuple.Create(11' OptionRight.Call) }' { "W"' Tuple.Create(11' OptionRight.Put) }'                              { "L"' Tuple.Create(12' OptionRight.Call) }' { "X"' Tuple.Create(12' OptionRight.Put) }'                            };
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var dayString = ticker.Substring(optionTypeDelimiter - 2' 2);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var dayString = ticker.Substring(optionTypeDelimiter - 2' 2);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var yearString = ticker.Substring(optionTypeDelimiter - 4' 2);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var yearString = ticker.Substring(optionTypeDelimiter - 4' 2);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var underlying = ticker.Substring(0' optionTypeDelimiter - 4);
Magic Number,QuantConnect,SymbolRepresentation,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\SymbolRepresentation.cs,ParseOptionTickerIQFeed,The following statement contains a magic number: var expirationDate = new DateTime(2000 + year' month' day);
Magic Number,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,DateTimeToUnixTimeStamp,The following statement contains a magic number: timestamp = (time - new DateTime(1970' 1' 1' 0' 0' 0' 0)).TotalSeconds;
Magic Number,QuantConnect,Time,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Time.cs,ParseDate,The following statement contains a magic number: DateTime.TryParseExact(dateToParse.Substring(0' 19)' DateFormat.JsonFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out date)
Magic Number,QuantConnect,TimeZoneOffsetProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\TimeZoneOffsetProvider.cs,TimeZoneOffsetProvider,The following statement contains a magic number: utcEndTime += TimeSpan.FromDays(2*365);
Magic Number,QuantConnect,TimeZoneOffsetProvider,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\TimeZoneOffsetProvider.cs,TimeZoneOffsetProvider,The following statement contains a magic number: utcEndTime += TimeSpan.FromDays(2*365);
Magic Number,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,ComputeCloseTime,The following statement contains a magic number: barCount *= 60;
Magic Number,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,ToString,The following statement contains a magic number: str += Invariant($" with {Math.Round(100 * Confidence.Value' 1)}% confidence");
Magic Number,QuantConnect.Algorithm.Framework.Alphas,Insight,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,ToString,The following statement contains a magic number: str += Invariant($" and {Math.Round(100 * Weight.Value' 1)}% weight");
Magic Number,QuantConnect.Algorithm.Framework.Alphas,ResolutionBarCountPeriodSpecification,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\Insight.cs,ResolutionBarCountPeriodSpecification,The following statement contains a magic number: barCount *= 60;
Magic Number,QuantConnect.Algorithm.Framework.Alphas,InsightScore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\InsightScore.cs,ToString,The following statement contains a magic number: return Invariant(                  $"Direction: {Math.Round(100 * Direction' 2)} Magnitude: {Math.Round(100 * Magnitude' 2)}"              );
Magic Number,QuantConnect.Algorithm.Framework.Alphas,InsightScore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\InsightScore.cs,ToString,The following statement contains a magic number: return Invariant(                  $"Direction: {Math.Round(100 * Direction' 2)} Magnitude: {Math.Round(100 * Magnitude' 2)}"              );
Magic Number,QuantConnect.Algorithm.Framework.Alphas,InsightScore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\InsightScore.cs,ToString,The following statement contains a magic number: return Invariant(                  $"Direction: {Math.Round(100 * Direction' 2)} Magnitude: {Math.Round(100 * Magnitude' 2)}"              );
Magic Number,QuantConnect.Algorithm.Framework.Alphas,InsightScore,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Algorithm\Framework\Alphas\InsightScore.cs,ToString,The following statement contains a magic number: return Invariant(                  $"Direction: {Math.Round(100 * Direction' 2)} Magnitude: {Math.Round(100 * Magnitude' 2)}"              );
Magic Number,QuantConnect.API,InteractiveBrokersLiveAlgorithmSettings,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\API\LiveAlgorithmSettings.cs,InteractiveBrokersLiveAlgorithmSettings,The following statement contains a magic number: Environment = Account.Substring(0' 2) == "DU" ? BrokerageEnvironment.Paper : BrokerageEnvironment.Live;
Magic Number,QuantConnect.Brokerages,DefaultBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\DefaultBrokerageModel.cs,GetLeverage,The following statement contains a magic number: switch (security.Type)              {                  case SecurityType.Equity:                      return 2m;                    case SecurityType.Forex:                  case SecurityType.Cfd:                      return 50m;                    case SecurityType.Crypto:                      return 1m;                    case SecurityType.Base:                  case SecurityType.Commodity:                  case SecurityType.Option:                  case SecurityType.Future:                  default:                      return 1m;              }
Magic Number,QuantConnect.Brokerages,DefaultBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\DefaultBrokerageModel.cs,GetLeverage,The following statement contains a magic number: switch (security.Type)              {                  case SecurityType.Equity:                      return 2m;                    case SecurityType.Forex:                  case SecurityType.Cfd:                      return 50m;                    case SecurityType.Crypto:                      return 1m;                    case SecurityType.Base:                  case SecurityType.Commodity:                  case SecurityType.Option:                  case SecurityType.Future:                  default:                      return 1m;              }
Magic Number,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,IsValidOrderPrices,The following statement contains a magic number: var maxDistance = Math.Min(                  // MinimumPriceVariation is 1/10th of a pip                  security.SymbolProperties.MinimumPriceVariation * 10 * 15000'                  security.Price / 2);
Magic Number,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,IsValidOrderPrices,The following statement contains a magic number: var maxDistance = Math.Min(                  // MinimumPriceVariation is 1/10th of a pip                  security.SymbolProperties.MinimumPriceVariation * 10 * 15000'                  security.Price / 2);
Magic Number,QuantConnect.Brokerages,FxcmBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\FxcmBrokerageModel.cs,IsValidOrderPrices,The following statement contains a magic number: var maxDistance = Math.Min(                  // MinimumPriceVariation is 1/10th of a pip                  security.SymbolProperties.MinimumPriceVariation * 10 * 15000'                  security.Price / 2);
Magic Number,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,Parse,The following statement contains a magic number: return new FactorFileRow(                  QuantConnect.Parse.DateTimeExact(csv[0]' DateFormat.EightCharacter' DateTimeStyles.None)'                  QuantConnect.Parse.Decimal(csv[1])'                  QuantConnect.Parse.Decimal(csv[2])'                  csv.Length > 3 ? QuantConnect.Parse.Decimal(csv[3]) : 0m              );
Magic Number,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,Parse,The following statement contains a magic number: return new FactorFileRow(                  QuantConnect.Parse.DateTimeExact(csv[0]' DateFormat.EightCharacter' DateTimeStyles.None)'                  QuantConnect.Parse.Decimal(csv[1])'                  QuantConnect.Parse.Decimal(csv[2])'                  csv.Length > 3 ? QuantConnect.Parse.Decimal(csv[3]) : 0m              );
Magic Number,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,Parse,The following statement contains a magic number: return new FactorFileRow(                  QuantConnect.Parse.DateTimeExact(csv[0]' DateFormat.EightCharacter' DateTimeStyles.None)'                  QuantConnect.Parse.Decimal(csv[1])'                  QuantConnect.Parse.Decimal(csv[2])'                  csv.Length > 3 ? QuantConnect.Parse.Decimal(csv[3]) : 0m              );
Magic Number,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,ToCsv,The following statement contains a magic number: return $"{Date.ToStringInvariant(DateFormat.EightCharacter)}'" +                     Invariant($"{Math.Round(PriceFactor' 6).Normalize()}'") +                     Invariant($"{Math.Round(SplitFactor' 7).Normalize()}'") +                     Invariant($"{Math.Round(ReferencePrice' 2).Normalize()}") +                     $"{source}";
Magic Number,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,ToCsv,The following statement contains a magic number: return $"{Date.ToStringInvariant(DateFormat.EightCharacter)}'" +                     Invariant($"{Math.Round(PriceFactor' 6).Normalize()}'") +                     Invariant($"{Math.Round(SplitFactor' 7).Normalize()}'") +                     Invariant($"{Math.Round(ReferencePrice' 2).Normalize()}") +                     $"{source}";
Magic Number,QuantConnect.Data.Auxiliary,FactorFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\FactorFileRow.cs,ToCsv,The following statement contains a magic number: return $"{Date.ToStringInvariant(DateFormat.EightCharacter)}'" +                     Invariant($"{Math.Round(PriceFactor' 6).Normalize()}'") +                     Invariant($"{Math.Round(SplitFactor' 7).Normalize()}'") +                     Invariant($"{Math.Round(ReferencePrice' 2).Normalize()}") +                     $"{source}";
Magic Number,QuantConnect.Data.Auxiliary,MapFileRow,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Auxiliary\MapFileRow.cs,GetHashCode,The following statement contains a magic number: return (Date.GetHashCode() * 397) ^ (MappedSymbol != null ? MappedSymbol.GetHashCode() : 0);
Magic Number,QuantConnect.Data.Custom.CBOE,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\CBOE\CBOE.cs,Reader,The following statement contains a magic number: QuantConnect.Parse.TryParse(csv[2]' NumberStyles.Any' out high);
Magic Number,QuantConnect.Data.Custom.CBOE,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\CBOE\CBOE.cs,Reader,The following statement contains a magic number: QuantConnect.Parse.TryParse(csv[3]' NumberStyles.Any' out low);
Magic Number,QuantConnect.Data.Custom.CBOE,CBOE,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\CBOE\CBOE.cs,Reader,The following statement contains a magic number: QuantConnect.Parse.TryParse(csv[4]' NumberStyles.Any' out close);
Magic Number,QuantConnect.Data.Custom,FxcmVolume,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\FxcmVolume.cs,Reader,The following statement contains a magic number: var obs = line.Split('\n')[2].Split(';');
Magic Number,QuantConnect.Data.Custom,FxcmVolume,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\FxcmVolume.cs,Reader,The following statement contains a magic number: var stringDate = obs[0].Substring(startIndex: 3);
Magic Number,QuantConnect.Data.Custom,USEnergyAPI,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergyAPI.cs,GetFormat,The following statement contains a magic number: switch (seriesId.Last())              {                  // Periods are closest approximation possible in days' except hourly                  // Annual data has Period ~ 365 days                  case 'A':                      _period = TimeSpan.FromDays(365);                      return "yyyy";                  // Quarterly data has Period ~ 90 days                  case 'Q':                      _period = TimeSpan.FromDays(90);                      return DateFormat.EightCharacter;                  // Monthly data has Period ~ 30 days                  case 'M':                      _period = TimeSpan.FromDays(30);                      return DateFormat.YearMonth;                  // Daily has Period = 1 day                  case 'D':                      _period = TimeSpan.FromDays(1);                      return DateFormat.EightCharacter;                  // Hourly has period = 1 Hour                  case 'H':                      _period = TimeSpan.FromHours(1);                      return "yyyyMMdd'T'HHZ";                  default:                      return string.Empty;              }
Magic Number,QuantConnect.Data.Custom,USEnergyAPI,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergyAPI.cs,GetFormat,The following statement contains a magic number: switch (seriesId.Last())              {                  // Periods are closest approximation possible in days' except hourly                  // Annual data has Period ~ 365 days                  case 'A':                      _period = TimeSpan.FromDays(365);                      return "yyyy";                  // Quarterly data has Period ~ 90 days                  case 'Q':                      _period = TimeSpan.FromDays(90);                      return DateFormat.EightCharacter;                  // Monthly data has Period ~ 30 days                  case 'M':                      _period = TimeSpan.FromDays(30);                      return DateFormat.YearMonth;                  // Daily has Period = 1 day                  case 'D':                      _period = TimeSpan.FromDays(1);                      return DateFormat.EightCharacter;                  // Hourly has period = 1 Hour                  case 'H':                      _period = TimeSpan.FromHours(1);                      return "yyyyMMdd'T'HHZ";                  default:                      return string.Empty;              }
Magic Number,QuantConnect.Data.Custom,USEnergyAPI,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergyAPI.cs,GetFormat,The following statement contains a magic number: switch (seriesId.Last())              {                  // Periods are closest approximation possible in days' except hourly                  // Annual data has Period ~ 365 days                  case 'A':                      _period = TimeSpan.FromDays(365);                      return "yyyy";                  // Quarterly data has Period ~ 90 days                  case 'Q':                      _period = TimeSpan.FromDays(90);                      return DateFormat.EightCharacter;                  // Monthly data has Period ~ 30 days                  case 'M':                      _period = TimeSpan.FromDays(30);                      return DateFormat.YearMonth;                  // Daily has Period = 1 day                  case 'D':                      _period = TimeSpan.FromDays(1);                      return DateFormat.EightCharacter;                  // Hourly has period = 1 Hour                  case 'H':                      _period = TimeSpan.FromHours(1);                      return "yyyyMMdd'T'HHZ";                  default:                      return string.Empty;              }
Magic Number,QuantConnect.Data.Custom,USEnergyAPI,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USEnergy\USEnergyAPI.cs,DateTimeConverter,The following statement contains a magic number: var year = Parse.Int(dateData.Substring(0' 4));
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: LastUpdate = DateTime.ParseExact(tsv[2]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ISIN = string.IsNullOrWhiteSpace(tsv[4]) ? null : tsv[4];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ISIN = string.IsNullOrWhiteSpace(tsv[4]) ? null : tsv[4];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: CompanyID = string.IsNullOrWhiteSpace(tsv[6]) ? (int?)null : Convert.ToInt32(tsv[6]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: CompanyID = string.IsNullOrWhiteSpace(tsv[6]) ? (int?)null : Convert.ToInt32(tsv[6]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBIndustry = string.IsNullOrWhiteSpace(tsv[7]) ? null : tsv[7];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBIndustry = string.IsNullOrWhiteSpace(tsv[7]) ? null : tsv[7];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBSuperSector = string.IsNullOrWhiteSpace(tsv[8]) ? null : tsv[8];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBSuperSector = string.IsNullOrWhiteSpace(tsv[8]) ? null : tsv[8];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBSector = string.IsNullOrWhiteSpace(tsv[9]) ? null : tsv[9];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBSector = string.IsNullOrWhiteSpace(tsv[9]) ? null : tsv[9];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBSubSector = string.IsNullOrWhiteSpace(tsv[10]) ? null : tsv[10];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBSubSector = string.IsNullOrWhiteSpace(tsv[10]) ? null : tsv[10];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBCode = string.IsNullOrWhiteSpace(tsv[11]) ? (int?)null : Convert.ToInt32(tsv[11]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: ICBCode = string.IsNullOrWhiteSpace(tsv[11]) ? (int?)null : Convert.ToInt32(tsv[11]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: CompanyName = string.IsNullOrWhiteSpace(tsv[12]) ? null : tsv[12];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: CompanyName = string.IsNullOrWhiteSpace(tsv[12]) ? null : tsv[12];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: SecurityDescription = string.IsNullOrWhiteSpace(tsv[17]) ? null : tsv[17];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: SecurityDescription = string.IsNullOrWhiteSpace(tsv[17]) ? null : tsv[17];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TickerCountry = string.IsNullOrWhiteSpace(tsv[18]) ? null : tsv[18];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TickerCountry = string.IsNullOrWhiteSpace(tsv[18]) ? null : tsv[18];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TickerSymbol = string.IsNullOrWhiteSpace(tsv[19]) ? null : tsv[19];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TickerSymbol = string.IsNullOrWhiteSpace(tsv[19]) ? null : tsv[19];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: AnnouncementDate = string.IsNullOrWhiteSpace(tsv[20]) ? (DateTime?)null : DateTime.ParseExact(tsv[20]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: AnnouncementDate = string.IsNullOrWhiteSpace(tsv[20]) ? (DateTime?)null : DateTime.ParseExact(tsv[20]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeReleased = string.IsNullOrWhiteSpace(tsv[21]) ? (DateTime?)null : DateTime.ParseExact(tsv[21]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeReleased = string.IsNullOrWhiteSpace(tsv[21]) ? (DateTime?)null : DateTime.ParseExact(tsv[21]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeProcessed = string.IsNullOrWhiteSpace(tsv[22]) ? (DateTime?)null : DateTime.ParseExact(tsv[22]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeProcessed = string.IsNullOrWhiteSpace(tsv[22]) ? (DateTime?)null : DateTime.ParseExact(tsv[22]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[23]) ? (DateTime?)null : DateTime.ParseExact(tsv[23]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[23]) ? (DateTime?)null : DateTime.ParseExact(tsv[23]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[24]) ? (DateTime?)null : DateTime.ParseExact(tsv[24]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[24]) ? (DateTime?)null : DateTime.ParseExact(tsv[24]' "yyyyMMdd HH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: AnnouncedIn = string.IsNullOrWhiteSpace(tsv[25]) ? null : tsv[25];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderEvent,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderEvent.cs,SmartInsiderEvent,The following statement contains a magic number: AnnouncedIn = string.IsNullOrWhiteSpace(tsv[25]) ? null : tsv[25];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[26]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[26]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[26]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[26]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[27]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[27]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[27]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[27]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[28]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[28]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[28]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[28]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[29]) ? (int?)null : Convert.ToInt32(tsv[29]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[29]) ? (int?)null : Convert.ToInt32(tsv[29]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: ValueCurrency = string.IsNullOrWhiteSpace(tsv[30]) ? null : tsv[30];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: ValueCurrency = string.IsNullOrWhiteSpace(tsv[30]) ? null : tsv[30];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: AmountValue = string.IsNullOrWhiteSpace(tsv[31]) ? (long?)null : Convert.ToInt64(tsv[31]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: AmountValue = string.IsNullOrWhiteSpace(tsv[31]) ? (long?)null : Convert.ToInt64(tsv[31]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: Percentage = string.IsNullOrWhiteSpace(tsv[32]) ? (decimal?)null : Convert.ToDecimal(tsv[32]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: Percentage = string.IsNullOrWhiteSpace(tsv[32]) ? (decimal?)null : Convert.ToDecimal(tsv[32]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: AuthorizationStartDate = string.IsNullOrWhiteSpace(tsv[33]) ? (DateTime?)null : DateTime.ParseExact(tsv[33]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: AuthorizationStartDate = string.IsNullOrWhiteSpace(tsv[33]) ? (DateTime?)null : DateTime.ParseExact(tsv[33]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: AuthorizationEndDate = string.IsNullOrWhiteSpace(tsv[34]) ? (DateTime?)null : DateTime.ParseExact(tsv[34]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: AuthorizationEndDate = string.IsNullOrWhiteSpace(tsv[34]) ? (DateTime?)null : DateTime.ParseExact(tsv[34]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: PriceCurrency = string.IsNullOrWhiteSpace(tsv[35]) ? null : tsv[35];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: PriceCurrency = string.IsNullOrWhiteSpace(tsv[35]) ? null : tsv[35];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: MinimumPrice = string.IsNullOrWhiteSpace(tsv[36]) ? (decimal?)null : Convert.ToDecimal(tsv[36]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: MinimumPrice = string.IsNullOrWhiteSpace(tsv[36]) ? (decimal?)null : Convert.ToDecimal(tsv[36]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: MaximumPrice = string.IsNullOrWhiteSpace(tsv[37]) ? (decimal?)null : Convert.ToDecimal(tsv[37]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: MaximumPrice = string.IsNullOrWhiteSpace(tsv[37]) ? (decimal?)null : Convert.ToDecimal(tsv[37]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: NoteText = tsv.Length == 39? (string.IsNullOrWhiteSpace(tsv[38]) ? null : tsv[38]) : null;
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: NoteText = tsv.Length == 39? (string.IsNullOrWhiteSpace(tsv[38]) ? null : tsv[38]) : null;
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,SmartInsiderIntention,The following statement contains a magic number: NoteText = tsv.Length == 39? (string.IsNullOrWhiteSpace(tsv[38]) ? null : tsv[38]) : null;
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: LastUpdate = DateTime.ParseExact(tsv[2]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ISIN = string.IsNullOrWhiteSpace(tsv[4]) ? null : tsv[4];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ISIN = string.IsNullOrWhiteSpace(tsv[4]) ? null : tsv[4];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: CompanyID = string.IsNullOrWhiteSpace(tsv[6]) ? (int?)null : Convert.ToInt32(tsv[6]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: CompanyID = string.IsNullOrWhiteSpace(tsv[6]) ? (int?)null : Convert.ToInt32(tsv[6]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBIndustry = string.IsNullOrWhiteSpace(tsv[7]) ? null : tsv[7];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBIndustry = string.IsNullOrWhiteSpace(tsv[7]) ? null : tsv[7];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBSuperSector = string.IsNullOrWhiteSpace(tsv[8]) ? null : tsv[8];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBSuperSector = string.IsNullOrWhiteSpace(tsv[8]) ? null : tsv[8];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBSector = string.IsNullOrWhiteSpace(tsv[9]) ? null : tsv[9];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBSector = string.IsNullOrWhiteSpace(tsv[9]) ? null : tsv[9];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBSubSector = string.IsNullOrWhiteSpace(tsv[10]) ? null : tsv[10];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBSubSector = string.IsNullOrWhiteSpace(tsv[10]) ? null : tsv[10];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBCode = string.IsNullOrWhiteSpace(tsv[11]) ? (int?)null : Convert.ToInt32(tsv[11]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ICBCode = string.IsNullOrWhiteSpace(tsv[11]) ? (int?)null : Convert.ToInt32(tsv[11]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: CompanyName = string.IsNullOrWhiteSpace(tsv[12]) ? null : tsv[12];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: CompanyName = string.IsNullOrWhiteSpace(tsv[12]) ? null : tsv[12];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: SecurityDescription = string.IsNullOrWhiteSpace(tsv[17]) ? null : tsv[17];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: SecurityDescription = string.IsNullOrWhiteSpace(tsv[17]) ? null : tsv[17];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TickerCountry = string.IsNullOrWhiteSpace(tsv[18]) ? null : tsv[18];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TickerCountry = string.IsNullOrWhiteSpace(tsv[18]) ? null : tsv[18];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TickerSymbol = string.IsNullOrWhiteSpace(tsv[19]) ? null : tsv[19];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TickerSymbol = string.IsNullOrWhiteSpace(tsv[19]) ? null : tsv[19];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AnnouncementDate = string.IsNullOrWhiteSpace(tsv[37]) ? (DateTime?)null : DateTime.ParseExact(tsv[37]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AnnouncementDate = string.IsNullOrWhiteSpace(tsv[37]) ? (DateTime?)null : DateTime.ParseExact(tsv[37]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeReleased = string.IsNullOrWhiteSpace(tsv[38]) ? (DateTime?)null : DateTime.ParseExact(tsv[38].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeReleased = string.IsNullOrWhiteSpace(tsv[38]) ? (DateTime?)null : DateTime.ParseExact(tsv[38].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeProcessed = string.IsNullOrWhiteSpace(tsv[39]) ? (DateTime?)null : DateTime.ParseExact(tsv[39].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeProcessed = string.IsNullOrWhiteSpace(tsv[39]) ? (DateTime?)null : DateTime.ParseExact(tsv[39].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[40]) ? (DateTime?)null : DateTime.ParseExact(tsv[40].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[40]) ? (DateTime?)null : DateTime.ParseExact(tsv[40].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[41]) ? (DateTime?)null : DateTime.ParseExact(tsv[41].Replace(" "' "").Trim()' "yyyy-MM-ddHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[41]) ? (DateTime?)null : DateTime.ParseExact(tsv[41].Replace(" "' "").Trim()' "yyyy-MM-ddHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AnnouncedIn = string.IsNullOrWhiteSpace(tsv[42]) ? null : tsv[42];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AnnouncedIn = string.IsNullOrWhiteSpace(tsv[42]) ? null : tsv[42];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[43]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[43]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[43]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[43]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[44]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[44]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[44]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[44]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[45]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[45]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[45]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[45]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[46]) ? (int?)null : Convert.ToInt32(tsv[46]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[46]) ? (int?)null : Convert.ToInt32(tsv[46]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ValueCurrency = string.IsNullOrWhiteSpace(tsv[47]) ? null : tsv[47];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: ValueCurrency = string.IsNullOrWhiteSpace(tsv[47]) ? null : tsv[47];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AmountValue = string.IsNullOrWhiteSpace(tsv[48]) ? (long?)null : Convert.ToInt64(tsv[48]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AmountValue = string.IsNullOrWhiteSpace(tsv[48]) ? (long?)null : Convert.ToInt64(tsv[48]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: Percentage = string.IsNullOrWhiteSpace(tsv[49]) ? (decimal?)null : Convert.ToDecimal(tsv[49]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: Percentage = string.IsNullOrWhiteSpace(tsv[49]) ? (decimal?)null : Convert.ToDecimal(tsv[49]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AuthorizationStartDate = string.IsNullOrWhiteSpace(tsv[50]) ? (DateTime?)null : DateTime.ParseExact(tsv[50]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AuthorizationStartDate = string.IsNullOrWhiteSpace(tsv[50]) ? (DateTime?)null : DateTime.ParseExact(tsv[50]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AuthorizationEndDate = string.IsNullOrWhiteSpace(tsv[51]) ? (DateTime?)null : DateTime.ParseExact(tsv[51]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: AuthorizationEndDate = string.IsNullOrWhiteSpace(tsv[51]) ? (DateTime?)null : DateTime.ParseExact(tsv[51]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: PriceCurrency = string.IsNullOrWhiteSpace(tsv[52]) ? null : tsv[52];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: PriceCurrency = string.IsNullOrWhiteSpace(tsv[52]) ? null : tsv[52];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: MinimumPrice = string.IsNullOrWhiteSpace(tsv[53]) ? (decimal?)null : Convert.ToDecimal(tsv[53]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: MinimumPrice = string.IsNullOrWhiteSpace(tsv[53]) ? (decimal?)null : Convert.ToDecimal(tsv[53]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: MaximumPrice = string.IsNullOrWhiteSpace(tsv[54]) ? (decimal?)null : Convert.ToDecimal(tsv[54]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: MaximumPrice = string.IsNullOrWhiteSpace(tsv[54]) ? (decimal?)null : Convert.ToDecimal(tsv[54]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: NoteText = tsv.Length == 56 ? (string.IsNullOrWhiteSpace(tsv[55]) ? null : tsv[55]) : null;
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: NoteText = tsv.Length == 56 ? (string.IsNullOrWhiteSpace(tsv[55]) ? null : tsv[55]) : null;
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,FromRawData,The following statement contains a magic number: NoteText = tsv.Length == 56 ? (string.IsNullOrWhiteSpace(tsv[55]) ? null : tsv[55]) : null;
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderIntention,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderIntention.cs,Reader,The following statement contains a magic number: intention.Time = intention.Time.AddHours(17).ConvertTo(TimeZones.London'config.DataTimeZone);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: BuybackDate = string.IsNullOrWhiteSpace(tsv[26]) ? (DateTime?)null : DateTime.ParseExact(tsv[26]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: BuybackDate = string.IsNullOrWhiteSpace(tsv[26]) ? (DateTime?)null : DateTime.ParseExact(tsv[26]' "yyyyMMdd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[27]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[27]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[27]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[27]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[28]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[28]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[28]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[28]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[29]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[29]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[29]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[29]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: Currency = string.IsNullOrWhiteSpace(tsv[30]) ? null : tsv[30];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: Currency = string.IsNullOrWhiteSpace(tsv[30]) ? null : tsv[30];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ExecutionPrice = string.IsNullOrWhiteSpace(tsv[31]) ? (decimal?)null : Convert.ToDecimal(tsv[31]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ExecutionPrice = string.IsNullOrWhiteSpace(tsv[31]) ? (decimal?)null : Convert.ToDecimal(tsv[31]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[32]) ? (decimal?)null : Convert.ToDecimal(tsv[32]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[32]) ? (decimal?)null : Convert.ToDecimal(tsv[32]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: GBPValue = string.IsNullOrWhiteSpace(tsv[33]) ? (decimal?)null : Convert.ToDecimal(tsv[33]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: GBPValue = string.IsNullOrWhiteSpace(tsv[33]) ? (decimal?)null : Convert.ToDecimal(tsv[33]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: EURValue = string.IsNullOrWhiteSpace(tsv[34]) ? (decimal?)null : Convert.ToDecimal(tsv[34]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: EURValue = string.IsNullOrWhiteSpace(tsv[34]) ? (decimal?)null : Convert.ToDecimal(tsv[34]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: USDValue = string.IsNullOrWhiteSpace(tsv[35]) ? (decimal?)null : Convert.ToDecimal(tsv[35]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: USDValue = string.IsNullOrWhiteSpace(tsv[35]) ? (decimal?)null : Convert.ToDecimal(tsv[35]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: NoteText = string.IsNullOrWhiteSpace(tsv[36]) ? null : tsv[36];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: NoteText = string.IsNullOrWhiteSpace(tsv[36]) ? null : tsv[36];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: BuybackPercentage = string.IsNullOrWhiteSpace(tsv[37]) ? (decimal?)null : Convert.ToDecimal(tsv[37]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: BuybackPercentage = string.IsNullOrWhiteSpace(tsv[37]) ? (decimal?)null : Convert.ToDecimal(tsv[37]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: VolumePercentage = string.IsNullOrWhiteSpace(tsv[38]) ? (decimal?)null : Convert.ToDecimal(tsv[38]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: VolumePercentage = string.IsNullOrWhiteSpace(tsv[38]) ? (decimal?)null : Convert.ToDecimal(tsv[38]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ConversionRate = string.IsNullOrWhiteSpace(tsv[39]) ? (decimal?)null : Convert.ToDecimal(tsv[39]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: ConversionRate = string.IsNullOrWhiteSpace(tsv[39]) ? (decimal?)null : Convert.ToDecimal(tsv[39]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: AmountAdjustedFactor = string.IsNullOrWhiteSpace(tsv[40]) ? (decimal?)null : Convert.ToDecimal(tsv[40]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: AmountAdjustedFactor = string.IsNullOrWhiteSpace(tsv[40]) ? (decimal?)null : Convert.ToDecimal(tsv[40]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: PriceAdjustedFactor = string.IsNullOrWhiteSpace(tsv[41]) ? (decimal?)null : Convert.ToDecimal(tsv[41]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: PriceAdjustedFactor = string.IsNullOrWhiteSpace(tsv[41]) ? (decimal?)null : Convert.ToDecimal(tsv[41]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: TreasuryHolding = string.IsNullOrWhiteSpace(tsv[42]) ? (int?)null : Convert.ToInt32(tsv[42]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,SmartInsiderTransaction,The following statement contains a magic number: TreasuryHolding = string.IsNullOrWhiteSpace(tsv[42]) ? (int?)null : Convert.ToInt32(tsv[42]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: LastUpdate = DateTime.ParseExact(tsv[2]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: LastIDsUpdate = string.IsNullOrWhiteSpace(tsv[3]) ? (DateTime?)null : DateTime.ParseExact(tsv[3]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ISIN = string.IsNullOrWhiteSpace(tsv[4]) ? null : tsv[4];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ISIN = string.IsNullOrWhiteSpace(tsv[4]) ? null : tsv[4];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: USDMarketCap = string.IsNullOrWhiteSpace(tsv[5]) ? (decimal?)null : Convert.ToDecimal(tsv[5]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: CompanyID = string.IsNullOrWhiteSpace(tsv[6]) ? (int?)null : Convert.ToInt32(tsv[6]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: CompanyID = string.IsNullOrWhiteSpace(tsv[6]) ? (int?)null : Convert.ToInt32(tsv[6]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBIndustry = string.IsNullOrWhiteSpace(tsv[7]) ? null : tsv[7];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBIndustry = string.IsNullOrWhiteSpace(tsv[7]) ? null : tsv[7];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBSuperSector = string.IsNullOrWhiteSpace(tsv[8]) ? null : tsv[8];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBSuperSector = string.IsNullOrWhiteSpace(tsv[8]) ? null : tsv[8];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBSector = string.IsNullOrWhiteSpace(tsv[9]) ? null : tsv[9];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBSector = string.IsNullOrWhiteSpace(tsv[9]) ? null : tsv[9];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBSubSector = string.IsNullOrWhiteSpace(tsv[10]) ? null : tsv[10];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBSubSector = string.IsNullOrWhiteSpace(tsv[10]) ? null : tsv[10];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBCode = string.IsNullOrWhiteSpace(tsv[11]) ? (int?)null : Convert.ToInt32(tsv[11]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ICBCode = string.IsNullOrWhiteSpace(tsv[11]) ? (int?)null : Convert.ToInt32(tsv[11]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: CompanyName = string.IsNullOrWhiteSpace(tsv[12]) ? null : tsv[12];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: CompanyName = string.IsNullOrWhiteSpace(tsv[12]) ? null : tsv[12];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: PreviousResultsAnnouncementDate = string.IsNullOrWhiteSpace(tsv[13]) ? (DateTime?)null : DateTime.ParseExact(tsv[13]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: NextResultsAnnouncementsDate = string.IsNullOrWhiteSpace(tsv[14]) ? (DateTime?)null : DateTime.ParseExact(tsv[14]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: NextCloseBegin = string.IsNullOrWhiteSpace(tsv[15]) ? (DateTime?)null : DateTime.ParseExact(tsv[15]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: LastCloseEnded = string.IsNullOrWhiteSpace(tsv[16]) ? (DateTime?)null : DateTime.ParseExact(tsv[16]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: SecurityDescription = string.IsNullOrWhiteSpace(tsv[17]) ? null : tsv[17];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: SecurityDescription = string.IsNullOrWhiteSpace(tsv[17]) ? null : tsv[17];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TickerCountry = string.IsNullOrWhiteSpace(tsv[18]) ? null : tsv[18];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TickerCountry = string.IsNullOrWhiteSpace(tsv[18]) ? null : tsv[18];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TickerSymbol = string.IsNullOrWhiteSpace(tsv[19]) ? null : tsv[19];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TickerSymbol = string.IsNullOrWhiteSpace(tsv[19]) ? null : tsv[19];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: BuybackDate = string.IsNullOrWhiteSpace(tsv[20]) ? (DateTime?)null : DateTime.ParseExact(tsv[20]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: BuybackDate = string.IsNullOrWhiteSpace(tsv[20]) ? (DateTime?)null : DateTime.ParseExact(tsv[20]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[21]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[21]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: Execution = string.IsNullOrWhiteSpace(tsv[21]) ? (SmartInsiderExecution?)null : JsonConvert.DeserializeObject<SmartInsiderExecution>($"\"{tsv[21]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[22]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[22]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ExecutionEntity = string.IsNullOrWhiteSpace(tsv[22]) ? (SmartInsiderExecutionEntity?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionEntity>($"\"{tsv[22]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[23]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[23]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ExecutionHolding = string.IsNullOrWhiteSpace(tsv[23]) ? (SmartInsiderExecutionHolding?)null : JsonConvert.DeserializeObject<SmartInsiderExecutionHolding>($"\"{tsv[23]}\"");
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: Currency = string.IsNullOrWhiteSpace(tsv[24]) ? null : tsv[24];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: Currency = string.IsNullOrWhiteSpace(tsv[24]) ? null : tsv[24];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ExecutionPrice = string.IsNullOrWhiteSpace(tsv[25]) ? (decimal?)null : Convert.ToDecimal(tsv[25]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ExecutionPrice = string.IsNullOrWhiteSpace(tsv[25]) ? (decimal?)null : Convert.ToDecimal(tsv[25]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[26]) ? (decimal?)null : Convert.ToDecimal(tsv[26]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: Amount = string.IsNullOrWhiteSpace(tsv[26]) ? (decimal?)null : Convert.ToDecimal(tsv[26]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: GBPValue = string.IsNullOrWhiteSpace(tsv[27]) ? (decimal?)null : Convert.ToDecimal(tsv[27]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: GBPValue = string.IsNullOrWhiteSpace(tsv[27]) ? (decimal?)null : Convert.ToDecimal(tsv[27]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: EURValue = string.IsNullOrWhiteSpace(tsv[28]) ? (decimal?)null : Convert.ToDecimal(tsv[28]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: EURValue = string.IsNullOrWhiteSpace(tsv[28]) ? (decimal?)null : Convert.ToDecimal(tsv[28]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: USDValue = string.IsNullOrWhiteSpace(tsv[29]) ? (decimal?)null : Convert.ToDecimal(tsv[29]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: USDValue = string.IsNullOrWhiteSpace(tsv[29]) ? (decimal?)null : Convert.ToDecimal(tsv[29]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: NoteText = string.IsNullOrWhiteSpace(tsv[30]) ? null : tsv[30];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: NoteText = string.IsNullOrWhiteSpace(tsv[30]) ? null : tsv[30];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: BuybackPercentage = string.IsNullOrWhiteSpace(tsv[31]) ? (decimal?)null : Convert.ToDecimal(tsv[31]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: BuybackPercentage = string.IsNullOrWhiteSpace(tsv[31]) ? (decimal?)null : Convert.ToDecimal(tsv[31]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: VolumePercentage = string.IsNullOrWhiteSpace(tsv[32]) ? (decimal?)null : Convert.ToDecimal(tsv[32]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: VolumePercentage = string.IsNullOrWhiteSpace(tsv[32]) ? (decimal?)null : Convert.ToDecimal(tsv[32]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ConversionRate = string.IsNullOrWhiteSpace(tsv[33]) ? (decimal?)null : Convert.ToDecimal(tsv[33]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: ConversionRate = string.IsNullOrWhiteSpace(tsv[33]) ? (decimal?)null : Convert.ToDecimal(tsv[33]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: AmountAdjustedFactor = string.IsNullOrWhiteSpace(tsv[34]) ? (decimal?)null : Convert.ToDecimal(tsv[34]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: AmountAdjustedFactor = string.IsNullOrWhiteSpace(tsv[34]) ? (decimal?)null : Convert.ToDecimal(tsv[34]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: PriceAdjustedFactor = string.IsNullOrWhiteSpace(tsv[35]) ? (decimal?)null : Convert.ToDecimal(tsv[35]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: PriceAdjustedFactor = string.IsNullOrWhiteSpace(tsv[35]) ? (decimal?)null : Convert.ToDecimal(tsv[35]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TreasuryHolding = string.IsNullOrWhiteSpace(tsv[36]) ? (int?)null : Convert.ToInt32(tsv[36]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TreasuryHolding = string.IsNullOrWhiteSpace(tsv[36]) ? (int?)null : Convert.ToInt32(tsv[36]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: AnnouncementDate = string.IsNullOrWhiteSpace(tsv[37]) ? (DateTime?)null : DateTime.ParseExact(tsv[37]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: AnnouncementDate = string.IsNullOrWhiteSpace(tsv[37]) ? (DateTime?)null : DateTime.ParseExact(tsv[37]' "yyyy-MM-dd"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeReleased = string.IsNullOrWhiteSpace(tsv[38]) ? (DateTime?)null : DateTime.ParseExact(tsv[38].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeReleased = string.IsNullOrWhiteSpace(tsv[38]) ? (DateTime?)null : DateTime.ParseExact(tsv[38].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeProcessed = string.IsNullOrWhiteSpace(tsv[39]) ? (DateTime?)null : DateTime.ParseExact(tsv[39].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeProcessed = string.IsNullOrWhiteSpace(tsv[39]) ? (DateTime?)null : DateTime.ParseExact(tsv[39].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[40]) ? (DateTime?)null : DateTime.ParseExact(tsv[40].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeReleasedUtc = string.IsNullOrWhiteSpace(tsv[40]) ? (DateTime?)null : DateTime.ParseExact(tsv[40].Replace(" "' "").Trim()' "dd/MM/yyyyHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[41]) ? (DateTime?)null : DateTime.ParseExact(tsv[41].Replace(" "' "").Trim()' "yyyy-MM-ddHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: TimeProcessedUtc = string.IsNullOrWhiteSpace(tsv[41]) ? (DateTime?)null : DateTime.ParseExact(tsv[41].Replace(" "' "").Trim()' "yyyy-MM-ddHH:mm:ss"' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: AnnouncedIn = string.IsNullOrWhiteSpace(tsv[42]) ? null : tsv[42];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,FromRawData,The following statement contains a magic number: AnnouncedIn = string.IsNullOrWhiteSpace(tsv[42]) ? null : tsv[42];
Magic Number,QuantConnect.Data.Custom.SmartInsider,SmartInsiderTransaction,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\SmartInsider\SmartInsiderTransaction.cs,Reader,The following statement contains a magic number: transaction.Time = transaction.Time.AddHours(17).ConvertTo(TimeZones.London' config.DataTimeZone);
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: Source = (Source)Enum.Parse(typeof(Source)' csv[2]);
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: Type = csv[3].IfNotNullOrEmpty(s => (Type)Enum.Parse(typeof(Type)' s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: Mean = csv[4].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: High = csv[5].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: Low = csv[6].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: StandardDeviation = csv[7].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: FiscalYear = csv[8].IfNotNullOrEmpty<int?>(s => Parse.Int(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: FiscalQuarter = csv[9].IfNotNullOrEmpty<int?>(s => Parse.Int(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeConsensus,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeConsensus.cs,EstimizeConsensus,The following statement contains a magic number: Count = csv[10].IfNotNullOrEmpty<int?>(s => Parse.Int(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeEstimate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeEstimate.cs,EstimizeEstimate,The following statement contains a magic number: AnalystId = csv[2];
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeEstimate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeEstimate.cs,EstimizeEstimate,The following statement contains a magic number: UserName = csv[3];
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeEstimate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeEstimate.cs,EstimizeEstimate,The following statement contains a magic number: FiscalYear = Parse.Int(csv[4]);
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeEstimate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeEstimate.cs,EstimizeEstimate,The following statement contains a magic number: FiscalQuarter = Parse.Int(csv[5]);
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeEstimate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeEstimate.cs,EstimizeEstimate,The following statement contains a magic number: Eps = csv[6].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeEstimate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeEstimate.cs,EstimizeEstimate,The following statement contains a magic number: Revenue = csv[7].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeEstimate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeEstimate.cs,EstimizeEstimate,The following statement contains a magic number: Flagged = csv[8].ConvertInvariant<bool>();
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: FiscalYear = Parse.Int(csv[2]);
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: FiscalQuarter = Parse.Int(csv[3]);
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: Eps = csv[4].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: Revenue = csv[5].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: ConsensusEpsEstimate = csv[6].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: ConsensusRevenueEstimate = csv[7].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: WallStreetEpsEstimate = csv[8].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: WallStreetRevenueEstimate = csv[9].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: ConsensusWeightedEpsEstimate = csv[10].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.Estimize,EstimizeRelease,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Estimize\EstimizeRelease.cs,EstimizeRelease,The following statement contains a magic number: ConsensusWeightedRevenueEstimate = csv[11].IfNotNullOrEmpty<decimal?>(s => Parse.Decimal(s));
Magic Number,QuantConnect.Data.Custom.PsychSignal,PsychSignalSentiment,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\PsychSignal\PsychSignalSentiment.cs,Reader,The following statement contains a magic number: var bearIntensity = Convert.ToDecimal(csv[2]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.PsychSignal,PsychSignalSentiment,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\PsychSignal\PsychSignalSentiment.cs,Reader,The following statement contains a magic number: var bullMinusBear = Convert.ToDecimal(csv[3]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.PsychSignal,PsychSignalSentiment,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\PsychSignal\PsychSignalSentiment.cs,Reader,The following statement contains a magic number: var bullScoredMessages = Convert.ToInt32(csv[4]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.PsychSignal,PsychSignalSentiment,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\PsychSignal\PsychSignalSentiment.cs,Reader,The following statement contains a magic number: var bearScoredMessages = Convert.ToInt32(csv[5]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.PsychSignal,PsychSignalSentiment,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\PsychSignal\PsychSignalSentiment.cs,Reader,The following statement contains a magic number: var bullBearMessageRatio = Convert.ToDecimal(csv[6]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.PsychSignal,PsychSignalSentiment,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\PsychSignal\PsychSignalSentiment.cs,Reader,The following statement contains a magic number: var totalScannedMessages = Convert.ToInt32(csv[7]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Custom.USTreasury,USTreasuryYieldCurveRate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\USTreasury\USTreasuryYieldCurveRate.cs,Reader,The following statement contains a magic number: return new USTreasuryYieldCurveRate              {                  // "These market yields are calculated from composites of indicative' bid-side                  // market quotations (not actual transactions) obtained by the                  // Federal Reserve Bank of New York at or near 3:30 PM each trading day"                  //                  // Remarks: Publication time was about an hour delayed on 2019-07-24 - verified by manual observation                  // 20:30 UTC == 16:30 ET                  Time = csvDate.Date.AddHours(16).AddMinutes(30)'                  OneMonth = csvDecimals[0]'                  TwoMonth = csvDecimals[1]'                  ThreeMonth = csvDecimals[2]'                  SixMonth = csvDecimals[3]'                  OneYear = csvDecimals[4]'                  TwoYear = csvDecimals[5]'                  ThreeYear = csvDecimals[6]'                  FiveYear = csvDecimals[7]'                  SevenYear = csvDecimals[8]'                  TenYear = csvDecimals[9]'                  TwentyYear = csvDecimals[10]'                  ThirtyYear = csvDecimals[11]'                  Symbol = config.Symbol              };
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data.Fundamental,PeriodAsByte,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Fundamental\Period.cs,Convert,The following statement contains a magic number: switch (period)              {                  case 0:                      // no period case                      return "";                  case 1:                      return Period.OneMonth;                  case 2:                      return Period.TwoMonths;                  case 3:                      return Period.ThreeMonths;                  case 6:                      return Period.SixMonths;                  case 9:                      return Period.NineMonths;                  case 12:                      return Period.TwelveMonths;                  case 121:                      return Period.OneYear;                  case 24:                      return Period.TwoYears;                  case 36:                      return Period.ThreeYears;                  case 60:                      return Period.FiveYears;                  case 120:                      return Period.TenYears;                  default:                      throw new InvalidOperationException(Invariant($"{period} is not a valid period value"));              }
Magic Number,QuantConnect.Data,SubscriptionDataSource,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataSource.cs,GetHashCode,The following statement contains a magic number: return ((Source != null ? Source.GetHashCode() : 0)*397) ^ (int) TransportMedium;
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ Type.GetHashCode();
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (int) TickType;
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (int) Resolution;
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ FillDataForward.GetHashCode();
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ ExtendedMarketHours.GetHashCode();
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ IsInternalFeed.GetHashCode();
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ IsCustomData.GetHashCode();
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ DataTimeZone.Id.GetHashCode();
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ ExchangeTimeZone.Id.GetHashCode();
Magic Number,QuantConnect.Data,SubscriptionDataConfig,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\SubscriptionDataConfig.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ IsFilteredSubscription.GetHashCode();
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: var coarse = new CoarseFundamental                  {                      Symbol = new Symbol(SecurityIdentifier.Parse(csv[0])' csv[1])'                      Time = date'                      Market = config.Market'                      Value = csv[2].ToDecimal()'                      Volume = csv[3].ToInt64()'                      DollarVolume = csv[4].ToDecimal()                  };
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: var coarse = new CoarseFundamental                  {                      Symbol = new Symbol(SecurityIdentifier.Parse(csv[0])' csv[1])'                      Time = date'                      Market = config.Market'                      Value = csv[2].ToDecimal()'                      Volume = csv[3].ToInt64()'                      DollarVolume = csv[4].ToDecimal()                  };
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: var coarse = new CoarseFundamental                  {                      Symbol = new Symbol(SecurityIdentifier.Parse(csv[0])' csv[1])'                      Time = date'                      Market = config.Market'                      Value = csv[2].ToDecimal()'                      Volume = csv[3].ToInt64()'                      DollarVolume = csv[4].ToDecimal()                  };
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: coarse.HasFundamentalData = csv[5].ConvertInvariant<bool>();
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: csv.Length > 5
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: coarse.PriceFactor = csv[6].ToDecimal();
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: coarse.SplitFactor = csv[7].ToDecimal();
Magic Number,QuantConnect.Data.UniverseSelection,CoarseFundamental,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\UniverseSelection\CoarseFundamental.cs,Reader,The following statement contains a magic number: csv.Length > 7
Magic Number,QuantConnect.Indicators,IndicatorDataPoint,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Indicators\IndicatorDataPoint.cs,GetHashCode,The following statement contains a magic number: return (Value.GetHashCode()*397) ^ Time.GetHashCode();
Magic Number,QuantConnect.Orders.Fees,GDAXFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\GDAXFeeModel.cs,GetFeePercentage,The following statement contains a magic number: return isMaker ? 0m : 0.003m;
Magic Number,QuantConnect.Orders.Fees,GDAXFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\GDAXFeeModel.cs,GetFeePercentage,The following statement contains a magic number: utcTime < new DateTime(2019' 3' 23' 1' 30' 0)
Magic Number,QuantConnect.Orders.Fees,GDAXFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\GDAXFeeModel.cs,GetFeePercentage,The following statement contains a magic number: utcTime < new DateTime(2019' 3' 23' 1' 30' 0)
Magic Number,QuantConnect.Orders.Fees,GDAXFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\GDAXFeeModel.cs,GetFeePercentage,The following statement contains a magic number: utcTime < new DateTime(2019' 3' 23' 1' 30' 0)
Magic Number,QuantConnect.Orders.Fees,GDAXFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\GDAXFeeModel.cs,GetFeePercentage,The following statement contains a magic number: utcTime < new DateTime(2019' 3' 23' 1' 30' 0)
Magic Number,QuantConnect.Orders.Fees,GDAXFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\GDAXFeeModel.cs,GetFeePercentage,The following statement contains a magic number: return isMaker ? 0.0015m : 0.0025m;
Magic Number,QuantConnect.Orders.Fees,GDAXFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\GDAXFeeModel.cs,GetFeePercentage,The following statement contains a magic number: return isMaker ? 0.0015m : 0.0025m;
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,GetOrderFee,The following statement contains a magic number: switch (security.Type)              {                  case SecurityType.Forex:                      // get the total order value in the account currency                      var totalOrderValue = order.GetValue(security);                      var fee = Math.Abs(_forexCommissionRate*totalOrderValue);                      feeResult = Math.Max(_forexMinimumOrderFee' fee);                      // IB Forex fees are all in USD                      feeCurrency = Currencies.USD;                      break;                    case SecurityType.Option:                      Func<decimal' decimal' CashAmount> optionsCommissionFunc;                      if (!_optionFee.TryGetValue(market' out optionsCommissionFunc))                      {                          throw new KeyNotFoundException($"InteractiveBrokersFeeModel(): unexpected option Market {market}");                      }                      // applying commission function to the order                      var optionFee = optionsCommissionFunc(order.AbsoluteQuantity' order.Price);                      feeResult = optionFee.Amount;                      feeCurrency = optionFee.Currency;                      break;                    case SecurityType.Future:                      if (market == Market.Globex || market == Market.NYMEX                          || market == Market.CBOT || market == Market.ICE                          || market == Market.CBOE || market == Market.NSE)                      {                          // just in case...                          market = Market.USA;                      }                        CashAmount feeRatePerContract;                      if (!_futureFee.TryGetValue(market' out feeRatePerContract))                      {                          throw new KeyNotFoundException($"InteractiveBrokersFeeModel(): unexpected future Market {market}");                      }                      feeResult = order.AbsoluteQuantity * feeRatePerContract.Amount;                      feeCurrency = feeRatePerContract.Currency;                      break;                    case SecurityType.Equity:                      EquityFee equityFee;                      switch (market)                      {                          case Market.USA:                              equityFee = new EquityFee("USD"' feePerShare: 0.005m' minimumFee: 1' maximumFeeRate: 0.005m);                              break;                          default:                              throw new KeyNotFoundException($"InteractiveBrokersFeeModel(): unexpected equity Market {market}");                      }                      var tradeValue = Math.Abs(order.GetValue(security));                        //Per share fees                      var tradeFee = equityFee.FeePerShare * order.AbsoluteQuantity;                        //Maximum Per Order: equityFee.MaximumFeeRate                      //Minimum per order. $equityFee.MinimumFee                      var maximumPerOrder = equityFee.MaximumFeeRate * tradeValue;                      if (tradeFee < equityFee.MinimumFee)                      {                          tradeFee = equityFee.MinimumFee;                      }                      else if (tradeFee > maximumPerOrder)                      {                          tradeFee = maximumPerOrder;                      }                        feeCurrency = equityFee.Currency;                      //Always return a positive fee.                      feeResult = Math.Abs(tradeFee);                      break;                    default:                      // unsupported security type                      throw new ArgumentException(Invariant($"Unsupported security type: {security.Type}"));              }
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,GetOrderFee,The following statement contains a magic number: switch (security.Type)              {                  case SecurityType.Forex:                      // get the total order value in the account currency                      var totalOrderValue = order.GetValue(security);                      var fee = Math.Abs(_forexCommissionRate*totalOrderValue);                      feeResult = Math.Max(_forexMinimumOrderFee' fee);                      // IB Forex fees are all in USD                      feeCurrency = Currencies.USD;                      break;                    case SecurityType.Option:                      Func<decimal' decimal' CashAmount> optionsCommissionFunc;                      if (!_optionFee.TryGetValue(market' out optionsCommissionFunc))                      {                          throw new KeyNotFoundException($"InteractiveBrokersFeeModel(): unexpected option Market {market}");                      }                      // applying commission function to the order                      var optionFee = optionsCommissionFunc(order.AbsoluteQuantity' order.Price);                      feeResult = optionFee.Amount;                      feeCurrency = optionFee.Currency;                      break;                    case SecurityType.Future:                      if (market == Market.Globex || market == Market.NYMEX                          || market == Market.CBOT || market == Market.ICE                          || market == Market.CBOE || market == Market.NSE)                      {                          // just in case...                          market = Market.USA;                      }                        CashAmount feeRatePerContract;                      if (!_futureFee.TryGetValue(market' out feeRatePerContract))                      {                          throw new KeyNotFoundException($"InteractiveBrokersFeeModel(): unexpected future Market {market}");                      }                      feeResult = order.AbsoluteQuantity * feeRatePerContract.Amount;                      feeCurrency = feeRatePerContract.Currency;                      break;                    case SecurityType.Equity:                      EquityFee equityFee;                      switch (market)                      {                          case Market.USA:                              equityFee = new EquityFee("USD"' feePerShare: 0.005m' minimumFee: 1' maximumFeeRate: 0.005m);                              break;                          default:                              throw new KeyNotFoundException($"InteractiveBrokersFeeModel(): unexpected equity Market {market}");                      }                      var tradeValue = Math.Abs(order.GetValue(security));                        //Per share fees                      var tradeFee = equityFee.FeePerShare * order.AbsoluteQuantity;                        //Maximum Per Order: equityFee.MaximumFeeRate                      //Minimum per order. $equityFee.MinimumFee                      var maximumPerOrder = equityFee.MaximumFeeRate * tradeValue;                      if (tradeFee < equityFee.MinimumFee)                      {                          tradeFee = equityFee.MinimumFee;                      }                      else if (tradeFee > maximumPerOrder)                      {                          tradeFee = maximumPerOrder;                      }                        feeCurrency = equityFee.Currency;                      //Always return a positive fee.                      feeResult = Math.Abs(tradeFee);                      break;                    default:                      // unsupported security type                      throw new ArgumentException(Invariant($"Unsupported security type: {security.Type}"));              }
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessForexRateSchedule,The following statement contains a magic number: const decimal bp = 0.0001m;
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessForexRateSchedule,The following statement contains a magic number: commissionRate = 0.20m * bp;
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessForexRateSchedule,The following statement contains a magic number: minimumOrderFee = 2.00m;
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessForexRateSchedule,The following statement contains a magic number: monthlyForexTradeAmountInUSDollars <= 1000000000
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: const decimal bp = 0.0001m;
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: optionsCommissionFunc = (orderSize' premium) =>                  {                      var commissionRate = premium >= 0.1m ?                                              0.7m :                                              (0.05m <= premium && premium < 0.1m ? 0.5m : 0.25m);                      return new CashAmount(Math.Max(orderSize * commissionRate' 1.0m)' Currencies.USD);                  };
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: optionsCommissionFunc = (orderSize' premium) =>                  {                      var commissionRate = premium >= 0.1m ?                                              0.7m :                                              (0.05m <= premium && premium < 0.1m ? 0.5m : 0.25m);                      return new CashAmount(Math.Max(orderSize * commissionRate' 1.0m)' Currencies.USD);                  };
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: optionsCommissionFunc = (orderSize' premium) =>                  {                      var commissionRate = premium >= 0.1m ?                                              0.7m :                                              (0.05m <= premium && premium < 0.1m ? 0.5m : 0.25m);                      return new CashAmount(Math.Max(orderSize * commissionRate' 1.0m)' Currencies.USD);                  };
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: optionsCommissionFunc = (orderSize' premium) =>                  {                      var commissionRate = premium >= 0.1m ?                                              0.7m :                                              (0.05m <= premium && premium < 0.1m ? 0.5m : 0.25m);                      return new CashAmount(Math.Max(orderSize * commissionRate' 1.0m)' Currencies.USD);                  };
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: optionsCommissionFunc = (orderSize' premium) =>                  {                      var commissionRate = premium >= 0.1m ?                                              0.7m :                                              (0.05m <= premium && premium < 0.1m ? 0.5m : 0.25m);                      return new CashAmount(Math.Max(orderSize * commissionRate' 1.0m)' Currencies.USD);                  };
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: optionsCommissionFunc = (orderSize' premium) =>                  {                      var commissionRate = premium >= 0.1m ?                                              0.7m :                                              (0.05m <= premium && premium < 0.1m ? 0.5m : 0.25m);                      return new CashAmount(Math.Max(orderSize * commissionRate' 1.0m)' Currencies.USD);                  };
Magic Number,QuantConnect.Orders.Fees,InteractiveBrokersFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\InteractiveBrokersFeeModel.cs,ProcessOptionsRateSchedule,The following statement contains a magic number: monthlyOptionsTradeAmountInContracts <= 10000
Magic Number,QuantConnect.Orders.Fees,FxcmFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\FxcmFeeModel.cs,GetOrderFee,The following statement contains a magic number: var commissionRate = _groupCommissionSchedule1.Contains(parameters.Security.Symbol)                      ? 0.04m : 0.06m;
Magic Number,QuantConnect.Orders.Fees,FxcmFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\FxcmFeeModel.cs,GetOrderFee,The following statement contains a magic number: var commissionRate = _groupCommissionSchedule1.Contains(parameters.Security.Symbol)                      ? 0.04m : 0.06m;
Magic Number,QuantConnect.Orders.Fees,FxcmFeeModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fees\FxcmFeeModel.cs,GetOrderFee,The following statement contains a magic number: fee = Math.Abs(commissionRate * parameters.Order.AbsoluteQuantity / 1000);
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: MinuteLimit = 500;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: SecondLimit = 100;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: TickLimit = 30;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: RamAllocation = 1024;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: BacktestLogLimit = 10000;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: DailyLogLimit = 3000000;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: RemainingLogAllowance = 10000;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: BacktestingMaxInsights = 10000;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: MaximumDataPointsPerChartSeries = 4000;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: SecondTimeOut = 300;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: StorageLimitMB = 5;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: StorageFileCount = 100;
Magic Number,QuantConnect.Packets,Controls,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\Controls.cs,Controls,The following statement contains a magic number: PersistenceIntervalSeconds = 5;
Magic Number,QuantConnect.Packets,BacktestNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestNodePacket.cs,BacktestNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 500'                  SecondLimit = 100'                  TickLimit = 30              };
Magic Number,QuantConnect.Packets,BacktestNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestNodePacket.cs,BacktestNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 500'                  SecondLimit = 100'                  TickLimit = 30              };
Magic Number,QuantConnect.Packets,BacktestNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestNodePacket.cs,BacktestNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 500'                  SecondLimit = 100'                  TickLimit = 30              };
Magic Number,QuantConnect.Packets,BacktestNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestNodePacket.cs,BacktestNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 500'                  SecondLimit = 100'                  TickLimit = 30              };
Magic Number,QuantConnect.Packets,BacktestNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestNodePacket.cs,BacktestNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 500'                  SecondLimit = 100'                  TickLimit = 30              };
Magic Number,QuantConnect.Packets,BacktestNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestNodePacket.cs,BacktestNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 500'                  SecondLimit = 100'                  TickLimit = 30              };
Magic Number,QuantConnect.Packets,BacktestResultPacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\BacktestResultPacket.cs,BacktestResultPacket,The following statement contains a magic number: Progress = Math.Round(progress' 3);
Magic Number,QuantConnect.Packets,LiveNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\LiveNodePacket.cs,LiveNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 100'                  SecondLimit = 50'                  TickLimit = 25'                  RamAllocation = 512              };
Magic Number,QuantConnect.Packets,LiveNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\LiveNodePacket.cs,LiveNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 100'                  SecondLimit = 50'                  TickLimit = 25'                  RamAllocation = 512              };
Magic Number,QuantConnect.Packets,LiveNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\LiveNodePacket.cs,LiveNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 100'                  SecondLimit = 50'                  TickLimit = 25'                  RamAllocation = 512              };
Magic Number,QuantConnect.Packets,LiveNodePacket,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\LiveNodePacket.cs,LiveNodePacket,The following statement contains a magic number: Controls = new Controls              {                  MinuteLimit = 100'                  SecondLimit = 50'                  TickLimit = 25'                  RamAllocation = 512              };
Magic Number,QuantConnect.Packets,MarketHours,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Packets\MarketTodayPacket.cs,MarketHours,The following statement contains a magic number: defaultEnd == 24
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,PandasData,The following statement contains a magic number: Levels = 3;
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,PandasData,The following statement contains a magic number: Levels = 5;
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: var list = Enumerable.Repeat<PyObject>(empty' 5).ToList();
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: list[3] = _symbol.ID.ToString().ToPython();
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: list[3] = _symbol.ID.ToString().ToPython();
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: list[2] = _symbol.ID.OptionRight.ToString().ToPython();
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: list[3] = _symbol.ID.ToString().ToPython();
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: list.RemoveRange(0' 3);
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: levels == 2
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: list.RemoveRange(1' 2);
Magic Number,QuantConnect.Python,PandasData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Python\PandasData.cs,ToPandasDataFrame,The following statement contains a magic number: levels == 3
Magic Number,QuantConnect.Securities,SecurityService,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityService.cs,CreateSecurity,The following statement contains a magic number: defaultQuoteCurrency = symbol.Value.Substring(3);
Magic Number,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,ToString,The following statement contains a magic number: rate = rate < 1000 ? rate.RoundToSignificantDigits(5) : Math.Round(rate' 2);
Magic Number,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,ToString,The following statement contains a magic number: rate = rate < 1000 ? rate.RoundToSignificantDigits(5) : Math.Round(rate' 2);
Magic Number,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,ToString,The following statement contains a magic number: rate = rate < 1000 ? rate.RoundToSignificantDigits(5) : Math.Round(rate' 2);
Magic Number,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,ToString,The following statement contains a magic number: return Invariant($"{Symbol}: {CurrencySymbol}{Amount'15:0.00} @ {rate'10:0.00####} = ${Math.Round(ValueInAccountCurrency' 2)}");
Magic Number,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,ToString,The following statement contains a magic number: return Invariant($"{Symbol}: {CurrencySymbol}{Amount'15:0.00} @ {rate'10:0.00####} = ${Math.Round(ValueInAccountCurrency' 2)}");
Magic Number,QuantConnect.Securities,Cash,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Cash.cs,ToString,The following statement contains a magic number: return Invariant($"{Symbol}: {CurrencySymbol}{Amount'15:0.00} @ {rate'10:0.00####} = ${Math.Round(ValueInAccountCurrency' 2)}");
Magic Number,QuantConnect.Securities,CashBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBook.cs,ToString,The following statement contains a magic number: sb.AppendLine(Invariant($"Symbol {"Quantity"'13}    {"Conversion"'10} = Value in {AccountCurrency}"));
Magic Number,QuantConnect.Securities,CashBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBook.cs,ToString,The following statement contains a magic number: sb.AppendLine(Invariant($"Symbol {"Quantity"'13}    {"Conversion"'10} = Value in {AccountCurrency}"));
Magic Number,QuantConnect.Securities,CashBook,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBook.cs,ToString,The following statement contains a magic number: sb.AppendLine("CashBook Total Value:                " +                  Invariant($"{Currencies.GetCurrencySymbol(AccountCurrency)}") +                  Invariant($"{Math.Round(TotalValueInAccountCurrency' 2).ToStringInvariant()}")              );
Magic Number,QuantConnect.Securities,EquityPriceVariationModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\EquityPriceVariationModel.cs,GetMinimumPriceVariation,The following statement contains a magic number: return 0.0001m;
Magic Number,QuantConnect.Securities,StandardDeviationOfReturnsVolatilityModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Volatility\StandardDeviationOfReturnsVolatilityModel.cs,StandardDeviationOfReturnsVolatilityModel,The following statement contains a magic number: periods < 2
Magic Number,QuantConnect.Securities,RelativeStandardDeviationVolatilityModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Volatility\RelativeStandardDeviationVolatilityModel.cs,RelativeStandardDeviationVolatilityModel,The following statement contains a magic number: periods < 2
Magic Number,QuantConnect.Securities,SecurityDatabaseKey,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityDatabaseKey.cs,Parse,The following statement contains a magic number: parts.Length != 3
Magic Number,QuantConnect.Securities,SecurityDatabaseKey,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityDatabaseKey.cs,Parse,The following statement contains a magic number: throw new ArgumentException($"Unable to parse \'{parts[2]}\' as a SecurityType.");
Magic Number,QuantConnect.Securities,SecurityDatabaseKey,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityDatabaseKey.cs,Parse,The following statement contains a magic number: return new SecurityDatabaseKey(parts[1]' parts[2]' type);
Magic Number,QuantConnect.Securities,SecurityDatabaseKey,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityDatabaseKey.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ StringComparer.OrdinalIgnoreCase.GetHashCode(Symbol);
Magic Number,QuantConnect.Securities,SecurityDatabaseKey,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityDatabaseKey.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode*397) ^ (int) SecurityType;
Magic Number,QuantConnect.Securities,SecurityExchangeHours,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityExchangeHours.cs,GetNextMarketOpen,The following statement contains a magic number: var oneWeekLater = localDateTime.Date.AddDays(15);
Magic Number,QuantConnect.Securities,SecurityExchangeHours,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityExchangeHours.cs,GetNextMarketClose,The following statement contains a magic number: var oneWeekLater = localDateTime.Date.AddDays(15);
Magic Number,QuantConnect.Securities,DefaultMarginCallModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DefaultMarginCallModel.cs,GetMarginCallOrders,The following statement contains a magic number: marginRemaining <= totalPortfolioValue * 0.05m
Magic Number,QuantConnect.Securities,DefaultMarginCallModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\DefaultMarginCallModel.cs,GenerateMarginCallOrder,The following statement contains a magic number: const decimal marginBuffer = 0.10m;
Magic Number,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The following statement contains a magic number: portfolio.AddTransactionRecord(security.LocalTime.ConvertToUtc(                          security.Exchange.TimeZone)'                          lastTradeProfitInAccountCurrency - 2 * feeInAccountCurrency);
Magic Number,QuantConnect.Securities,SymbolProperties,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolProperties.cs,GetDefault,The following statement contains a magic number: return new SymbolProperties(""' quoteCurrency.LazyToUpper()' 1' 0.01m' 1);
Magic Number,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,FromCsvLine,The following statement contains a magic number: key = new SecurityDatabaseKey(                  market: csv[0]'                  symbol: csv[1]'                  securityType: (SecurityType)Enum.Parse(typeof(SecurityType)' csv[2]' true));
Magic Number,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,FromCsvLine,The following statement contains a magic number: return new SymbolProperties(                  description: csv[3]'                  quoteCurrency: csv[4]'                  contractMultiplier: csv[5].ToDecimal()'                  minimumPriceVariation: csv[6].ToDecimal()'                  lotSize: csv[7].ToDecimal());
Magic Number,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,FromCsvLine,The following statement contains a magic number: return new SymbolProperties(                  description: csv[3]'                  quoteCurrency: csv[4]'                  contractMultiplier: csv[5].ToDecimal()'                  minimumPriceVariation: csv[6].ToDecimal()'                  lotSize: csv[7].ToDecimal());
Magic Number,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,FromCsvLine,The following statement contains a magic number: return new SymbolProperties(                  description: csv[3]'                  quoteCurrency: csv[4]'                  contractMultiplier: csv[5].ToDecimal()'                  minimumPriceVariation: csv[6].ToDecimal()'                  lotSize: csv[7].ToDecimal());
Magic Number,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,FromCsvLine,The following statement contains a magic number: return new SymbolProperties(                  description: csv[3]'                  quoteCurrency: csv[4]'                  contractMultiplier: csv[5].ToDecimal()'                  minimumPriceVariation: csv[6].ToDecimal()'                  lotSize: csv[7].ToDecimal());
Magic Number,QuantConnect.Securities,SymbolPropertiesDatabase,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SymbolPropertiesDatabase.cs,FromCsvLine,The following statement contains a magic number: return new SymbolProperties(                  description: csv[3]'                  quoteCurrency: csv[4]'                  contractMultiplier: csv[5].ToDecimal()'                  minimumPriceVariation: csv[6].ToDecimal()'                  lotSize: csv[7].ToDecimal());
Magic Number,QuantConnect.Securities,SecurityPortfolioManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioManager.cs,SecurityPortfolioManager,The following statement contains a magic number: _baseCurrencyCash.SetAmount(100000);
Magic Number,QuantConnect.Exceptions,DllNotFoundPythonExceptionInterpreter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Exceptions\DllNotFoundPythonExceptionInterpreter.cs,Interpret,The following statement contains a magic number: var length = Math.Min(dnfe.Message.Length - startIndex' 10);
Magic Number,QuantConnect.Exceptions,UnsupportedOperandPythonExceptionInterpreter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Exceptions\UnsupportedOperandPythonExceptionInterpreter.cs,Interpret,The following statement contains a magic number: var types = pe.Message.Split(':')[2].Trim();
Magic Number,QuantConnect.Orders,OrderJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\OrderJsonConverter.cs,CreateTimeInForce,The following statement contains a magic number: switch (value)                  {                      case 0:                          return TimeInForce.GoodTilCanceled;                        case 1:                          return TimeInForce.Day;                        case 2:                          var expiry = jObject["DurationValue"].Value<DateTime>();                          return TimeInForce.GoodTilDate(expiry);                        default:                          throw new Exception($"Unknown time in force value: {value}");                  }
Magic Number,QuantConnect.Orders.TimeInForces,DayTimeInForce,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\TimeInForces\DayTimeInForce.cs,IsOrderExpired,The following statement contains a magic number: switch (order.SecurityType)              {                  case SecurityType.Forex:                  case SecurityType.Cfd:                      // With real brokerages (IB' Oanda' FXCM have been verified) FX orders expire at 5 PM NewYork time.                      // For now we use this fixed cut-off time' in future we might get this value from brokerage models'                      // to support custom brokerage implementations.                        var cutOffTimeZone = TimeZones.NewYork;                      var cutOffTimeSpan = TimeSpan.FromHours(17);                        orderTime = order.Time.ConvertFromUtc(cutOffTimeZone);                      var expiryTime = orderTime.Date.Add(cutOffTimeSpan);                      if (orderTime.TimeOfDay > cutOffTimeSpan)                      {                          // order submitted after 5 PM' expiry on next date                          expiryTime = expiryTime.AddDays(1);                      }                        expired = time.ConvertTo(exchangeHours.TimeZone' cutOffTimeZone) >= expiryTime;                      break;                    case SecurityType.Crypto:                      // expires at midnight UTC                      expired = time.Date > orderTime.Date;                      break;                    case SecurityType.Equity:                  case SecurityType.Option:                  case SecurityType.Future:                  default:                      // expires at market close                      expired = time >= exchangeHours.GetNextMarketClose(orderTime' false);                      break;              }
Magic Number,QuantConnect.Orders.TimeInForces,GoodTilDateTimeInForce,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\TimeInForces\GoodTilDateTimeInForce.cs,GetForexOrderExpiryDateTime,The following statement contains a magic number: var cutOffTimeSpan = TimeSpan.FromHours(17);
Magic Number,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,NthFriday,The following statement contains a magic number: n < 1 || n > 5
Magic Number,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,ThirdWednesday,The following statement contains a magic number: return (from day in Enumerable.Range(1' daysInMonth)                                    where new DateTime(time.Year' time.Month' day).DayOfWeek == DayOfWeek.Wednesday                                    select new DateTime(time.Year' time.Month' day)).ElementAt(2);
Magic Number,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,NotPrecededByHoliday,The following statement contains a magic number: i <= 3
Magic Number,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,NotPrecededByHoliday,The following statement contains a magic number: !NotHoliday(thursday.AddDays(-6))
Magic Number,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,DairyLastTradeDate,The following statement contains a magic number: var lastTradeTs = lastTradeTime ?? new TimeSpan(17' 10' 0);
Magic Number,QuantConnect.Securities.Future,FuturesExpiryUtilityFunctions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FuturesExpiryUtilityFunctions.cs,DairyLastTradeDate,The following statement contains a magic number: var lastTradeTs = lastTradeTime ?? new TimeSpan(17' 10' 0);
Magic Number,QuantConnect.Securities.Future,Future,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Future.cs,Future,The following statement contains a magic number: SetFilter(TimeSpan.Zero' TimeSpan.FromDays(35));
Magic Number,QuantConnect.Securities.Future,Future,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\Future.cs,Future,The following statement contains a magic number: SetFilter(TimeSpan.Zero' TimeSpan.FromDays(35));
Magic Number,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,FromCsvLine,The following statement contains a magic number: Log.Trace($"Couldn't parse Maintenance margin requirements while reading future margin requirement file. Date {line[2]}. Line: {csvLine}");
Magic Number,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,FromCsvLine,The following statement contains a magic number: !decimal.TryParse(line[2]' out maintenance)
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,IsStandardContract,The following statement contains a magic number: var firstFriday = firstDayOfMonth == DayOfWeek.Saturday ? 7 : 6 - (int)firstDayOfMonth;
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,IsStandardContract,The following statement contains a magic number: var firstFriday = firstDayOfMonth == DayOfWeek.Saturday ? 7 : 6 - (int)firstDayOfMonth;
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,IsStandardContract,The following statement contains a magic number: return firstFriday + 7 + 5 /*sat -> wed */ < date.Day && date.Day < firstFriday + 2 * 7 + 2 /* sat' sun*/;
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,IsStandardContract,The following statement contains a magic number: return firstFriday + 7 + 5 /*sat -> wed */ < date.Day && date.Day < firstFriday + 2 * 7 + 2 /* sat' sun*/;
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,IsStandardContract,The following statement contains a magic number: return firstFriday + 7 + 5 /*sat -> wed */ < date.Day && date.Day < firstFriday + 2 * 7 + 2 /* sat' sun*/;
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,IsStandardContract,The following statement contains a magic number: return firstFriday + 7 + 5 /*sat -> wed */ < date.Day && date.Day < firstFriday + 2 * 7 + 2 /* sat' sun*/;
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,IsStandardContract,The following statement contains a magic number: return firstFriday + 7 + 5 /*sat -> wed */ < date.Day && date.Day < firstFriday + 2 * 7 + 2 /* sat' sun*/;
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,GetLastDayOfTrading,The following statement contains a magic number: IsStandardContract(symbol) &&                  symbolDateTime.DayOfWeek == DayOfWeek.Saturday &&                  symbolDateTime < new DateTime(2015' 2' 1)
Magic Number,QuantConnect.Securities.Option,OptionSymbol,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionSymbol.cs,GetLastDayOfTrading,The following statement contains a magic number: IsStandardContract(symbol) &&                  symbolDateTime.DayOfWeek == DayOfWeek.Saturday &&                  symbolDateTime < new DateTime(2015' 2' 1)
Magic Number,QuantConnect.Securities.Option,Option,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\Option.cs,Option,The following statement contains a magic number: SetFilter(-1' 1' TimeSpan.Zero' TimeSpan.FromDays(35));
Magic Number,QuantConnect.Securities.Option,Option,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\Option.cs,Option,The following statement contains a magic number: SetFilter(-1' 1' TimeSpan.Zero' TimeSpan.FromDays(35));
Magic Number,QuantConnect.Securities.Option,Option,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\Option.cs,IsAutoExercised,The following statement contains a magic number: return GetIntrinsicValue(underlyingPrice) >= 0.01m;
Magic Number,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,CallButterfly,The following statement contains a magic number: return new OptionStrategy              {                  Name = "Call Butterfly"'                  Underlying = canonicalOption.Underlying'                  OptionLegs = new List<OptionStrategy.OptionLegData>                                          {                                              new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg1Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }'                                              new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg2Strike' Quantity = -2' OrderType = Orders.OrderType.Market' Expiration = expiration }'                                              new OptionStrategy.OptionLegData { Right = OptionRight.Call' Strike = leg3Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }                                          }              };
Magic Number,QuantConnect.Securities.Option,OptionStrategies,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionStrategies.cs,PutButterfly,The following statement contains a magic number: return new OptionStrategy              {                  Name = "Put Butterfly"'                  Underlying = canonicalOption.Underlying'                  OptionLegs = new List<OptionStrategy.OptionLegData>                                          {                                              new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg1Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }'                                              new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg2Strike' Quantity = -2' OrderType = Orders.OrderType.Market' Expiration = expiration }'                                              new OptionStrategy.OptionLegData { Right = OptionRight.Put' Strike = leg3Strike' Quantity = 1' OrderType = Orders.OrderType.Market' Expiration = expiration }                                          }              };
Magic Number,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The following statement contains a magic number: Func<Tuple<decimal' decimal>> evalDeltaGamma = () =>                  {                      try                      {                          return Tuple.Create((decimal)option.delta()' (decimal)option.gamma());                      }                      catch (Exception)                      {                          if (EnableGreekApproximation)                          {                              var step = 0.01;                              var initial = underlyingQuoteValue.value();                              underlyingQuoteValue.setValue(initial - step);                              var npvMinus = EvaluateOption(option);                              underlyingQuoteValue.setValue(initial + step);                              var npvPlus = EvaluateOption(option);                              underlyingQuoteValue.setValue(initial);                                return Tuple.Create((decimal)((npvPlus - npvMinus) / (2 * step))'                                                  (decimal)((npvPlus - 2 * npv + npvMinus) / (step * step)));                          }                          else                              return Tuple.Create(0.0m' 0.0m);                      }                  };
Magic Number,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The following statement contains a magic number: Func<Tuple<decimal' decimal>> evalDeltaGamma = () =>                  {                      try                      {                          return Tuple.Create((decimal)option.delta()' (decimal)option.gamma());                      }                      catch (Exception)                      {                          if (EnableGreekApproximation)                          {                              var step = 0.01;                              var initial = underlyingQuoteValue.value();                              underlyingQuoteValue.setValue(initial - step);                              var npvMinus = EvaluateOption(option);                              underlyingQuoteValue.setValue(initial + step);                              var npvPlus = EvaluateOption(option);                              underlyingQuoteValue.setValue(initial);                                return Tuple.Create((decimal)((npvPlus - npvMinus) / (2 * step))'                                                  (decimal)((npvPlus - 2 * npv + npvMinus) / (step * step)));                          }                          else                              return Tuple.Create(0.0m' 0.0m);                      }                  };
Magic Number,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The following statement contains a magic number: Func<Tuple<decimal' decimal>> evalDeltaGamma = () =>                  {                      try                      {                          return Tuple.Create((decimal)option.delta()' (decimal)option.gamma());                      }                      catch (Exception)                      {                          if (EnableGreekApproximation)                          {                              var step = 0.01;                              var initial = underlyingQuoteValue.value();                              underlyingQuoteValue.setValue(initial - step);                              var npvMinus = EvaluateOption(option);                              underlyingQuoteValue.setValue(initial + step);                              var npvPlus = EvaluateOption(option);                              underlyingQuoteValue.setValue(initial);                                return Tuple.Create((decimal)((npvPlus - npvMinus) / (2 * step))'                                                  (decimal)((npvPlus - 2 * npv + npvMinus) / (step * step)));                          }                          else                              return Tuple.Create(0.0m' 0.0m);                      }                  };
Magic Number,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The following statement contains a magic number: Func<double> reevalVega = () =>                  {                      var step = 0.001;                      var initial = underlyingVolValue.value();                      underlyingVolValue.setValue(initial + step);                      var npvPlus = EvaluateOption(option);                      underlyingVolValue.setValue(initial);                        return (npvPlus - npv) / step;                  };
Magic Number,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The following statement contains a magic number: Func<double> reevalTheta = () =>                  {                      var step = 1.0 / 365.0;                        Settings.setEvaluationDate(settlementDate.AddDays(-1));                      var npvMinus = EvaluateOption(option);                      Settings.setEvaluationDate(settlementDate);                        return (npv - npvMinus) / step;                  };
Magic Number,QuantConnect.Securities.Option,QLOptionPriceModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\QLOptionPriceModel.cs,Evaluate,The following statement contains a magic number: Func<double> reevalRho = () =>                  {                      var step = 0.001;                      var initial = riskFreeRateValue.value();                      riskFreeRateValue.setValue(initial + step);                      var npvPlus = EvaluateOption(option);                      riskFreeRateValue.setValue(initial);                        return (npvPlus - npv) / step;                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The following statement contains a magic number: var csv = line.ToCsv(5);
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The following statement contains a magic number: var bid = new Bar              {                  Open = csv[1].ToDecimal()'                  High = csv[2].ToDecimal()'                  Low = csv[3].ToDecimal()'                  Close = csv[4].ToDecimal()              };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The following statement contains a magic number: var bid = new Bar              {                  Open = csv[1].ToDecimal()'                  High = csv[2].ToDecimal()'                  Low = csv[3].ToDecimal()'                  Close = csv[4].ToDecimal()              };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The following statement contains a magic number: var bid = new Bar              {                  Open = csv[1].ToDecimal()'                  High = csv[2].ToDecimal()'                  Low = csv[3].ToDecimal()'                  Close = csv[4].ToDecimal()              };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The following statement contains a magic number: var ask = new Bar              {                  Open = csv[1].ToDecimal()'                  High = csv[2].ToDecimal()'                  Low = csv[3].ToDecimal()'                  Close = csv[4].ToDecimal()              };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The following statement contains a magic number: var ask = new Bar              {                  Open = csv[1].ToDecimal()'                  High = csv[2].ToDecimal()'                  Low = csv[3].ToDecimal()'                  Close = csv[4].ToDecimal()              };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseTradeAsQuoteBar,The following statement contains a magic number: var ask = new Bar              {                  Open = csv[1].ToDecimal()'                  High = csv[2].ToDecimal()'                  Low = csv[3].ToDecimal()'                  Close = csv[4].ToDecimal()              };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: var csv = line.ToCsv(10);
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.Bid = new Bar                  {                      Open = csv[1].ToDecimal() * scaleFactor'                      High = csv[2].ToDecimal() * scaleFactor'                      Low = csv[3].ToDecimal() * scaleFactor'                      Close = csv[4].ToDecimal() * scaleFactor                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.Bid = new Bar                  {                      Open = csv[1].ToDecimal() * scaleFactor'                      High = csv[2].ToDecimal() * scaleFactor'                      Low = csv[3].ToDecimal() * scaleFactor'                      Close = csv[4].ToDecimal() * scaleFactor                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.Bid = new Bar                  {                      Open = csv[1].ToDecimal() * scaleFactor'                      High = csv[2].ToDecimal() * scaleFactor'                      Low = csv[3].ToDecimal() * scaleFactor'                      Close = csv[4].ToDecimal() * scaleFactor                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.LastBidSize = csv[5].ToDecimal();
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: csv[1].Length != 0 || csv[2].Length != 0 || csv[3].Length != 0 || csv[4].Length != 0
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: csv[1].Length != 0 || csv[2].Length != 0 || csv[3].Length != 0 || csv[4].Length != 0
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: csv[1].Length != 0 || csv[2].Length != 0 || csv[3].Length != 0 || csv[4].Length != 0
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.Ask = new Bar                  {                      Open = csv[6].ToDecimal() * scaleFactor'                      High = csv[7].ToDecimal() * scaleFactor'                      Low = csv[8].ToDecimal() * scaleFactor'                      Close = csv[9].ToDecimal() * scaleFactor                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.Ask = new Bar                  {                      Open = csv[6].ToDecimal() * scaleFactor'                      High = csv[7].ToDecimal() * scaleFactor'                      Low = csv[8].ToDecimal() * scaleFactor'                      Close = csv[9].ToDecimal() * scaleFactor                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.Ask = new Bar                  {                      Open = csv[6].ToDecimal() * scaleFactor'                      High = csv[7].ToDecimal() * scaleFactor'                      Low = csv[8].ToDecimal() * scaleFactor'                      Close = csv[9].ToDecimal() * scaleFactor                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.Ask = new Bar                  {                      Open = csv[6].ToDecimal() * scaleFactor'                      High = csv[7].ToDecimal() * scaleFactor'                      Low = csv[8].ToDecimal() * scaleFactor'                      Close = csv[9].ToDecimal() * scaleFactor                  };
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: quoteBar.LastAskSize = csv[10].ToDecimal();
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: csv[6].Length != 0 || csv[7].Length != 0 || csv[8].Length != 0 || csv[9].Length != 0
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: csv[6].Length != 0 || csv[7].Length != 0 || csv[8].Length != 0 || csv[9].Length != 0
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: csv[6].Length != 0 || csv[7].Length != 0 || csv[8].Length != 0 || csv[9].Length != 0
Magic Number,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,ParseQuote,The following statement contains a magic number: csv[6].Length != 0 || csv[7].Length != 0 || csv[8].Length != 0 || csv[9].Length != 0
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: Value = (bid + ask) / 2;
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: Value = (BidPrice + AskPrice) / 2;
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: AskPrice = Convert.ToDecimal(csv[2]' CultureInfo.InvariantCulture);
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: Quantity = csv[2].ToDecimal();
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: Exchange = csv[3].Trim();
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: SaleCondition = csv[4];
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: Suspicious = csv[5].ToInt32() == 1;
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following statement contains a magic number: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Magic Number,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,GetScaleFactor,The following statement contains a magic number: return securityType == SecurityType.Equity || securityType == SecurityType.Option ? 10000m : 1;
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseEquity,The following statement contains a magic number: var csv = line.ToCsv(6);
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseEquity,The following statement contains a magic number: tradeBar.High = csv[2].ToDecimal() * _scaleFactor;
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseEquity,The following statement contains a magic number: tradeBar.Low = csv[3].ToDecimal() * _scaleFactor;
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseEquity,The following statement contains a magic number: tradeBar.Close = csv[4].ToDecimal() * _scaleFactor;
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseEquity,The following statement contains a magic number: tradeBar.Volume = csv[5].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseForex,The following statement contains a magic number: var csv = line.ToCsv(5);
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseForex,The following statement contains a magic number: tradeBar.High = csv[2].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseForex,The following statement contains a magic number: tradeBar.Low = csv[3].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseForex,The following statement contains a magic number: tradeBar.Close = csv[4].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseCrypto,The following statement contains a magic number: var csv = line.ToCsv(6);
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseCrypto,The following statement contains a magic number: tradeBar.High = csv[2].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseCrypto,The following statement contains a magic number: tradeBar.Low = csv[3].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseCrypto,The following statement contains a magic number: tradeBar.Close = csv[4].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseCrypto,The following statement contains a magic number: tradeBar.Volume = csv[5].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseOption,The following statement contains a magic number: var csv = line.ToCsv(6);
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseOption,The following statement contains a magic number: tradeBar.High = csv[2].ToDecimal() * _scaleFactor;
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseOption,The following statement contains a magic number: tradeBar.Low = csv[3].ToDecimal() * _scaleFactor;
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseOption,The following statement contains a magic number: tradeBar.Close = csv[4].ToDecimal() * _scaleFactor;
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseOption,The following statement contains a magic number: tradeBar.Volume = csv[5].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseFuture,The following statement contains a magic number: var csv = line.ToCsv(6);
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseFuture,The following statement contains a magic number: tradeBar.High = csv[2].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseFuture,The following statement contains a magic number: tradeBar.Low = csv[3].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseFuture,The following statement contains a magic number: tradeBar.Close = csv[4].ToDecimal();
Magic Number,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,ParseFuture,The following statement contains a magic number: tradeBar.Volume = csv[5].ToDecimal();
Magic Number,QuantConnect.Securities.Forex,Forex,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Forex\Forex.cs,DecomposeCurrencyPair,The following statement contains a magic number: currencyPair == null || currencyPair.Length != 6
Magic Number,QuantConnect.Securities.Forex,Forex,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Forex\Forex.cs,DecomposeCurrencyPair,The following statement contains a magic number: baseCurrency = currencyPair.Substring(0' 3);
Magic Number,QuantConnect.Securities.Forex,Forex,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Forex\Forex.cs,DecomposeCurrencyPair,The following statement contains a magic number: quoteCurrency = currencyPair.Substring(3);
Magic Number,QuantConnect.Securities.Forex,ForexHolding,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Forex\ForexHolding.cs,TotalCloseProfitPips,The following statement contains a magic number: var pipDecimal = Security.SymbolProperties.MinimumPriceVariation * 10;
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,UpdateScores,The following statement contains a magic number: var annualFactor = (decimal)(_algorithm.UtcTime - _startUtcTime).TotalDays / 365m;
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,UpdateScores,The following statement contains a magic number: FitnessScore = ScaleToRange(rawFitnessScore' maximumValue: 20' minimumValue: 0);
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,GetScaledSortinoRatio,The following statement contains a magic number: _profitLossDownsideDeviation = _profitLossDownsideDeviation * Math.Sqrt(252);
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,SigmoidalScale,The following statement contains a magic number: return 10;
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,SigmoidalScale,The following statement contains a magic number: return 5 * valueToScale / (decimal)Math.Sqrt(10 + Math.Pow((double)valueToScale' 2)) + 5;
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,SigmoidalScale,The following statement contains a magic number: return 5 * valueToScale / (decimal)Math.Sqrt(10 + Math.Pow((double)valueToScale' 2)) + 5;
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,SigmoidalScale,The following statement contains a magic number: return 5 * valueToScale / (decimal)Math.Sqrt(10 + Math.Pow((double)valueToScale' 2)) + 5;
Magic Number,QuantConnect.Statistics,FitnessScoreManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\FitnessScoreManager.cs,SigmoidalScale,The following statement contains a magic number: return 5 * valueToScale / (decimal)Math.Sqrt(10 + Math.Pow((double)valueToScale' 2)) + 5;
Magic Number,QuantConnect.Statistics,KellyCriterionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\KellyCriterionManager.cs,UpdateScores,The following statement contains a magic number: var averagePowered = Math.Pow(_average' 2);
Magic Number,QuantConnect.Statistics,KellyCriterionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\KellyCriterionManager.cs,UpdateScores,The following statement contains a magic number: var variancePowered = Math.Pow(variance' 2);
Magic Number,QuantConnect.Statistics,KellyCriterionManager,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\KellyCriterionManager.cs,UpdateScores,The following statement contains a magic number: var kellyCriterionStandardDeviation = Math.Sqrt(                          (1 / variance + 2 * averagePowered / variancePowered)                          / _insightValues.Count - 1);
Magic Number,QuantConnect.Statistics,PortfolioStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\PortfolioStatistics.cs,PortfolioStatistics,The following statement contains a magic number: startingCapital == 0                  // minimum amount of samples to calculate variance                  || listBenchmark.Count < 2                  || listPerformance.Count < 2
Magic Number,QuantConnect.Statistics,PortfolioStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\PortfolioStatistics.cs,PortfolioStatistics,The following statement contains a magic number: startingCapital == 0                  // minimum amount of samples to calculate variance                  || listBenchmark.Count < 2                  || listPerformance.Count < 2
Magic Number,QuantConnect.Statistics,PortfolioStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\PortfolioStatistics.cs,PortfolioStatistics,The following statement contains a magic number: var fractionOfYears = (decimal) (equity.Keys.LastOrDefault() - equity.Keys.FirstOrDefault()).TotalDays / 365;
Magic Number,QuantConnect.Statistics,PortfolioStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\PortfolioStatistics.cs,PortfolioStatistics,The following statement contains a magic number: Drawdown = DrawdownPercent(equity' 3);
Magic Number,QuantConnect.Statistics,PortfolioStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\PortfolioStatistics.cs,PortfolioStatistics,The following statement contains a magic number: TrackingError = correlation.IsNaNOrZero() || benchmarkAnnualVariance.IsNaNOrZero() ? 0 :                  (decimal)Math.Sqrt((double)AnnualVariance - 2 * correlation * (double)AnnualStandardDeviation * Math.Sqrt(benchmarkAnnualVariance) + benchmarkAnnualVariance);
Magic Number,QuantConnect.Statistics,PortfolioStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\PortfolioStatistics.cs,PortfolioStatistics,The following statement contains a magic number: var benchmarkSharpeRatio = 1.0d / Math.Sqrt(252);
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetAlgorithmPerformance,The following statement contains a magic number: performance.Values.ToList().ForEach(i => listPerformance.Add((double)(i / 100)));
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetRollingPerformances,The following statement contains a magic number: var monthPeriods = new[] { 1' 3' 6' 12 };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetRollingPerformances,The following statement contains a magic number: var monthPeriods = new[] { 1' 3' 6' 12 };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetRollingPerformances,The following statement contains a magic number: var monthPeriods = new[] { 1' 3' 6' 12 };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,GetSummary,The following statement contains a magic number: return new Dictionary<string' string>              {                  { "Total Trades"' totalTransactions.ToStringInvariant() }'                  { "Average Win"' Math.Round(totalPerformance.PortfolioStatistics.AverageWinRate.SafeMultiply100()' 2).ToStringInvariant() + "%"  }'                  { "Average Loss"' Math.Round(totalPerformance.PortfolioStatistics.AverageLossRate.SafeMultiply100()' 2).ToStringInvariant() + "%" }'                  { "Compounding Annual Return"' Math.Round(totalPerformance.PortfolioStatistics.CompoundingAnnualReturn.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Drawdown"' Math.Round(totalPerformance.PortfolioStatistics.Drawdown.SafeMultiply100()' 3).ToStringInvariant() + "%" }'                  { "Expectancy"' Math.Round(totalPerformance.PortfolioStatistics.Expectancy' 3).ToStringInvariant() }'                  { "Net Profit"' Math.Round(totalPerformance.PortfolioStatistics.TotalNetProfit.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Sharpe Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.SharpeRatio' 3).ToStringInvariant() }'                  { "Probabilistic Sharpe Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio.SafeMultiply100()' 3).ToStringInvariant() + "%"}'                  { "Loss Rate"' Math.Round(totalPerformance.PortfolioStatistics.LossRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Win Rate"' Math.Round(totalPerformance.PortfolioStatistics.WinRate.SafeMultiply100()).ToStringInvariant() + "%" }'                  { "Profit-Loss Ratio"' Math.Round(totalPerformance.PortfolioStatistics.ProfitLossRatio' 2).ToStringInvariant() }'                  { "Alpha"' Math.Round((double)totalPerformance.PortfolioStatistics.Alpha' 3).ToStringInvariant() }'                  { "Beta"' Math.Round((double)totalPerformance.PortfolioStatistics.Beta' 3).ToStringInvariant() }'                  { "Annual Standard Deviation"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualStandardDeviation' 3).ToStringInvariant() }'                  { "Annual Variance"' Math.Round((double)totalPerformance.PortfolioStatistics.AnnualVariance' 3).ToStringInvariant() }'                  { "Information Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.InformationRatio' 3).ToStringInvariant() }'                  { "Tracking Error"' Math.Round((double)totalPerformance.PortfolioStatistics.TrackingError' 3).ToStringInvariant() }'                  { "Treynor Ratio"' Math.Round((double)totalPerformance.PortfolioStatistics.TreynorRatio' 3).ToStringInvariant() }'                  { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }              };
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,SafeMultiply100,The following statement contains a magic number: const decimal max = decimal.MaxValue/100m;
Magic Number,QuantConnect.Statistics,StatisticsBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\StatisticsBuilder.cs,SafeMultiply100,The following statement contains a magic number: return value*100m;
Magic Number,QuantConnect.Statistics,TradeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeStatistics.cs,TradeStatistics,The following statement contains a magic number: WinLossRatio = TotalNumberOfTrades == 0 ? 0 : (NumberOfLosingTrades > 0 ? (decimal)NumberOfWinningTrades / NumberOfLosingTrades : 10);
Magic Number,QuantConnect.Statistics,TradeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeStatistics.cs,TradeStatistics,The following statement contains a magic number: ProfitFactor = TotalProfit == 0 ? 0 : (TotalLoss < 0 ? TotalProfit / Math.Abs(TotalLoss) : 10);
Magic Number,QuantConnect.Statistics,TradeStatistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeStatistics.cs,TradeStatistics,The following statement contains a magic number: ProfitToMaxDrawdownRatio = TotalProfitLoss == 0 ? 0 : (MaximumClosedTradeDrawdown < 0 ? TotalProfitLoss / Math.Abs(MaximumClosedTradeDrawdown) : 10);
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: performance.Values.ToList().ForEach(i => listPerformance.Add((double)(i / 100)));
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: fractionOfYears = (equity.Keys.LastOrDefault() - equity.Keys.FirstOrDefault()).TotalDays / 365;
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,Generate,The following statement contains a magic number: statistics = new Dictionary<string' string> {                      { "Total Trades"' Math.Round(totalTrades' 0).ToStringInvariant() }'                      { "Average Win"' Math.Round(averageWin * 100' 2).ToStringInvariant() + "%"  }'                      { "Average Loss"' Math.Round(averageLoss * 100' 2).ToStringInvariant() + "%" }'                      { "Compounding Annual Return"' Math.Round(algoCompoundingPerformance * 100' 3).ToStringInvariant() + "%" }'                      { "Drawdown"' (DrawdownPercent(equity' 3) * 100).ToStringInvariant() + "%" }'                      { "Expectancy"' Math.Round((winRate * averageWinRatio) - (lossRate)' 3).ToStringInvariant() }'                      { "Net Profit"' Math.Round(totalNetProfit * 100' 3).ToStringInvariant() + "%"}'                      { "Sharpe Ratio"' Math.Round(SharpeRatio(listPerformance' riskFreeRate)' 3).ToStringInvariant() }'                      { "Loss Rate"' Math.Round(lossRate * 100).ToStringInvariant() + "%" }'                      { "Win Rate"' Math.Round(winRate * 100).ToStringInvariant() + "%" }'                      { "Profit-Loss Ratio"' profitLossRatioHuman }'                      { "Alpha"' Math.Round(Alpha(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Beta"' Math.Round(Beta(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Annual Standard Deviation"' Math.Round(AnnualStandardDeviation(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Annual Variance"' Math.Round(AnnualVariance(listPerformance' tradingDaysPerYear)' 3).ToStringInvariant() }'                      { "Information Ratio"' Math.Round(InformationRatio(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Tracking Error"' Math.Round(TrackingError(listPerformance' listBenchmark)' 3).ToStringInvariant() }'                      { "Treynor Ratio"' Math.Round(TreynorRatio(listPerformance' listBenchmark' riskFreeRate)' 3).ToStringInvariant() }'                      { "Total Fees"' "$" + totalFees.ToStringInvariant("0.00") }                  };
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,ProfitLossRatio,The following statement contains a magic number: return Math.Round(averageWin / Math.Abs(averageLoss)' 2);
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,TrackingError,The following statement contains a magic number: return Math.Sqrt(AnnualVariance(algoPerformance) - 2 * Correlation.Pearson(algoPerformance' benchmarkPerformance) * AnnualStandardDeviation(algoPerformance) * AnnualStandardDeviation(benchmarkPerformance) + AnnualVariance(benchmarkPerformance));
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,ProbabilisticSharpeRatio,The following statement contains a magic number: var operandB = ((kurtosis - 1) / 4) * (Math.Pow(observedSharpeRatio' 2));
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,ProbabilisticSharpeRatio,The following statement contains a magic number: var operandB = ((kurtosis - 1) / 4) * (Math.Pow(observedSharpeRatio' 2));
Magic Number,QuantConnect.Statistics,Statistics,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\Statistics.cs,ProbabilisticSharpeRatio,The following statement contains a magic number: var estimateStandardDeviation = Math.Pow((1 - operandA + operandB) / (listPerformance.Count - 1)' 0.5);
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,ReadSymbolFromZipEntry,The following statement contains a magic number: switch (symbol.ID.SecurityType)              {                  case SecurityType.Option:                      if (isHourlyOrDaily)                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[2]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[3]' true);                          var strike = Parse.Decimal(parts[4]) / 10000m;                          var expiry = Parse.DateTimeExact(parts[5]' DateFormat.EightCharacter);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                      else                      {                          var style = (OptionStyle)Enum.Parse(typeof(OptionStyle)' parts[4]' true);                          var right = (OptionRight)Enum.Parse(typeof(OptionRight)' parts[5]' true);                          var strike = Parse.Decimal(parts[6]) / 10000m;                          var expiry = DateTime.ParseExact(parts[7]' DateFormat.EightCharacter' CultureInfo.InvariantCulture);                          return Symbol.CreateOption(symbol.Underlying' symbol.ID.Market' style' right' strike' expiry);                      }                    case SecurityType.Future:                      if (isHourlyOrDaily)                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[2]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[0]' symbol.ID.Market' futureExpiry);                      }                      else                      {                          var expiryYearMonth = Parse.DateTimeExact(parts[4]' DateFormat.YearMonth);                          var futureExpiryFunc = FuturesExpiryFunctions.FuturesExpiryFunction(parts[1]);                          var futureExpiry = futureExpiryFunc(expiryYearMonth);                          return Symbol.CreateFuture(parts[1]' symbol.ID.Market' futureExpiry);                      }                    default:                      throw new NotImplementedException(Invariant(                          $"ReadSymbolFromZipEntry is not implemented for {symbol.ID.SecurityType} {symbol.ID.Market} {resolution}"                      ));              }
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,Scale,The following statement contains a magic number: return (long)(value*10000);
Magic Number,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,TryParsePath,The following statement contains a magic number: !Enum.TryParse(info[startIndex + 2]' true' out resolution)
Magic Number,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The following statement contains a magic number: const int LowResSecurityTypeOffset = 4;
Magic Number,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The following statement contains a magic number: const int HighResSecurityTypeOffset = 5;
Magic Number,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The following statement contains a magic number: const int ResolutionOffset = 2;
Magic Number,QuantConnect.Util,LeanDataPathComponents,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanDataPathComponents.cs,Parse,The following statement contains a magic number: const int TickerOffset = 3;
Magic Number,QuantConnect.Util,ListComparer<T>,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ListComparer.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ dateTime.GetHashCode();
Magic Number,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,Convert,The following statement contains a magic number: value.Length != 7
Magic Number,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,Convert,The following statement contains a magic number: var red = HexToInt(value.Substring(1' 2));
Magic Number,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,Convert,The following statement contains a magic number: var green = HexToInt(value.Substring(3' 2));
Magic Number,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,Convert,The following statement contains a magic number: var green = HexToInt(value.Substring(3' 2));
Magic Number,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,Convert,The following statement contains a magic number: var blue = HexToInt(value.Substring(5' 2));
Magic Number,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,Convert,The following statement contains a magic number: var blue = HexToInt(value.Substring(5' 2));
Magic Number,QuantConnect.Util,ColorJsonConverter,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\ColorJsonConverter.cs,HexToInt,The following statement contains a magic number: hexValue.Length != 2
Magic Number,QuantConnect.Util,PythonUtil,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\PythonUtil.cs,ToAction,The following statement contains a magic number: !TryGetArgLength(pyObject' out count) || count != 2
Magic Number,QuantConnect.Util,PythonUtil,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\PythonUtil.cs,PythonExceptionStackParser,The following statement contains a magic number: var lines = value.Substring(1' value.Length - 1)                  .Split(new[] { "\'  File " }' StringSplitOptions.RemoveEmptyEntries)                  .Where(x => x.Contains(directory))                  .Where(x => x.Split(''').Length > 2)                  .Select(x =>                  {                      var info = x.Replace(directory' string.Empty).Split(''');                      var line = info[0].GetStringBetweenChars('\"'' '\"');                      line = $" in {line}:{info[1].Trim()}";                        info = info[2].Split(new[] { "\\n" }' StringSplitOptions.RemoveEmptyEntries);                      line = $" {info[0].Replace(" in "' " at ")}{line}";                        // If we have the exact statement' add it to the error line                      if (info.Length > 2) line += $" :: {info[1].Trim()}";                        return line;                  });
Magic Number,QuantConnect.Util,PythonUtil,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\PythonUtil.cs,PythonExceptionStackParser,The following statement contains a magic number: var lines = value.Substring(1' value.Length - 1)                  .Split(new[] { "\'  File " }' StringSplitOptions.RemoveEmptyEntries)                  .Where(x => x.Contains(directory))                  .Where(x => x.Split(''').Length > 2)                  .Select(x =>                  {                      var info = x.Replace(directory' string.Empty).Split(''');                      var line = info[0].GetStringBetweenChars('\"'' '\"');                      line = $" in {line}:{info[1].Trim()}";                        info = info[2].Split(new[] { "\\n" }' StringSplitOptions.RemoveEmptyEntries);                      line = $" {info[0].Replace(" in "' " at ")}{line}";                        // If we have the exact statement' add it to the error line                      if (info.Length > 2) line += $" :: {info[1].Trim()}";                        return line;                  });
Magic Number,QuantConnect.Util,PythonUtil,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\PythonUtil.cs,PythonExceptionStackParser,The following statement contains a magic number: var lines = value.Substring(1' value.Length - 1)                  .Split(new[] { "\'  File " }' StringSplitOptions.RemoveEmptyEntries)                  .Where(x => x.Contains(directory))                  .Where(x => x.Split(''').Length > 2)                  .Select(x =>                  {                      var info = x.Replace(directory' string.Empty).Split(''');                      var line = info[0].GetStringBetweenChars('\"'' '\"');                      line = $" in {line}:{info[1].Trim()}";                        info = info[2].Split(new[] { "\\n" }' StringSplitOptions.RemoveEmptyEntries);                      line = $" {info[0].Replace(" in "' " at ")}{line}";                        // If we have the exact statement' add it to the error line                      if (info.Length > 2) line += $" :: {info[1].Trim()}";                        return line;                  });
Magic Number,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetDecimal,The following statement contains a magic number: var mid = (int)(value >> 32);
Magic Number,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetDateTime,The following statement contains a magic number: var builder = new StringBuilder(12);
Magic Number,QuantConnect.Util,StreamReaderExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\StreamReaderExtensions.cs,GetInt32,The following statement contains a magic number: result = (current - '0') + result * 10;
Magic Number,QuantConnect.Util,LinqExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LinqExtensions.cs,Median,The following statement contains a magic number: return collection.OrderBy(x => x).Skip(collection.Count/2).First();
Magic Number,QuantConnect.Util,LinqExtensions,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LinqExtensions.cs,BinarySearch,The following statement contains a magic number: var middle = lower + (upper - lower) / 2;
Magic Number,QuantConnect.Util,Validate,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\Validate.cs,NormalizeEmailAddressDomainName,The following statement contains a magic number: emailAddress = RegularExpression.EmailDomainName.Replace(emailAddress' match =>                  {                      // Use IdnMapping class to convert Unicode domain names.                      var idn = new IdnMapping();                        // Pull out and process domain name (throws ArgumentException on invalid)                      var domainName = idn.GetAscii(match.Groups[2].Value);                        return match.Groups[1].Value + domainName;                  });
Magic Number,QuantConnect.Util,WorkerThread,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\WorkerThread.cs,Dispose,The following statement contains a magic number: _workerThread.Join(50);
Missing Default,QuantConnect,TradingCalendar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\TradingCalendar.cs,GetDaysByType,The following switch statement is missing a default case: switch (type)                      {                          case TradingDayType.BusinessDay:                              return day.BusinessDay;                          case TradingDayType.PublicHoliday:                              return day.PublicHoliday;                          case TradingDayType.Weekend:                              return day.Weekend;                          case TradingDayType.OptionExpiration:                              return day.OptionExpirations.Any();                          case TradingDayType.FutureExpiration:                              return day.FutureExpirations.Any();                          case TradingDayType.FutureRoll:                              return day.FutureRolls.Any();                          case TradingDayType.SymbolDelisting:                              return day.SymbolDelistings.Any();                          case TradingDayType.EquityDividends:                              return day.EquityDividends.Any();                      }
Missing Default,QuantConnect.Brokerages,DefaultBrokerageMessageHandler,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\DefaultBrokerageMessageHandler.cs,Handle,The following switch statement is missing a default case: switch (message.Type)              {                  case BrokerageMessageType.Information:                      _algorithm.Debug($"Brokerage Info: {message.Message}");                      break;                    case BrokerageMessageType.Warning:                      _algorithm.Error($"Brokerage Warning: {message.Message}");                      break;                    case BrokerageMessageType.Error:                      _algorithm.Error($"Brokerage Error: {message.Message}");                      _algorithm.RunTimeError = new Exception(message.Message);                      break;                    case BrokerageMessageType.Disconnect:                      _connected = false;                      Log.Trace("DefaultBrokerageMessageHandler.Handle(): Disconnected.");                        // check to see if any non-custom security exchanges are open within the next x minutes                      var open = (from kvp in _algorithm.Securities                                  let security = kvp.Value                                  where security.Type != SecurityType.Base                                  let exchange = security.Exchange                                  let localTime = _algorithm.UtcTime.ConvertFromUtc(exchange.TimeZone)                                  where exchange.IsOpenDuringBar(                                      localTime'                                      localTime + _openThreshold'                                      _algorithm.SubscriptionManager.SubscriptionDataConfigService                                          .GetSubscriptionDataConfigs(security.Symbol)                                          .IsExtendedMarketHours())                                  select security).Any();                        // if any are open then we need to kill the algorithm                      if (open)                      {                          Log.Trace("DefaultBrokerageMessageHandler.Handle(): Disconnect when exchanges are open' " +                              Invariant($"trying to reconnect for {_initialDelay.TotalMinutes} minutes.")                          );                            // wait 15 minutes before killing algorithm                          StartCheckReconnected(_initialDelay' message);                      }                      else                      {                          Log.Trace("DefaultBrokerageMessageHandler.Handle(): Disconnect when exchanges are closed' checking back before exchange open.");                            // if they aren't open' we'll need to check again a little bit before markets open                          DateTime nextMarketOpenUtc;                          if (_algorithm.Securities.Count != 0)                          {                              nextMarketOpenUtc = (from kvp in _algorithm.Securities                                                   let security = kvp.Value                                                   where security.Type != SecurityType.Base                                                   let exchange = security.Exchange                                                   let localTime = _algorithm.UtcTime.ConvertFromUtc(exchange.TimeZone)                                                   let marketOpen = exchange.Hours.GetNextMarketOpen(localTime'                                                       _algorithm.SubscriptionManager.SubscriptionDataConfigService                                                           .GetSubscriptionDataConfigs(security.Symbol)                                                           .IsExtendedMarketHours())                                                   let marketOpenUtc = marketOpen.ConvertToUtc(exchange.TimeZone)                                                   select marketOpenUtc).Min();                          }                          else                          {                              // if we have no securities just make next market open an hour from now                              nextMarketOpenUtc = DateTime.UtcNow.AddHours(1);                          }                            var timeUntilNextMarketOpen = nextMarketOpenUtc - DateTime.UtcNow - _openThreshold;                          Log.Trace(Invariant($"DefaultBrokerageMessageHandler.Handle(): TimeUntilNextMarketOpen: {timeUntilNextMarketOpen}"));                            // wake up 5 minutes before market open and check if we've reconnected                          StartCheckReconnected(timeUntilNextMarketOpen' message);                      }                      break;                    case BrokerageMessageType.Reconnect:                      _connected = true;                      Log.Trace("DefaultBrokerageMessageHandler.Handle(): Reconnected.");                        if (_cancellationTokenSource != null && !_cancellationTokenSource.IsCancellationRequested)                      {                          _cancellationTokenSource.Cancel();                      }                      break;              }
Missing Default,QuantConnect.Brokerages,DefaultBrokerageModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Brokerages\DefaultBrokerageModel.cs,GetSettlementModel,The following switch statement is missing a default case: switch (security.Type)                  {                      case SecurityType.Equity:                          return new DelayedSettlementModel(Equity.DefaultSettlementDays' Equity.DefaultSettlementTime);                        case SecurityType.Option:                          return new DelayedSettlementModel(Option.DefaultSettlementDays' Option.DefaultSettlementTime);                  }
Missing Default,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,MarketFill,The following switch statement is missing a default case: switch (order.Direction)              {                  case OrderDirection.Buy:                      fill.FillPrice += slip;                      break;                  case OrderDirection.Sell:                      fill.FillPrice -= slip;                      break;              }
Missing Default,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,StopMarketFill,The following switch statement is missing a default case: switch (order.Direction)              {                  case OrderDirection.Sell:                      //-> 1.1 Sell Stop: If Price below setpoint' Sell:                      if (prices.Low < order.StopPrice)                      {                          fill.Status = OrderStatus.Filled;                          // Assuming worse case scenario fill - fill at lowest of the stop & asset price.                          fill.FillPrice = Math.Min(order.StopPrice' prices.Current - slip);                          // assume the order completely filled                          fill.FillQuantity = order.Quantity;                      }                      break;                    case OrderDirection.Buy:                      //-> 1.2 Buy Stop: If Price Above Setpoint' Buy:                      if (prices.High > order.StopPrice)                      {                          fill.Status = OrderStatus.Filled;                          // Assuming worse case scenario fill - fill at highest of the stop & asset price.                          fill.FillPrice = Math.Max(order.StopPrice' prices.Current + slip);                          // assume the order completely filled                          fill.FillQuantity = order.Quantity;                      }                      break;              }
Missing Default,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,StopLimitFill,The following switch statement is missing a default case: switch (order.Direction)              {                  case OrderDirection.Buy:                      //-> 1.2 Buy Stop: If Price Above Setpoint' Buy:                      if (prices.High > order.StopPrice || order.StopTriggered)                      {                          order.StopTriggered = true;                            // Fill the limit order' using closing price of bar:                          // Note > Can't use minimum price' because no way to be sure minimum wasn't before the stop triggered.                          if (asset.Price < order.LimitPrice)                          {                              fill.Status = OrderStatus.Filled;                              fill.FillPrice = Math.Min(prices.High' order.LimitPrice);;                              // assume the order completely filled                              fill.FillQuantity = order.Quantity;                          }                      }                      break;                    case OrderDirection.Sell:                      //-> 1.1 Sell Stop: If Price below setpoint' Sell:                      if (prices.Low < order.StopPrice || order.StopTriggered)                      {                          order.StopTriggered = true;                            // Fill the limit order' using minimum price of the bar                          // Note > Can't use minimum price' because no way to be sure minimum wasn't before the stop triggered.                          if (asset.Price > order.LimitPrice)                          {                              fill.Status = OrderStatus.Filled;                              fill.FillPrice = Math.Max(prices.Low' order.LimitPrice);                              // assume the order completely filled                              fill.FillQuantity = order.Quantity;                          }                      }                      break;              }
Missing Default,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,LimitFill,The following switch statement is missing a default case: switch (order.Direction)              {                  case OrderDirection.Buy:                      //Buy limit seeks lowest price                      if (prices.Low < order.LimitPrice)                      {                          //Set order fill:                          fill.Status = OrderStatus.Filled;                          // fill at the worse price this bar or the limit price' this allows far out of the money limits                          // to be executed properly                          fill.FillPrice = Math.Min(prices.High' order.LimitPrice);                          // assume the order completely filled                          fill.FillQuantity = order.Quantity;                      }                      break;                  case OrderDirection.Sell:                      //Sell limit seeks highest price possible                      if (prices.High > order.LimitPrice)                      {                          fill.Status = OrderStatus.Filled;                          // fill at the worse price this bar or the limit price' this allows far out of the money limits                          // to be executed properly                          fill.FillPrice = Math.Max(prices.Low' order.LimitPrice);                          // assume the order completely filled                          fill.FillQuantity = order.Quantity;                      }                      break;              }
Missing Default,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,MarketOnOpenFill,The following switch statement is missing a default case: switch (order.Direction)              {                  case OrderDirection.Buy:                      fill.FillPrice += slip;                      // assume the order completely filled                      fill.FillQuantity = order.Quantity;                      break;                  case OrderDirection.Sell:                      fill.FillPrice -= slip;                      // assume the order completely filled                      fill.FillQuantity = order.Quantity;                      break;              }
Missing Default,QuantConnect.Orders.Fills,FillModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Orders\Fills\FillModel.cs,MarketOnCloseFill,The following switch statement is missing a default case: switch (order.Direction)              {                  case OrderDirection.Buy:                      fill.FillPrice += slip;                      // assume the order completely filled                      fill.FillQuantity = order.Quantity;                      break;                  case OrderDirection.Sell:                      fill.FillPrice -= slip;                      // assume the order completely filled                      fill.FillQuantity = order.Quantity;                      break;              }
Missing Default,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,GetMarginRemaining,The following switch statement is missing a default case: switch (direction)                      {                          case OrderDirection.Sell:                              result +=                                  // portion of margin to close the existing position                                  GetMaintenanceMargin(security) +                                  // portion of margin to open the new position                                  security.Holdings.AbsoluteHoldingsValue * GetInitialMarginRequirement(security);                              break;                      }
Missing Default,QuantConnect.Securities,BuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\BuyingPowerModel.cs,GetMarginRemaining,The following switch statement is missing a default case: switch (direction)                      {                          case OrderDirection.Buy:                              result +=                                  // portion of margin to close the existing position                                  GetMaintenanceMargin(security) +                                  // portion of margin to open the new position                                  security.Holdings.AbsoluteHoldingsValue * GetInitialMarginRequirement(security);                              break;                      }
Missing Default,QuantConnect.Securities,CashBuyingPowerModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\CashBuyingPowerModel.cs,GetOrderPrice,The following switch statement is missing a default case: switch (order.Type)              {                  case OrderType.Market:                      orderPrice = security.Price;                      break;                    case OrderType.Limit:                      orderPrice = ((LimitOrder)order).LimitPrice;                      break;                    case OrderType.StopMarket:                      orderPrice = ((StopMarketOrder)order).StopPrice;                      break;                    case OrderType.StopLimit:                      orderPrice = ((StopLimitOrder)order).LimitPrice;                      break;              }
Missing Default,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The following switch statement is missing a default case: switch (fill.Direction)                      {                          case OrderDirection.Buy:                              //Update the Holding Average Price: Total Value / Total Quantity:                              averageHoldingsPrice = ((averageHoldingsPrice*quantityHoldings) + (fill.FillQuantity*fill.FillPrice))/(quantityHoldings + fill.FillQuantity);                              //Add the new quantity:                              quantityHoldings += fill.FillQuantity;                              break;                            case OrderDirection.Sell:                              quantityHoldings += fill.FillQuantity; //+ a short = a subtraction                              if (quantityHoldings < 0)                              {                                  //If we've now passed through zero from selling stock: new avg price:                                  averageHoldingsPrice = fill.FillPrice;                              }                              else if (quantityHoldings == 0)                              {                                  averageHoldingsPrice = 0;                              }                              break;                      }
Missing Default,QuantConnect.Securities,SecurityPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\SecurityPortfolioModel.cs,ProcessFill,The following switch statement is missing a default case: switch (fill.Direction)                      {                          case OrderDirection.Buy:                              //Buying when we're shorting moves to close position:                              quantityHoldings += fill.FillQuantity;                              if (quantityHoldings > 0)                              {                                  //If we were short but passed through zero' new average price is what we paid. The short position was closed.                                  averageHoldingsPrice = fill.FillPrice;                              }                              else if (quantityHoldings == 0)                              {                                  averageHoldingsPrice = 0;                              }                              break;                            case OrderDirection.Sell:                              //We are increasing a Short position:                              //E.g.  -100 @ $5' adding -100 @ $10: Avg: $7.5                              //      dAvg = (-500 + -1000) / -200 = 7.5                              averageHoldingsPrice = ((averageHoldingsPrice*quantityHoldings) + (fill.FillQuantity*fill.FillPrice))/(quantityHoldings + fill.FillQuantity);                              quantityHoldings += fill.FillQuantity;                              break;                      }
Missing Default,QuantConnect.Data.Custom.Intrinio,IntrinioEconomicData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Custom\Intrinio\IntrinioEconomicData.cs,GetStringForDataTransformation,The following switch statement is missing a default case: switch (dataTransformation)              {                  case IntrinioDataTransformation.Roc:                      item = "change";                      break;                  case IntrinioDataTransformation.AnnualyRoc:                      item = "yr_change";                      break;                  case IntrinioDataTransformation.CompoundedAnnualRoc:                      item = "c_annual_roc";                      break;                  case IntrinioDataTransformation.AnnualyCCRoc:                      item = "cc_annual_roc";                      break;                  case IntrinioDataTransformation.CCRoc:                      item = "cc_roc";                      break;                  case IntrinioDataTransformation.Level:                      item = "level";                      break;                  case IntrinioDataTransformation.Ln:                      item = "log";                      break;                  case IntrinioDataTransformation.Pc:                      item = "percent_change";                      break;                  case IntrinioDataTransformation.AnnualyPc:                      item = "yr_percent_change";                      break;              }
Missing Default,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,GetMarginRemaining,The following switch statement is missing a default case: switch (direction)                      {                          case OrderDirection.Sell:                              result +=                                  // portion of margin to close the existing position                                  GetMaintenanceMargin(security) +                                  // portion of margin to open the new position                                  security.Holdings.AbsoluteHoldingsValue * GetInitialMarginRequirement(security' security.Holdings.HoldingsValue);                              break;                      }
Missing Default,QuantConnect.Securities.Future,FutureMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Future\FutureMarginModel.cs,GetMarginRemaining,The following switch statement is missing a default case: switch (direction)                      {                          case OrderDirection.Buy:                              result +=                                  // portion of margin to close the existing position                                  GetMaintenanceMargin(security) +                                  // portion of margin to open the new position                                  security.Holdings.AbsoluteHoldingsValue * GetInitialMarginRequirement(security' security.Holdings.HoldingsValue);                              break;                      }
Missing Default,QuantConnect.Securities.Option,OptionPortfolioModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionPortfolioModel.cs,ProcessExerciseFill,The following switch statement is missing a default case: switch (option.ExerciseSettlement)              {                  case SettlementType.PhysicalDelivery:                        base.ProcessFill(portfolio' processSecurity' fill);                      break;                    case SettlementType.Cash:                        var cashQuantity = option.GetIntrinsicValue(underlying.Close) * option.ContractUnitOfTrade * optionQuantity;                        // we add cash equivalent to portfolio                      option.SettlementModel.ApplyFunds(portfolio' option' fill.UtcTime' cashQuote.Symbol' cashQuantity);                        base.ProcessFill(portfolio' processSecurity' fill);                      break;              }
Missing Default,QuantConnect.Securities.Option,OptionMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionMarginModel.cs,GetMarginRemaining,The following switch statement is missing a default case: switch (direction)                      {                          case OrderDirection.Sell:                              result +=                                  // portion of margin to close the existing position                                  GetMaintenanceMargin(security) +                                  // portion of margin to open the new position                                  security.Holdings.AbsoluteHoldingsValue * GetInitialMarginRequirement(security' security.Holdings.HoldingsValue);                              break;                      }
Missing Default,QuantConnect.Securities.Option,OptionMarginModel,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Securities\Option\OptionMarginModel.cs,GetMarginRemaining,The following switch statement is missing a default case: switch (direction)                      {                          case OrderDirection.Buy:                              result +=                                  // portion of margin to close the existing position                                  GetMaintenanceMargin(security) +                                  // portion of margin to open the new position                                  security.Holdings.AbsoluteHoldingsValue * GetInitialMarginRequirement(security' security.Holdings.HoldingsValue);                              break;                      }
Missing Default,QuantConnect.Data.Market,QuoteBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\QuoteBar.cs,Reader,The following switch statement is missing a default case: switch (config.SecurityType)                  {                      case SecurityType.Equity:                          return ParseEquity(config' line' date);                        case SecurityType.Forex:                      case SecurityType.Crypto:                          return ParseForex(config' line' date);                        case SecurityType.Cfd:                          return ParseCfd(config' line' date);                        case SecurityType.Option:                          return ParseOption(config' line' date);                        case SecurityType.Future:                          return ParseFuture(config' line' date);                    }
Missing Default,QuantConnect.Data.Market,Tick,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\Tick.cs,Tick,The following switch statement is missing a default case: switch (config.SecurityType)                  {                      case SecurityType.Equity:                      {                          var csv = line.ToCsv(6);                          Symbol = config.Symbol;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64()).ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Value = csv[1].ToDecimal() / scaleFactor;                          TickType = TickType.Trade;                          Quantity = csv[2].ToDecimal();                          if (csv.Count > 3)                          {                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = (csv[5] == "1");                          }                          break;                      }                        case SecurityType.Forex:                      case SecurityType.Cfd:                      {                          var csv = line.ToCsv(3);                          Symbol = config.Symbol;                          TickType = TickType.Quote;                          var ticks = (long)(csv[0].ToDecimal() * TimeSpan.TicksPerMillisecond);                          Time = date.Date.AddTicks(ticks)                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          BidPrice = csv[1].ToDecimal();                          AskPrice = csv[2].ToDecimal();                          Value = (BidPrice + AskPrice) / 2;                          break;                      }                        case SecurityType.Crypto:                      {                          TickType = config.TickType;                          Symbol = config.Symbol;                          Exchange = config.Market;                            if (TickType == TickType.Trade)                          {                              var csv = line.ToCsv(3);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              Value = csv[1].ToDecimal();                              Quantity = csv[2].ToDecimal();                          }                            if (TickType == TickType.Quote)                          {                              var csv = line.ToCsv(6);                              Time = date.Date.AddMilliseconds((double)csv[0].ToDecimal())                                  .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                              BidPrice = csv[1].ToDecimal();                              BidSize = csv[2].ToDecimal();                              AskPrice = csv[3].ToDecimal();                              AskSize = csv[4].ToDecimal();                              Value = (BidPrice + AskPrice) / 2;                          }                          break;                      }                      case SecurityType.Future:                      case SecurityType.Option:                      {                          var csv = line.ToCsv(7);                          TickType = config.TickType;                          Time = date.Date.AddMilliseconds(csv[0].ToInt64())                              .ConvertTo(config.DataTimeZone' config.ExchangeTimeZone);                          Symbol = config.Symbol;                            if (TickType == TickType.Trade)                          {                              Value = csv[1].ToDecimal()/scaleFactor;                              Quantity = csv[2].ToDecimal();                              Exchange = csv[3];                              SaleCondition = csv[4];                              Suspicious = csv[5] == "1";                          }                          else if (TickType == TickType.OpenInterest)                          {                              Value = csv[1].ToDecimal();                          }                          else                          {                              if (csv[1].Length != 0)                              {                                  BidPrice = csv[1].ToDecimal()/scaleFactor;                                  BidSize = csv[2].ToDecimal();                              }                              if (csv[3].Length != 0)                              {                                  AskPrice = csv[3].ToDecimal()/scaleFactor;                                  AskSize = csv[4].ToDecimal();                              }                              Exchange = csv[5];                              Suspicious = csv[6] == "1";                                if (BidPrice != 0)                              {                                  if (AskPrice != 0)                                  {                                      Value = (BidPrice + AskPrice)/2m;                                  }                                  else                                  {                                      Value = BidPrice;                                  }                              }                              else                              {                                  Value = AskPrice;                              }                          }                            break;                      }                  }
Missing Default,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Reader,The following switch statement is missing a default case: switch (config.SecurityType)                  {                      //Equity File Data Format:                      case SecurityType.Equity:                          return ParseEquity(config' line' date);                        //FOREX has a different data file format:                      case SecurityType.Forex:                          return ParseForex(config' line' date);                        case SecurityType.Crypto:                          return ParseCrypto(config' line' date);                        case SecurityType.Cfd:                          return ParseCfd(config' line' date);                        case SecurityType.Option:                          return ParseOption(config' line' date);                        case SecurityType.Future:                          return ParseFuture(config' line' date);                    }
Missing Default,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Reader,The following switch statement is missing a default case: switch (config.SecurityType)                  {                      //Equity File Data Format:                      case SecurityType.Equity:                          return ParseEquity(config' stream' date);                        //FOREX has a different data file format:                      case SecurityType.Forex:                          return ParseForex(config' stream' date);                        case SecurityType.Crypto:                          return ParseCrypto(config' stream' date);                        case SecurityType.Cfd:                          return ParseCfd(config' stream' date);                        case SecurityType.Option:                          return ParseOption(config' stream' date);                        case SecurityType.Future:                          return ParseFuture(config' stream' date);                    }
Missing Default,QuantConnect.Data.Market,TradeBar,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Data\Market\TradeBar.cs,Parse,The following switch statement is missing a default case: switch (config.SecurityType)              {                  case SecurityType.Equity:                      return ParseEquity(config' line' baseDate);                    case SecurityType.Forex:                  case SecurityType.Crypto:                      return ParseForex(config' line' baseDate);                    case SecurityType.Cfd:                      return ParseCfd(config' line' baseDate);              }
Missing Default,QuantConnect.Statistics,TradeBuilder,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Statistics\TradeBuilder.cs,ProcessFill,The following switch statement is missing a default case: switch (_groupingMethod)              {                  case FillGroupingMethod.FillToFill:                      ProcessFillUsingFillToFill(fill.Clone()' orderFee' conversionRate' multiplier);                      break;                    case FillGroupingMethod.FlatToFlat:                      ProcessFillUsingFlatToFlat(fill.Clone()' orderFee' conversionRate' multiplier);                      break;                    case FillGroupingMethod.FlatToReduced:                      ProcessFillUsingFlatToReduced(fill.Clone()' orderFee' conversionRate' multiplier);                      break;              }
Missing Default,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The following switch statement is missing a default case: switch (resolution)                      {                          case Resolution.Tick:                              var tick = (Tick) data;                              if (tick.TickType == TickType.Trade)                              {                                  return ToCsv(milliseconds' Scale(tick.LastPrice)' tick.Quantity' tick.Exchange' tick.SaleCondition' tick.Suspicious ? "1" : "0");                              }                              if (tick.TickType == TickType.Quote)                              {                                  return ToCsv(milliseconds' Scale(tick.BidPrice)' tick.BidSize' Scale(tick.AskPrice)' tick.AskSize' tick.Exchange' tick.SaleCondition' tick.Suspicious ? "1" : "0");                              }                              break;                          case Resolution.Minute:                          case Resolution.Second:                              var tradeBar = data as TradeBar;                              if (tradeBar != null)                              {                                  return ToCsv(milliseconds' Scale(tradeBar.Open)' Scale(tradeBar.High)' Scale(tradeBar.Low)' Scale(tradeBar.Close)' tradeBar.Volume);                              }                              var quoteBar = data as QuoteBar;                              if (quoteBar != null)                              {                                  return ToCsv(milliseconds'                                      ToScaledCsv(quoteBar.Bid)' quoteBar.LastBidSize'                                      ToScaledCsv(quoteBar.Ask)' quoteBar.LastAskSize);                              }                              break;                            case Resolution.Hour:                          case Resolution.Daily:                              var bigTradeBar = data as TradeBar;                              if (bigTradeBar != null)                              {                                  return ToCsv(longTime' Scale(bigTradeBar.Open)' Scale(bigTradeBar.High)' Scale(bigTradeBar.Low)' Scale(bigTradeBar.Close)' bigTradeBar.Volume);                              }                              var bigQuoteBar = data as QuoteBar;                              if (bigQuoteBar != null)                              {                                  return ToCsv(longTime'                                      ToScaledCsv(bigQuoteBar.Bid)' bigQuoteBar.LastBidSize'                                      ToScaledCsv(bigQuoteBar.Ask)' bigQuoteBar.LastAskSize);                              }                              break;                      }
Missing Default,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The following switch statement is missing a default case: switch (resolution)                      {                          case Resolution.Tick:                              var tick = data as Tick;                              if (tick == null)                              {                                  throw new ArgumentException("Cryto tick could not be created"' nameof(data));                              }                              if (tick.TickType == TickType.Trade)                              {                                  return ToCsv(milliseconds' tick.LastPrice' tick.Quantity);                              }                              if (tick.TickType == TickType.Quote)                              {                                  return ToCsv(milliseconds' tick.BidPrice' tick.BidSize' tick.AskPrice' tick.AskSize);                              }                              throw new ArgumentException("Cryto tick could not be created");                          case Resolution.Second:                          case Resolution.Minute:                              var quoteBar = data as QuoteBar;                              if (quoteBar != null)                              {                                  return ToCsv(milliseconds'                                      ToNonScaledCsv(quoteBar.Bid)' quoteBar.LastBidSize'                                      ToNonScaledCsv(quoteBar.Ask)' quoteBar.LastAskSize);                              }                              var tradeBar = data as TradeBar;                              if (tradeBar != null)                              {                                  return ToCsv(milliseconds' tradeBar.Open' tradeBar.High' tradeBar.Low' tradeBar.Close' tradeBar.Volume);                              }                              throw new ArgumentException("Cryto minute/second bar could not be created"' nameof(data));                            case Resolution.Hour:                          case Resolution.Daily:                              var bigQuoteBar = data as QuoteBar;                              if (bigQuoteBar != null)                              {                                  return ToCsv(longTime'                                      ToNonScaledCsv(bigQuoteBar.Bid)' bigQuoteBar.LastBidSize'                                      ToNonScaledCsv(bigQuoteBar.Ask)' bigQuoteBar.LastAskSize);                              }                              var bigTradeBar = data as TradeBar;                              if (bigTradeBar != null)                              {                                  return ToCsv(longTime'                                               bigTradeBar.Open'                                               bigTradeBar.High'                                               bigTradeBar.Low'                                               bigTradeBar.Close'                                               bigTradeBar.Volume);                              }                              throw new ArgumentException("Cryto hour/daily bar could not be created"' nameof(data));                      }
Missing Default,QuantConnect.Util,LeanData,C:\research\architectureSmells\repos\QuantConnect_Lean\Common\Util\LeanData.cs,GenerateLine,The following switch statement is missing a default case: switch (resolution)                      {                          case Resolution.Tick:                              var tick = data as Tick;                              if (tick == null)                              {                                  throw new ArgumentException("Expected data of type 'Tick'"' nameof(data));                              }                              return ToCsv(milliseconds' tick.BidPrice' tick.AskPrice);                            case Resolution.Second:                          case Resolution.Minute:                              var bar = data as QuoteBar;                              if (bar == null)                              {                                  throw new ArgumentException("Expected data of type 'QuoteBar'"' nameof(data));                              }                              return ToCsv(milliseconds'                                  ToNonScaledCsv(bar.Bid)' bar.LastBidSize'                                  ToNonScaledCsv(bar.Ask)' bar.LastAskSize);                            case Resolution.Hour:                          case Resolution.Daily:                              var bigBar = data as QuoteBar;                              if (bigBar == null)                              {                                  throw new ArgumentException("Expected data of type 'QuoteBar'"' nameof(data));                              }                              return ToCsv(longTime'                                  ToNonScaledCsv(bigBar.Bid)' bigBar.LastBidSize'                                  ToNonScaledCsv(bigBar.Ask)' bigBar.LastAskSize);                      }
