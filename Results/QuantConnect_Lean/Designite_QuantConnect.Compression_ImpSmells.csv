Implementation smell,Namespace,Class,File,Method,Description
Long Statement,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,ZipDirectory,The length of the statement  "                System.IO.Compression.ZipFile.CreateFromDirectory(directory' destination' CompressionLevel.Fastest' includeRootInZip' new PathEncoder()); " is 137.
Long Statement,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,Unzip,The length of the statement  "                        var entry = zip.FirstOrDefault(x => zipEntryName == null || string.Compare(x.FileName' zipEntryName' StringComparison.OrdinalIgnoreCase) == 0); " is 143.
Magic Number,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,ZipData,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,UnGZip,The following statement contains a magic number: var dataBuffer = new byte[4096];
Magic Number,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,Zip,The following statement contains a magic number: try              {                  var buffer = new byte[4096];                  using (var stream = new ZipOutputStream(File.Create(destination)))                  {                      //Zip the text file.                      var entry = new ZipEntry(zipEntryName);                      stream.PutNextEntry(entry);                        using (var fs = File.OpenRead(source))                      {                          int sourceBytes;                          do                          {                              sourceBytes = fs.Read(buffer' 0' buffer.Length);                              stream.Write(buffer' 0' sourceBytes);                          }                          while (sourceBytes > 0);                      }                  }                    //Delete the old text file:                  if (deleteOriginal)                  {                      File.Delete(source);                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,Zip,The following statement contains a magic number: using (var stream = new ZipOutputStream(File.Create(zipPath)))              {                  var entry = new ZipEntry(zipEntry);                  stream.PutNextEntry(entry);                  var buffer = new byte[4096];                  using (var dataReader = new MemoryStream(Encoding.Default.GetBytes(data)))                  {                      int sourceBytes;                      do                      {                          sourceBytes = dataReader.Read(buffer' 0' buffer.Length);                          stream.Write(buffer' 0' sourceBytes);                      }                      while (sourceBytes > 0);                  }              }
Magic Number,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,ZipFiles,The following statement contains a magic number: try              {                  using (var zipStream = new ZipOutputStream(File.Create(destination)))                  {                      var buffer = new byte[4096];                      foreach (var file in files)                      {                          if (!File.Exists(file))                          {                              Log.Trace("ZipFiles(): File does not exist: " + file);                              continue;                          }                            var entry = new ZipEntry(Path.GetFileName(file));                          zipStream.PutNextEntry(entry);                          using (var fstream = File.OpenRead(file))                          {                              StreamUtils.Copy(fstream' zipStream' buffer);                          }                      }                  }              }              catch (Exception err)              {                  Log.Error(err);              }
Magic Number,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,UnzipToFolder,The following statement contains a magic number: try              {                  var fs = File.OpenRead(zipFile);                  zf = new ICSharpCode.SharpZipLib.Zip.ZipFile(fs);                    foreach (ZipEntry zipEntry in zf)                  {                      //Ignore Directories                      if (!zipEntry.IsFile) continue;                        //Remove the folder from the entry                      var entryFileName = Path.GetFileName(zipEntry.Name);                      if (entryFileName == null) continue;                        var buffer = new byte[4096];     // 4K is optimum                      var zipStream = zf.GetInputStream(zipEntry);                        // Manipulate the output filename here as desired.                      var fullZipToPath = Path.Combine(outFolder' entryFileName);                        //Save the file name for later:                      files.Add(fullZipToPath);                      //Log.Trace("Data.UnzipToFolder(): Input File: " + zipFile + "' Output Directory: " + fullZipToPath);                        //Copy the data in buffer chunks                      using (var streamWriter = File.Create(fullZipToPath))                      {                          StreamUtils.Copy(zipStream' streamWriter' buffer);                      }                  }              }              finally              {                  if (zf != null)                  {                      zf.IsStreamOwner = true; // Makes close also shut the underlying stream                      zf.Close(); // Ensure we release resources                  }              }
Magic Number,QuantConnect,Compression,C:\repos\QuantConnect_Lean\Compression\Compression.cs,UnTar,The following statement contains a magic number: var gzip = (source.Substring(Math.Max(0' source.Length - 6)) == "tar.gz");
Magic Number,QuantConnect,ZipStreamWriter,C:\repos\QuantConnect_Lean\Compression\ZipStreamWriter.cs,Flush,The following statement contains a magic number: CopyTempFile(5' throwOnFailure: false);
Magic Number,QuantConnect,ZipStreamWriter,C:\repos\QuantConnect_Lean\Compression\ZipStreamWriter.cs,Dispose,The following statement contains a magic number: CopyTempFile(50' throwOnFailure: true);
