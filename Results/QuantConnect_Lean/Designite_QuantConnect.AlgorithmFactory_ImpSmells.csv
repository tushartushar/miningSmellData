Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,TryCreateILAlgorithm,Cyclomatic complexity of the method is 9
Long Parameter List,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,Loader,The method has 5 parameters. Parameters: debugging' language' loaderTimeLimit' multipleTypeNameResolverFunction' workerThread
Long Parameter List,QuantConnect.AlgorithmFactory.Python.Wrappers,AlgorithmPythonWrapper,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Python\Wrappers\AlgorithmPythonWrapper.cs,AddSecurity,The method has 7 parameters. Parameters: securityType' symbol' resolution' market' fillDataForward' leverage' extendedMarketHours
Long Identifier,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,Loader,The length of the parameter multipleTypeNameResolverFunction is 32.
Long Identifier,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,,The length of the parameter _multipleTypeNameResolverFunction is 33.
Long Statement,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,TryCreateILAlgorithm,The length of the statement  "                if (directoryName != null && directoryName.TrimEnd(Path.DirectorySeparatorChar) != AppDomain.CurrentDomain.BaseDirectory.TrimEnd(Path.DirectorySeparatorChar)) " is 158.
Long Statement,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,TryCreateILAlgorithm,The length of the statement  "                        errorMessage = "Algorithm type name not found' or unable to resolve multiple algorithm types to a single type. Please verify algorithm type name matches the algorithm name in the configuration file and that there is one and only one class derived from QCAlgorithm."; " is 266.
Long Statement,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,TryCreateILAlgorithm,The length of the statement  "                errorMessage = "Algorithm type name not found' or unable to resolve multiple algorithm types to a single type. Please verify algorithm type name matches the algorithm name in the configuration file and that there is one and only one class derived from QCAlgorithm."; " is 266.
Long Statement,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,GetExtendedTypeNames,The length of the statement  "                    // See https://stackoverflow.com/questions/7889228/how-to-prevent-reflectiontypeloadexception-when-calling-assembly-gettypes " is 124.
Magic Number,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,TryCreateILAlgorithm,The following statement contains a magic number: var pdbFilename = assemblyPath.Substring(0' assemblyPath.Length - 4) + ".pdb";
Magic Number,QuantConnect.AlgorithmFactory,Loader,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\Loader.cs,TryCreateAlgorithmInstanceWithIsolator,The following statement contains a magic number: var complete = isolator.ExecuteWithTimeLimit(_loaderTimeLimit' () =>              {                  success = TryCreateAlgorithmInstance(assemblyPath' out instance' out error);              }' ramLimit' sleepIntervalMillis:50' workerThread:_workerThread);
Missing Default,QuantConnect.AlgorithmFactory,DebuggerHelper,C:\research\architectureSmells\repos\QuantConnect_Lean\AlgorithmFactory\DebuggerHelper.cs,Initialize,The following switch statement is missing a default case: switch (debuggingType)                      {                          case DebuggingMethod.LocalCmdline:                              PythonEngine.RunSimpleString("import pdb; pdb.set_trace()");                              break;                            case DebuggingMethod.VisualStudio:                              Log.Trace("DebuggerHelper.Initialize(): waiting for debugger to attach...");                              PythonEngine.RunSimpleString(@"import sys; import time;  while not sys.gettrace():      time.sleep(0.25)");                              break;                      }
