Implementation smell,Namespace,Class,File,Method,Description
Complex Method,IocPerformance.Adapters,FunqContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\FunqContainerAdapter.cs,Resolve,Cyclomatic complexity of the method is 17
Long Parameter List,IocPerformance.Classes.Complex,Complex1,C:\repos\danielpalme_IocPerformance\IocPerformance\Classes\Complex\Complex.cs,Complex1,The method has 6 parameters. Parameters: firstService' secondService' thirdService' subObjectOne' subObjectTwo' subObjectThree
Long Parameter List,IocPerformance.Classes.Complex,Complex2,C:\repos\danielpalme_IocPerformance\IocPerformance\Classes\Complex\Complex.cs,Complex2,The method has 6 parameters. Parameters: firstService' secondService' thirdService' subObjectOne' subObjectTwo' subObjectThree
Long Parameter List,IocPerformance.Classes.Complex,Complex3,C:\repos\danielpalme_IocPerformance\IocPerformance\Classes\Complex\Complex.cs,Complex3,The method has 6 parameters. Parameters: firstService' secondService' thirdService' subObjectOne' subObjectTwo' subObjectThree
Long Parameter List,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateOverviewChart,The method has 6 parameters. Parameters: benchmarks' benchmarkResults' type' minTime' maxTime' directory
Long Identifier,IocPerformance.Adapters,GriffinContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\GriffinContainerAdapter.cs,Prepare,The length of the parameter containerWithLoggingInterception is 32.
Long Identifier,IocPerformance.Adapters,GriffinContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\GriffinContainerAdapter.cs,,The length of the parameter containerWithLoggingInterception is 32.
Long Identifier,SimpleInjector.Extensions.Interception,InterceptionHelper,C:\repos\danielpalme_IocPerformance\IocPerformance\Interception\SimpleInjectorInterceptionExtensions.cs,,The length of the parameter NonGenericInterceptorCreateProxyMethod is 38.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterStandard,The length of the statement  "            autofacContainerBuilder.Register(c => new Combined1(c.Resolve<ISingleton1>()' c.Resolve<ITransient1>())).As<ICombined1>(); " is 122.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterStandard,The length of the statement  "            autofacContainerBuilder.Register(c => new Combined2(c.Resolve<ISingleton2>()' c.Resolve<ITransient2>())).As<ICombined2>(); " is 122.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterStandard,The length of the statement  "            autofacContainerBuilder.Register(c => new Combined3(c.Resolve<ISingleton3>()' c.Resolve<ITransient3>())).As<ICombined3>(); " is 122.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterComplexObject,The length of the statement  "            autofacContainerBuilder.Register(c => new Complex1(c.Resolve<IFirstService>()' c.Resolve<ISecondService>()' c.Resolve<IThirdService>()' c.Resolve<ISubObjectOne>()' c.Resolve<ISubObjectTwo>()' c.Resolve<ISubObjectThree>())).As<IComplex1>(); " is 239.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterComplexObject,The length of the statement  "            autofacContainerBuilder.Register(c => new Complex2(c.Resolve<IFirstService>()' c.Resolve<ISecondService>()' c.Resolve<IThirdService>()' c.Resolve<ISubObjectOne>()' c.Resolve<ISubObjectTwo>()' c.Resolve<ISubObjectThree>())).As<IComplex2>(); " is 239.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterComplexObject,The length of the statement  "            autofacContainerBuilder.Register(c => new Complex3(c.Resolve<IFirstService>()' c.Resolve<ISecondService>()' c.Resolve<IThirdService>()' c.Resolve<ISubObjectOne>()' c.Resolve<ISubObjectTwo>()' c.Resolve<ISubObjectThree>())).As<IComplex3>(); " is 239.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterMultiple,The length of the statement  "            autofacContainerBuilder.Register(c => new ImportMultiple1(c.Resolve<IEnumerable<ISimpleAdapter>>())).As<ImportMultiple1>(); " is 123.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterMultiple,The length of the statement  "            autofacContainerBuilder.Register(c => new ImportMultiple2(c.Resolve<IEnumerable<ISimpleAdapter>>())).As<ImportMultiple2>(); " is 123.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterMultiple,The length of the statement  "            autofacContainerBuilder.Register(c => new ImportMultiple3(c.Resolve<IEnumerable<ISimpleAdapter>>())).As<ImportMultiple3>(); " is 123.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterConditional,The length of the statement  "            autofacContainerBuilder.Register(c => new ExportConditionalObject1()).Named<IExportConditionInterface>("ExportConditionalObject1"); " is 131.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterConditional,The length of the statement  "            autofacContainerBuilder.Register(c => new ExportConditionalObject2()).Named<IExportConditionInterface>("ExportConditionalObject2"); " is 131.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterConditional,The length of the statement  "            autofacContainerBuilder.Register(c => new ExportConditionalObject3()).Named<IExportConditionInterface>("ExportConditionalObject3"); " is 131.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterConditional,The length of the statement  "            autofacContainerBuilder.Register(c => new ImportConditionObject1(c.ResolveNamed<IExportConditionInterface>("ExportConditionalObject1"))); " is 137.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterConditional,The length of the statement  "            autofacContainerBuilder.Register(c => new ImportConditionObject2(c.ResolveNamed<IExportConditionInterface>("ExportConditionalObject2"))); " is 137.
Long Statement,IocPerformance.Adapters,AutofacContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\AutofacContainerAdapter.cs,RegisterConditional,The length of the statement  "            autofacContainerBuilder.Register(c => new ImportConditionObject3(c.ResolveNamed<IExportConditionInterface>("ExportConditionalObject3"))); " is 137.
Long Statement,IocPerformance.Adapters,CatelContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\CatelContainerAdapter.cs,RegisterOpenGeneric,The length of the statement  "            this.container.RegisterType(typeof(IGenericInterface<>)' typeof(GenericExport<>)' registrationType: RegistrationType.Transient); " is 128.
Long Statement,IocPerformance.Adapters,CatelContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\CatelContainerAdapter.cs,RegisterOpenGeneric,The length of the statement  "            this.container.RegisterType(typeof(ImportGeneric<>)' typeof(ImportGeneric<>)' registrationType: RegistrationType.Transient); " is 124.
Long Statement,IocPerformance.Adapters,DynamoContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\DynamoContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Register<ISubObjectB>(x => new SubObjectB { ServiceB = x.Resolve<IServiceB>() }).WithTransientLifetime(); " is 120.
Long Statement,IocPerformance.Adapters,DynamoContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\DynamoContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Register<ISubObjectC>(x => new SubObjectC { ServiceC = x.Resolve<IServiceC>() }).WithTransientLifetime(); " is 120.
Long Statement,IocPerformance.Adapters,HaveBoxContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\HaveBoxContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Configure(config => config.For<ISubObjectA>().Use(() => new SubObjectA { ServiceA = this.container.GetInstance<IServiceA>() })); " is 143.
Long Statement,IocPerformance.Adapters,HaveBoxContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\HaveBoxContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Configure(config => config.For<ISubObjectB>().Use(() => new SubObjectB { ServiceB = this.container.GetInstance<IServiceB>() })); " is 143.
Long Statement,IocPerformance.Adapters,HaveBoxContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\HaveBoxContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Configure(config => config.For<ISubObjectC>().Use(() => new SubObjectC { ServiceC = this.container.GetInstance<IServiceC>() })); " is 143.
Long Statement,IocPerformance.Adapters,HaveBoxContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\HaveBoxContainerAdapter.cs,RegisterInterceptor,The length of the statement  "            this.container.Configure(config => config.For<ICalculator1>().Use<Calculator1>().AndInterceptMethodsWith<HaveBoxInterceptionLogger>()); " is 135.
Long Statement,IocPerformance.Adapters,HaveBoxContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\HaveBoxContainerAdapter.cs,RegisterInterceptor,The length of the statement  "            this.container.Configure(config => config.For<ICalculator2>().Use<Calculator2>().AndInterceptMethodsWith<HaveBoxInterceptionLogger>()); " is 135.
Long Statement,IocPerformance.Adapters,HaveBoxContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\HaveBoxContainerAdapter.cs,RegisterInterceptor,The length of the statement  "            this.container.Configure(config => config.For<ICalculator3>().Use<Calculator3>().AndInterceptMethodsWith<HaveBoxInterceptionLogger>()); " is 135.
Long Statement,IocPerformance.Adapters,LightInjectContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\LightInjectContainerAdapter.cs,RegisterConditional,The length of the statement  "            this.container.Register(f => new ImportConditionObject1(f.GetInstance<IExportConditionInterface>("ExportConditionalObject1"))); " is 127.
Long Statement,IocPerformance.Adapters,LightInjectContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\LightInjectContainerAdapter.cs,RegisterConditional,The length of the statement  "            this.container.Register(f => new ImportConditionObject2(f.GetInstance<IExportConditionInterface>("ExportConditionalObject2"))); " is 127.
Long Statement,IocPerformance.Adapters,LightInjectContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\LightInjectContainerAdapter.cs,RegisterConditional,The length of the statement  "            this.container.Register(f => new ImportConditionObject3(f.GetInstance<IExportConditionInterface>("ExportConditionalObject3"))); " is 127.
Long Statement,IocPerformance.Adapters,MaestroContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\MaestroContainerAdapter.cs,RegisterInterceptor,The length of the statement  "                .Proxy(x => x.ProxyGenerator.CreateInterfaceProxyWithTarget<ICalculator1>(x.Instance' new MaestroInterceptionLogger())); " is 120.
Long Statement,IocPerformance.Adapters,MaestroContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\MaestroContainerAdapter.cs,RegisterInterceptor,The length of the statement  "                .Proxy(x => x.ProxyGenerator.CreateInterfaceProxyWithTarget<ICalculator2>(x.Instance' new MaestroInterceptionLogger())); " is 120.
Long Statement,IocPerformance.Adapters,MaestroContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\MaestroContainerAdapter.cs,RegisterInterceptor,The length of the statement  "                .Proxy(x => x.ProxyGenerator.CreateInterfaceProxyWithTarget<ICalculator3>(x.Instance' new MaestroInterceptionLogger())); " is 120.
Long Statement,IocPerformance.Adapters,MefContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\MefContainerAdapter.cs,Prepare,The length of the statement  "                new AggregateCatalog(basic.Item1' basic.Item2' basic.Item3' propertyInjectionCatalog' multipleCatalog' openGenericCatalog)' true); " is 130.
Long Statement,IocPerformance.Adapters,MugenContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\MugenContainerAdapter.cs,RegisterInterceptor,The length of the statement  "            this.container.Bind<ICalculator1>().To<Calculator1>().InTransientScope().InterceptAsTarget(new MugenInjectionInterceptionLogger()); " is 131.
Long Statement,IocPerformance.Adapters,MugenContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\MugenContainerAdapter.cs,RegisterInterceptor,The length of the statement  "            this.container.Bind<ICalculator2>().To<Calculator2>().InTransientScope().InterceptAsTarget(new MugenInjectionInterceptionLogger()); " is 131.
Long Statement,IocPerformance.Adapters,MugenContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\MugenContainerAdapter.cs,RegisterInterceptor,The length of the statement  "            this.container.Bind<ICalculator3>().To<Calculator3>().InTransientScope().InterceptAsTarget(new MugenInjectionInterceptionLogger()); " is 131.
Long Statement,IocPerformance.Adapters,SimpleInjectorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\SimpleInjectorContainerAdapter.cs,RegisterConditional,The length of the statement  "            this.container.RegisterConditional<IExportConditionInterface' ExportConditionalObject1>(this.WhenInjectedInto<ImportConditionObject1>); " is 135.
Long Statement,IocPerformance.Adapters,SimpleInjectorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\SimpleInjectorContainerAdapter.cs,RegisterConditional,The length of the statement  "            this.container.RegisterConditional<IExportConditionInterface' ExportConditionalObject2>(this.WhenInjectedInto<ImportConditionObject2>); " is 135.
Long Statement,IocPerformance.Adapters,SimpleInjectorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\SimpleInjectorContainerAdapter.cs,RegisterConditional,The length of the statement  "            this.container.RegisterConditional<IExportConditionInterface' ExportConditionalObject3>(this.WhenInjectedInto<ImportConditionObject3>); " is 135.
Long Statement,IocPerformance.Adapters,SpringContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\SpringContainerAdapter.cs,PrepareBasic,The length of the statement  "            // TODO: use named contexts for basic and full registrations to allow for fair comparison http://www.springframework.net/doc/reference/html/objects.html 3.15. Customized behavior in the ApplicationContext " is 204.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Register(Component.For<IComplexPropertyObject1>().ImplementedBy<ComplexPropertyObject1>().LifeStyle.Transient); " is 126.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Register(Component.For<IComplexPropertyObject2>().ImplementedBy<ComplexPropertyObject2>().LifeStyle.Transient); " is 126.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterPropertyInjection,The length of the statement  "            this.container.Register(Component.For<IComplexPropertyObject3>().ImplementedBy<ComplexPropertyObject3>().LifeStyle.Transient); " is 126.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterOpenGeneric,The length of the statement  "            this.container.Register(Component.For(typeof(IGenericInterface<>)).ImplementedBy(typeof(GenericExport<>)).LifeStyle.Transient); " is 127.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterOpenGeneric,The length of the statement  "            this.container.Register(Component.For(typeof(ImportGeneric<>)).ImplementedBy(typeof(ImportGeneric<>)).LifeStyle.Transient); " is 123.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterInterceptor,The length of the statement  "                Component.For<ICalculator1>().ImplementedBy<Calculator1>().Interceptors<WindsorInterceptionLogger>().LifeStyle.Transient); " is 122.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterInterceptor,The length of the statement  "                Component.For<ICalculator2>().ImplementedBy<Calculator2>().Interceptors<WindsorInterceptionLogger>().LifeStyle.Transient); " is 122.
Long Statement,IocPerformance.Adapters,WindsorContainerAdapter,C:\repos\danielpalme_IocPerformance\IocPerformance\Adapters\WindsorContainerAdapter.cs,RegisterInterceptor,The length of the statement  "                Component.For<ICalculator3>().ImplementedBy<Calculator3>().Interceptors<WindsorInterceptionLogger>().LifeStyle.Transient); " is 122.
Long Statement,IocPerformance,ContainerAdapterRuntime,C:\repos\danielpalme_IocPerformance\IocPerformance\ContainerAdapterRuntime.cs,Run,The length of the statement  "                new string(' '' Math.Max(0' benchmarks.Select(b => b.Name.Length).OrderByDescending(n => n).First() - container.Name.Length - container.Version.Length))' " is 153.
Long Statement,IocPerformance,ContainerAdapterRuntime,C:\repos\danielpalme_IocPerformance\IocPerformance\ContainerAdapterRuntime.cs,Run,The length of the statement  "                    var benchmarkResult = existingBenchmarkResults.SingleOrDefault(b => b.ContainerInfo.Name == container.Name && b.BenchmarkInfo.Name == benchmark.Name); " is 150.
Long Statement,IocPerformance,ContainerAdapterRuntime,C:\repos\danielpalme_IocPerformance\IocPerformance\ContainerAdapterRuntime.cs,Run,The length of the statement  "                        new string(' '' benchmarks.Select(b => b.Name.Length).OrderByDescending(n => n).First() - benchmarkResult.BenchmarkInfo.Name.Length)' " is 133.
Long Statement,DryIoc.Interception,DryIocInterceptionTools,C:\repos\danielpalme_IocPerformance\IocPerformance\Interception\DryIocInterceptionTools.cs,Intercept,The length of the statement  "                throw new ArgumentException($"Intercepted service type {serviceType} is not a supported: it is nor class nor interface"); " is 121.
Long Statement,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateOverviewChart,The length of the statement  "                    var time = benchmarkResults.First(r => r.BenchmarkInfo.Name == benchmark.Name && r.ContainerInfo.Name == container.Name).SingleThreadedResult.Time; " is 147.
Long Statement,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateBenchmarkChart,The length of the statement  "                chart.Series["Single thread"].Points.AddXY(result.ContainerInfo.Name' singleThreadedValue == 0 ? 1 : singleThreadedValue); " is 122.
Long Statement,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateBenchmarkChart,The length of the statement  "                chart.Series["Multiple threads"].Points.AddXY(result.ContainerInfo.Name' multiThreadedValue == 0 ? 1 : multiThreadedValue); " is 123.
Long Statement,IocPerformance.Output,GithubPagesOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\GithubPagesOutput.cs,Create,The length of the statement  "                    writer.Write("<meta charset=\"utf -8\" />");                     writer.Write("<title>Ioc Performance - Results</title>");                     writer.Write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\" integrity=\"sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\" crossorigin=\"anonymous\" />"); " is 383.
Long Statement,IocPerformance.Output,GithubPagesOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\GithubPagesOutput.cs,Create,The length of the statement  "                                    .Min(r => r.SingleThreadedResult.Time) == containerResult.SingleThreadedResult.Time ? " style=\"font-weight:bold;\"" : string.Empty; " is 132.
Long Statement,IocPerformance.Output,GithubPagesOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\GithubPagesOutput.cs,Create,The length of the statement  "                                    .Min(r => r.MultiThreadedResult.Time) == containerResult.MultiThreadedResult.Time ? " style=\"font-weight:bold;\"" : string.Empty; " is 130.
Long Statement,IocPerformance.Output,GithubPagesOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\GithubPagesOutput.cs,Create,The length of the statement  "                                "<td class=\"{0}\" style=\"text-align:right;\"><span title=\"Single thread\"{1}>{2}</span><br /><span title=\"Multiple threads\"{3}>{4}</span></td>"' " is 149.
Long Statement,IocPerformance.Output,HtmlOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\HtmlOutput.cs,Create,The length of the statement  "                                    .Min(r => r.SingleThreadedResult.Time) == containerResult.SingleThreadedResult.Time ? " style=\"font-weight:bold;\"" : string.Empty; " is 132.
Long Statement,IocPerformance.Output,HtmlOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\HtmlOutput.cs,Create,The length of the statement  "                                    .Min(r => r.MultiThreadedResult.Time) == containerResult.MultiThreadedResult.Time ? " style=\"font-weight:bold;\"" : string.Empty; " is 130.
Long Statement,IocPerformance.Output,HtmlOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\HtmlOutput.cs,Create,The length of the statement  "                                "<td style=\"text-align:right;\"><span title=\"Single thread\"{0}>{1}</span><br /><span title=\"Multiple threads\"{2}>{3}</span></td>"' " is 135.
Long Statement,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,Create,The length of the statement  "                    writer.WriteLine("[www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison](http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison)"); " is 188.
Long Statement,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,Create,The length of the statement  "                    writer.WriteLine("![Basic features](http://www.palmmedia.de/content/blogimages/5225c515-2f25-498f-84fe-6c6e931d2042.png)"); " is 123.
Long Statement,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,Create,The length of the statement  "                    writer.WriteLine("![Advanced features](http://www.palmmedia.de/content/blogimages/e0401485-20c6-462e-b5d4-c9cf854e6bee.png)"); " is 126.
Long Statement,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,Create,The length of the statement  "                    writer.WriteLine("**Memory**: " + ((double)new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory / (1024 * 1024 * 1024)).ToString("f2") + "GB"); " is 159.
Long Statement,IocPerformance.Output,XmlOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\XmlOutput.cs,Create,The length of the statement  "                File.Copy("output\\result.xml"' "output\\result_" + DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss"' CultureInfo.InvariantCulture) + ".xml"); " is 137.
Long Statement,IocPerformance.Output,XmlOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\XmlOutput.cs,Create,The length of the statement  "                            new XAttribute("time"' containerResult.SingleThreadedResult.Time.HasValue ? containerResult.SingleThreadedResult.Time.ToString() : string.Empty)' " is 145.
Long Statement,IocPerformance.Output,XmlOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\XmlOutput.cs,Create,The length of the statement  "                            new XAttribute("time"' containerResult.MultiThreadedResult.Time.HasValue ? containerResult.MultiThreadedResult.Time.ToString() : string.Empty)' " is 143.
Long Statement,IocPerformance.Output,XmlOutputReader,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\XmlOutputReader.cs,GetExistingBenchmarkResults,The length of the statement  "                            Time = string.IsNullOrEmpty(singleThreadedResultElement.Attribute("time").Value) ? (long?)null : long.Parse(singleThreadedResultElement.Attribute("time").Value)' " is 161.
Long Statement,IocPerformance.Output,XmlOutputReader,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\XmlOutputReader.cs,GetExistingBenchmarkResults,The length of the statement  "                            Time = string.IsNullOrEmpty(multiThreadedResultElement.Attribute("time").Value) ? (long?)null : long.Parse(multiThreadedResultElement.Attribute("time").Value)' " is 159.
Magic Number,IocPerformance.Benchmarks.Advanced,AspNetCore_10_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\10_AspNetCore_Benchmark.cs,Verify,The following statement contains a magic number: if (RepositoryTransient1.Instances != this.LoopCount * 3 ||                  RepositoryTransient2.Instances != this.LoopCount * 3 ||                  RepositoryTransient3.Instances != this.LoopCount * 3)              {                  throw new Exception(string.Format("RepositoryTransient count must be {0}"' this.LoopCount));              }
Magic Number,IocPerformance.Benchmarks.Advanced,AspNetCore_10_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\10_AspNetCore_Benchmark.cs,Verify,The following statement contains a magic number: if (RepositoryTransient1.Instances != this.LoopCount * 3 ||                  RepositoryTransient2.Instances != this.LoopCount * 3 ||                  RepositoryTransient3.Instances != this.LoopCount * 3)              {                  throw new Exception(string.Format("RepositoryTransient count must be {0}"' this.LoopCount));              }
Magic Number,IocPerformance.Benchmarks.Advanced,AspNetCore_10_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\10_AspNetCore_Benchmark.cs,Verify,The following statement contains a magic number: if (RepositoryTransient1.Instances != this.LoopCount * 3 ||                  RepositoryTransient2.Instances != this.LoopCount * 3 ||                  RepositoryTransient3.Instances != this.LoopCount * 3)              {                  throw new Exception(string.Format("RepositoryTransient count must be {0}"' this.LoopCount));              }
Magic Number,IocPerformance.Benchmarks.Advanced,AspNetCore_10_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\10_AspNetCore_Benchmark.cs,Verify,The following statement contains a magic number: if (ScopedService.Instances != this.LoopCount * 3)              {                  throw new Exception(string.Format("ScopedService count must be {0}"' this.LoopCount));              }
Magic Number,IocPerformance.Benchmarks.Advanced,InterceptionWithProxy_11_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\11_InterceptionWithProxy_Benchmark.cs,MethodToBenchmark,The following statement contains a magic number: result1.Add(5' 10);
Magic Number,IocPerformance.Benchmarks.Advanced,InterceptionWithProxy_11_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\11_InterceptionWithProxy_Benchmark.cs,MethodToBenchmark,The following statement contains a magic number: result1.Add(5' 10);
Magic Number,IocPerformance.Benchmarks.Advanced,InterceptionWithProxy_11_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\11_InterceptionWithProxy_Benchmark.cs,MethodToBenchmark,The following statement contains a magic number: result2.Add(5' 10);
Magic Number,IocPerformance.Benchmarks.Advanced,InterceptionWithProxy_11_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\11_InterceptionWithProxy_Benchmark.cs,MethodToBenchmark,The following statement contains a magic number: result2.Add(5' 10);
Magic Number,IocPerformance.Benchmarks.Advanced,InterceptionWithProxy_11_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\11_InterceptionWithProxy_Benchmark.cs,MethodToBenchmark,The following statement contains a magic number: result3.Add(5' 10);
Magic Number,IocPerformance.Benchmarks.Advanced,InterceptionWithProxy_11_Benchmark,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\Advanced\11_InterceptionWithProxy_Benchmark.cs,MethodToBenchmark,The following statement contains a magic number: result3.Add(5' 10);
Magic Number,IocPerformance.Benchmarks,MultithreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\MultithreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: var threads = Enumerable.Range(0' NumberOfThreads)                  .Select(i => new Thread(() =>                  {                      try                      {                          for (var j = 0; j < loopcount; j++)                          {                              Interlocked.Increment(ref counter);                              Benchmark.MethodToBenchmark(Container);                                // If measurement takes more than one minute' stop and interpolate result                              if (result.ExtraPolated || (i % 500 == 0 && watch.ElapsedMilliseconds > TimeLimit))                              {                                  watch.Stop();                                  result.ExtraPolated = true;                                  break;                              }                                if (exception != null)                              {                                  break;                              }                          }                      }                      catch (Exception ex)                      {                          this.CollectMemory();                            exception = ex;                      }                  }))                  .ToList();
Magic Number,IocPerformance.Benchmarks,MultithreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\MultithreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: if (exception != null)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (multiple threads) failed: {1}"'                      Benchmark.Name'                      exception.Message);                  Console.ResetColor();                    result.Error = exception is OutOfMemoryException ? "OoM" : "Error";              }              else if (result.ExtraPolated)              {                  result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / counter;                    Console.ForegroundColor = ConsoleColor.Yellow;                  Console.WriteLine(                   BenchmarkMeasurer.TooSlowMessageFormat'                      Benchmark.Name'                      "multiple threads"'                      (double)watch.ElapsedMilliseconds / (1000 * 60)'                      counter'                      this.Benchmark.LoopCount'                      (double)result.Time / (1000 * 60));                  Console.ResetColor();                    return result;              }
Magic Number,IocPerformance.Benchmarks,MultithreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\MultithreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: if (exception != null)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (multiple threads) failed: {1}"'                      Benchmark.Name'                      exception.Message);                  Console.ResetColor();                    result.Error = exception is OutOfMemoryException ? "OoM" : "Error";              }              else if (result.ExtraPolated)              {                  result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / counter;                    Console.ForegroundColor = ConsoleColor.Yellow;                  Console.WriteLine(                   BenchmarkMeasurer.TooSlowMessageFormat'                      Benchmark.Name'                      "multiple threads"'                      (double)watch.ElapsedMilliseconds / (1000 * 60)'                      counter'                      this.Benchmark.LoopCount'                      (double)result.Time / (1000 * 60));                  Console.ResetColor();                    return result;              }
Magic Number,IocPerformance.Benchmarks,MultithreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\MultithreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: if (exception != null)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (multiple threads) failed: {1}"'                      Benchmark.Name'                      exception.Message);                  Console.ResetColor();                    result.Error = exception is OutOfMemoryException ? "OoM" : "Error";              }              else if (result.ExtraPolated)              {                  result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / counter;                    Console.ForegroundColor = ConsoleColor.Yellow;                  Console.WriteLine(                   BenchmarkMeasurer.TooSlowMessageFormat'                      Benchmark.Name'                      "multiple threads"'                      (double)watch.ElapsedMilliseconds / (1000 * 60)'                      counter'                      this.Benchmark.LoopCount'                      (double)result.Time / (1000 * 60));                  Console.ResetColor();                    return result;              }
Magic Number,IocPerformance.Benchmarks,MultithreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\MultithreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: if (exception != null)              {                  Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (multiple threads) failed: {1}"'                      Benchmark.Name'                      exception.Message);                  Console.ResetColor();                    result.Error = exception is OutOfMemoryException ? "OoM" : "Error";              }              else if (result.ExtraPolated)              {                  result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / counter;                    Console.ForegroundColor = ConsoleColor.Yellow;                  Console.WriteLine(                   BenchmarkMeasurer.TooSlowMessageFormat'                      Benchmark.Name'                      "multiple threads"'                      (double)watch.ElapsedMilliseconds / (1000 * 60)'                      counter'                      this.Benchmark.LoopCount'                      (double)result.Time / (1000 * 60));                  Console.ResetColor();                    return result;              }
Magic Number,IocPerformance.Benchmarks,SinglethreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\SinglethreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: try              {                  for (var i = 0; i < this.Benchmark.LoopCount; i++)                  {                      Benchmark.MethodToBenchmark(this.Container);                        // If measurement takes more than one minute' stop and interpolate result                      if (i % 500 == 0 && watch.ElapsedMilliseconds > BenchmarkMeasurer.TimeLimit)                      {                          watch.Stop();                            result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / i;                            Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(                              BenchmarkMeasurer.TooSlowMessageFormat'                              Benchmark.Name'                              "single thread"'                              (double)watch.ElapsedMilliseconds / (1000 * 60)'                              i'                              this.Benchmark.LoopCount'                              (double)result.Time / (1000 * 60));                          Console.ResetColor();                            result.ExtraPolated = true;                          return result;                      }                  }              }              catch (Exception ex)              {                  this.CollectMemory();                    Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (single thread) failed: {1}"'                      Benchmark.Name'                      ex.Message);                  Console.ResetColor();                    result.Error = ex is OutOfMemoryException ? "OoM" : "Error";              }
Magic Number,IocPerformance.Benchmarks,SinglethreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\SinglethreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: try              {                  for (var i = 0; i < this.Benchmark.LoopCount; i++)                  {                      Benchmark.MethodToBenchmark(this.Container);                        // If measurement takes more than one minute' stop and interpolate result                      if (i % 500 == 0 && watch.ElapsedMilliseconds > BenchmarkMeasurer.TimeLimit)                      {                          watch.Stop();                            result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / i;                            Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(                              BenchmarkMeasurer.TooSlowMessageFormat'                              Benchmark.Name'                              "single thread"'                              (double)watch.ElapsedMilliseconds / (1000 * 60)'                              i'                              this.Benchmark.LoopCount'                              (double)result.Time / (1000 * 60));                          Console.ResetColor();                            result.ExtraPolated = true;                          return result;                      }                  }              }              catch (Exception ex)              {                  this.CollectMemory();                    Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (single thread) failed: {1}"'                      Benchmark.Name'                      ex.Message);                  Console.ResetColor();                    result.Error = ex is OutOfMemoryException ? "OoM" : "Error";              }
Magic Number,IocPerformance.Benchmarks,SinglethreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\SinglethreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: try              {                  for (var i = 0; i < this.Benchmark.LoopCount; i++)                  {                      Benchmark.MethodToBenchmark(this.Container);                        // If measurement takes more than one minute' stop and interpolate result                      if (i % 500 == 0 && watch.ElapsedMilliseconds > BenchmarkMeasurer.TimeLimit)                      {                          watch.Stop();                            result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / i;                            Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(                              BenchmarkMeasurer.TooSlowMessageFormat'                              Benchmark.Name'                              "single thread"'                              (double)watch.ElapsedMilliseconds / (1000 * 60)'                              i'                              this.Benchmark.LoopCount'                              (double)result.Time / (1000 * 60));                          Console.ResetColor();                            result.ExtraPolated = true;                          return result;                      }                  }              }              catch (Exception ex)              {                  this.CollectMemory();                    Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (single thread) failed: {1}"'                      Benchmark.Name'                      ex.Message);                  Console.ResetColor();                    result.Error = ex is OutOfMemoryException ? "OoM" : "Error";              }
Magic Number,IocPerformance.Benchmarks,SinglethreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\SinglethreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: try              {                  for (var i = 0; i < this.Benchmark.LoopCount; i++)                  {                      Benchmark.MethodToBenchmark(this.Container);                        // If measurement takes more than one minute' stop and interpolate result                      if (i % 500 == 0 && watch.ElapsedMilliseconds > BenchmarkMeasurer.TimeLimit)                      {                          watch.Stop();                            result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / i;                            Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(                              BenchmarkMeasurer.TooSlowMessageFormat'                              Benchmark.Name'                              "single thread"'                              (double)watch.ElapsedMilliseconds / (1000 * 60)'                              i'                              this.Benchmark.LoopCount'                              (double)result.Time / (1000 * 60));                          Console.ResetColor();                            result.ExtraPolated = true;                          return result;                      }                  }              }              catch (Exception ex)              {                  this.CollectMemory();                    Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (single thread) failed: {1}"'                      Benchmark.Name'                      ex.Message);                  Console.ResetColor();                    result.Error = ex is OutOfMemoryException ? "OoM" : "Error";              }
Magic Number,IocPerformance.Benchmarks,SinglethreadedBenchmarkMeasurer,C:\repos\danielpalme_IocPerformance\IocPerformance\Benchmarks\SinglethreadedBenchmarkMeasurer.cs,Measure,The following statement contains a magic number: try              {                  for (var i = 0; i < this.Benchmark.LoopCount; i++)                  {                      Benchmark.MethodToBenchmark(this.Container);                        // If measurement takes more than one minute' stop and interpolate result                      if (i % 500 == 0 && watch.ElapsedMilliseconds > BenchmarkMeasurer.TimeLimit)                      {                          watch.Stop();                            result.Time = watch.ElapsedMilliseconds * this.Benchmark.LoopCount / i;                            Console.ForegroundColor = ConsoleColor.Yellow;                          Console.WriteLine(                              BenchmarkMeasurer.TooSlowMessageFormat'                              Benchmark.Name'                              "single thread"'                              (double)watch.ElapsedMilliseconds / (1000 * 60)'                              i'                              this.Benchmark.LoopCount'                              (double)result.Time / (1000 * 60));                          Console.ResetColor();                            result.ExtraPolated = true;                          return result;                      }                  }              }              catch (Exception ex)              {                  this.CollectMemory();                    Console.ForegroundColor = ConsoleColor.Red;                  Console.WriteLine(                      " Benchmark '{0}' (single thread) failed: {1}"'                      Benchmark.Name'                      ex.Message);                  Console.ResetColor();                    result.Error = ex is OutOfMemoryException ? "OoM" : "Error";              }
Magic Number,IocPerformance.Classes.Multiple,ImportMultiple1,C:\repos\danielpalme_IocPerformance\IocPerformance\Classes\Multiple\ImportMultiple.cs,ImportMultiple1,The following statement contains a magic number: if (adapterCount != 5)              {                  throw new ArgumentException("there should be 5 adapters and there where: " + adapterCount' nameof(adapters));              }
Magic Number,IocPerformance.Classes.Multiple,ImportMultiple2,C:\repos\danielpalme_IocPerformance\IocPerformance\Classes\Multiple\ImportMultiple.cs,ImportMultiple2,The following statement contains a magic number: if (adapterCount != 5)              {                  throw new ArgumentException("there should be 5 adapters and there where: " + adapterCount' nameof(adapters));              }
Magic Number,IocPerformance.Classes.Multiple,ImportMultiple3,C:\repos\danielpalme_IocPerformance\IocPerformance\Classes\Multiple\ImportMultiple.cs,ImportMultiple3,The following statement contains a magic number: if (adapterCount != 5)              {                  throw new ArgumentException("there should be 5 adapters and there where: " + adapterCount' nameof(adapters));              }
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,Create,The following statement contains a magic number: CreateOverviewChart(benchmarks' benchmarkResults' "Basic"' 0' 6000' directory);
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,Create,The following statement contains a magic number: CreateOverviewChart(benchmarks' benchmarkResults' "Basic"' 6000' long.MaxValue' directory);
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,Create,The following statement contains a magic number: CreateOverviewChart(benchmarks' benchmarkResults' "Advanced"' 0' 25000' directory);
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,Create,The following statement contains a magic number: CreateOverviewChart(benchmarks' benchmarkResults' "Advanced"' 25000' long.MaxValue' directory);
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,Create,The following statement contains a magic number: CreateOverviewChart(benchmarks' benchmarkResults' "Prepare"' 0' 25000' directory);
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,Create,The following statement contains a magic number: CreateOverviewChart(benchmarks' benchmarkResults' "Prepare"' 25000' long.MaxValue' directory);
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateOverviewChart,The following statement contains a magic number: Chart chart = new Chart()              {                  Size = new Size(800' 600)'                  Palette = ChartColorPalette.Pastel'                  BorderlineColor = Color.Black'                  BorderlineWidth = 1'                  BorderColor = Color.Black'                  BorderDashStyle = ChartDashStyle.Solid'              };
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateOverviewChart,The following statement contains a magic number: Chart chart = new Chart()              {                  Size = new Size(800' 600)'                  Palette = ChartColorPalette.Pastel'                  BorderlineColor = Color.Black'                  BorderlineWidth = 1'                  BorderColor = Color.Black'                  BorderDashStyle = ChartDashStyle.Solid'              };
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateBenchmarkChart,The following statement contains a magic number: Chart chart = new Chart()              {                  Size = new Size(800' 600)'                  Palette = ChartColorPalette.Pastel'                  BorderlineColor = Color.Black'                  BorderlineWidth = 1'                  BorderColor = Color.Black'                  BorderDashStyle = ChartDashStyle.Solid'              };
Magic Number,IocPerformance.Output,ChartOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\ChartOutput.cs,CreateBenchmarkChart,The following statement contains a magic number: Chart chart = new Chart()              {                  Size = new Size(800' 600)'                  Palette = ChartColorPalette.Pastel'                  BorderlineColor = Color.Black'                  BorderlineWidth = 1'                  BorderColor = Color.Black'                  BorderDashStyle = ChartDashStyle.Solid'              };
Magic Number,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,Create,The following statement contains a magic number: using (var fileStream = new FileStream("../../../README.md"' FileMode.Create))              {                  using (var writer = new StreamWriter(fileStream))                  {                      writer.WriteLine("Ioc Performance");                      writer.WriteLine("===============");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Source code of my performance comparison of the most popular .NET IoC containers:  ");                      writer.WriteLine("[www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison](http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison)");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Author: Daniel Palme  ");                      writer.WriteLine("Blog: [www.palmmedia.de](http://www.palmmedia.de)  ");                      writer.WriteLine("Twitter: [@danielpalme](http://twitter.com/danielpalme)  ");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Results");                      writer.WriteLine("-------");                        writer.WriteLine("### Explantions");                      writer.WriteLine("**First value**: Time of single-threaded execution in [ms]  ");                      writer.WriteLine("**Second value**: Time of multi-threaded execution in [ms]  ");                        if (benchmarkResults.Any(b => b.SingleThreadedResult.ExtraPolated || b.MultiThreadedResult.ExtraPolated))                      {                          writer.WriteLine("**_*_**: Benchmark was stopped after 1 minute and result is extrapolated.  ");                      }                        if (benchmarkResults.Any(b => b.SingleThreadedResult.Error == "OoM" || b.MultiThreadedResult.Error == "OoM"))                      {                          writer.WriteLine("**OoM**: Benchmark was stopped after an *OutOfMemoryException* was thrown.  ");                      }                        if (benchmarkResults.Any(b => b.SingleThreadedResult.Error == "OoM" || b.MultiThreadedResult.Error == "OoM"))                      {                          writer.WriteLine("**Error**: Benchmark was stopped after an *Exception* was thrown.  ");                      }                        writer.WriteLine("### Basic Features");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Basic"))' benchmarkResults);                        writer.WriteLine("### Advanced Features");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Advanced"))' benchmarkResults);                        writer.WriteLine("### Prepare");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Prepare"))' benchmarkResults);                        writer.WriteLine("### Charts");                      writer.WriteLine("![Basic features](http://www.palmmedia.de/content/blogimages/5225c515-2f25-498f-84fe-6c6e931d2042.png)");                      writer.WriteLine("![Advanced features](http://www.palmmedia.de/content/blogimages/e0401485-20c6-462e-b5d4-c9cf854e6bee.png)");                      writer.WriteLine("![Prepare](http://www.palmmedia.de/content/blogimages/67b056a5-9da8-40b4-9ae6-0c838cdac180.png)");                        writer.WriteLine("### Machine");                      writer.WriteLine("The benchmark was executed on the following machine:  ");                      using (ManagementObjectSearcher win32Proc = new ManagementObjectSearcher("select * from Win32_Processor")'                          win32CompSys = new ManagementObjectSearcher("select * from Win32_ComputerSystem")'                              win32Memory = new ManagementObjectSearcher("select * from Win32_PhysicalMemory"))                      {                          foreach (ManagementObject obj in win32Proc.Get())                          {                              writer.WriteLine("**CPU**: " + obj["Name"] + "  ");                          }                      }                        writer.WriteLine("**Memory**: " + ((double)new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory / (1024 * 1024 * 1024)).ToString("f2") + "GB");                  }              }
Magic Number,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,Create,The following statement contains a magic number: using (var fileStream = new FileStream("../../../README.md"' FileMode.Create))              {                  using (var writer = new StreamWriter(fileStream))                  {                      writer.WriteLine("Ioc Performance");                      writer.WriteLine("===============");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Source code of my performance comparison of the most popular .NET IoC containers:  ");                      writer.WriteLine("[www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison](http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison)");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Author: Daniel Palme  ");                      writer.WriteLine("Blog: [www.palmmedia.de](http://www.palmmedia.de)  ");                      writer.WriteLine("Twitter: [@danielpalme](http://twitter.com/danielpalme)  ");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Results");                      writer.WriteLine("-------");                        writer.WriteLine("### Explantions");                      writer.WriteLine("**First value**: Time of single-threaded execution in [ms]  ");                      writer.WriteLine("**Second value**: Time of multi-threaded execution in [ms]  ");                        if (benchmarkResults.Any(b => b.SingleThreadedResult.ExtraPolated || b.MultiThreadedResult.ExtraPolated))                      {                          writer.WriteLine("**_*_**: Benchmark was stopped after 1 minute and result is extrapolated.  ");                      }                        if (benchmarkResults.Any(b => b.SingleThreadedResult.Error == "OoM" || b.MultiThreadedResult.Error == "OoM"))                      {                          writer.WriteLine("**OoM**: Benchmark was stopped after an *OutOfMemoryException* was thrown.  ");                      }                        if (benchmarkResults.Any(b => b.SingleThreadedResult.Error == "OoM" || b.MultiThreadedResult.Error == "OoM"))                      {                          writer.WriteLine("**Error**: Benchmark was stopped after an *Exception* was thrown.  ");                      }                        writer.WriteLine("### Basic Features");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Basic"))' benchmarkResults);                        writer.WriteLine("### Advanced Features");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Advanced"))' benchmarkResults);                        writer.WriteLine("### Prepare");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Prepare"))' benchmarkResults);                        writer.WriteLine("### Charts");                      writer.WriteLine("![Basic features](http://www.palmmedia.de/content/blogimages/5225c515-2f25-498f-84fe-6c6e931d2042.png)");                      writer.WriteLine("![Advanced features](http://www.palmmedia.de/content/blogimages/e0401485-20c6-462e-b5d4-c9cf854e6bee.png)");                      writer.WriteLine("![Prepare](http://www.palmmedia.de/content/blogimages/67b056a5-9da8-40b4-9ae6-0c838cdac180.png)");                        writer.WriteLine("### Machine");                      writer.WriteLine("The benchmark was executed on the following machine:  ");                      using (ManagementObjectSearcher win32Proc = new ManagementObjectSearcher("select * from Win32_Processor")'                          win32CompSys = new ManagementObjectSearcher("select * from Win32_ComputerSystem")'                              win32Memory = new ManagementObjectSearcher("select * from Win32_PhysicalMemory"))                      {                          foreach (ManagementObject obj in win32Proc.Get())                          {                              writer.WriteLine("**CPU**: " + obj["Name"] + "  ");                          }                      }                        writer.WriteLine("**Memory**: " + ((double)new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory / (1024 * 1024 * 1024)).ToString("f2") + "GB");                  }              }
Magic Number,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,Create,The following statement contains a magic number: using (var fileStream = new FileStream("../../../README.md"' FileMode.Create))              {                  using (var writer = new StreamWriter(fileStream))                  {                      writer.WriteLine("Ioc Performance");                      writer.WriteLine("===============");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Source code of my performance comparison of the most popular .NET IoC containers:  ");                      writer.WriteLine("[www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison](http://www.palmmedia.de/Blog/2011/8/30/ioc-container-benchmark-performance-comparison)");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Author: Daniel Palme  ");                      writer.WriteLine("Blog: [www.palmmedia.de](http://www.palmmedia.de)  ");                      writer.WriteLine("Twitter: [@danielpalme](http://twitter.com/danielpalme)  ");                      writer.WriteLine(string.Empty);                      writer.WriteLine("Results");                      writer.WriteLine("-------");                        writer.WriteLine("### Explantions");                      writer.WriteLine("**First value**: Time of single-threaded execution in [ms]  ");                      writer.WriteLine("**Second value**: Time of multi-threaded execution in [ms]  ");                        if (benchmarkResults.Any(b => b.SingleThreadedResult.ExtraPolated || b.MultiThreadedResult.ExtraPolated))                      {                          writer.WriteLine("**_*_**: Benchmark was stopped after 1 minute and result is extrapolated.  ");                      }                        if (benchmarkResults.Any(b => b.SingleThreadedResult.Error == "OoM" || b.MultiThreadedResult.Error == "OoM"))                      {                          writer.WriteLine("**OoM**: Benchmark was stopped after an *OutOfMemoryException* was thrown.  ");                      }                        if (benchmarkResults.Any(b => b.SingleThreadedResult.Error == "OoM" || b.MultiThreadedResult.Error == "OoM"))                      {                          writer.WriteLine("**Error**: Benchmark was stopped after an *Exception* was thrown.  ");                      }                        writer.WriteLine("### Basic Features");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Basic"))' benchmarkResults);                        writer.WriteLine("### Advanced Features");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Advanced"))' benchmarkResults);                        writer.WriteLine("### Prepare");                      this.WriteBenchmarks(writer' benchmarks.Where(b => b.GetType().FullName.Contains("Prepare"))' benchmarkResults);                        writer.WriteLine("### Charts");                      writer.WriteLine("![Basic features](http://www.palmmedia.de/content/blogimages/5225c515-2f25-498f-84fe-6c6e931d2042.png)");                      writer.WriteLine("![Advanced features](http://www.palmmedia.de/content/blogimages/e0401485-20c6-462e-b5d4-c9cf854e6bee.png)");                      writer.WriteLine("![Prepare](http://www.palmmedia.de/content/blogimages/67b056a5-9da8-40b4-9ae6-0c838cdac180.png)");                        writer.WriteLine("### Machine");                      writer.WriteLine("The benchmark was executed on the following machine:  ");                      using (ManagementObjectSearcher win32Proc = new ManagementObjectSearcher("select * from Win32_Processor")'                          win32CompSys = new ManagementObjectSearcher("select * from Win32_ComputerSystem")'                              win32Memory = new ManagementObjectSearcher("select * from Win32_PhysicalMemory"))                      {                          foreach (ManagementObject obj in win32Proc.Get())                          {                              writer.WriteLine("**CPU**: " + obj["Name"] + "  ");                          }                      }                        writer.WriteLine("**Memory**: " + ((double)new Microsoft.VisualBasic.Devices.ComputerInfo().TotalPhysicalMemory / (1024 * 1024 * 1024)).ToString("f2") + "GB");                  }              }
Magic Number,IocPerformance.Output,MarkdownOutput,C:\repos\danielpalme_IocPerformance\IocPerformance\Output\MarkdownOutput.cs,WriteBenchmarks,The following statement contains a magic number: foreach (var benchmark in benchmarks)              {                  writer.Write("{0}:|"' new string('-'' benchmark.Name.Length + 3));              }
