Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AsmResolver.Tests.Net.Cil,CilInstructionComparer,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionComparer.cs,Equals,Cyclomatic complexity of the method is 17
Long Statement,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentHashValue,The length of the statement  "            var assemblyRow = header.GetStream<TableStream>().GetTable<AssemblyReferenceTable>()[(int) (mapping[reference].Rid - 1)]; " is 121.
Long Statement,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentVersion,The length of the statement  "            var assemblyRow = header.GetStream<TableStream>().GetTable<AssemblyReferenceTable>()[(int)(mapping[reference].Rid - 1)]; " is 120.
Long Statement,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentAttributes,The length of the statement  "            var assemblyRow = header.GetStream<TableStream>().GetTable<AssemblyReferenceTable>()[(int)(mapping[reference].Rid - 1)]; " is 120.
Long Statement,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentPublicKey,The length of the statement  "            var assemblyRow = header.GetStream<TableStream>().GetTable<AssemblyReferenceTable>()[(int)(mapping[reference].Rid - 1)]; " is 120.
Long Statement,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentName,The length of the statement  "            var assemblyRow = header.GetStream<TableStream>().GetTable<AssemblyReferenceTable>()[(int)(mapping[reference].Rid - 1)]; " is 120.
Long Statement,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentCulture,The length of the statement  "            var assemblyRow = header.GetStream<TableStream>().GetTable<AssemblyReferenceTable>()[(int)(mapping[reference].Rid - 1)]; " is 120.
Long Statement,AsmResolver.Tests.Net.Cts,CustomAttributeTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\CustomAttributeTest.cs,PersistentTypeArgument,The length of the statement  "            Assert.Equal(argument' image.Assembly.CustomAttributes[0].Signature.FixedArguments[0].Elements[0].Value as ITypeDescriptor' _comparer); " is 135.
Long Statement,AsmResolver.Tests.Net.Cts,ParameterDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ParameterDefinitionTest.cs,CreateAndAddDummyParameter,The length of the statement  "                new MethodSignature(new[] {new ParameterSignature(image.TypeSystem.Object)' new ParameterSignature(image.TypeSystem.Object)}' image.TypeSystem.Void)); " is 150.
Long Statement,AsmResolver.Tests.Net.Cts,PropertyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\PropertyDefinitionTest.cs,PersistentAttributes,The length of the statement  "            var propertyRow = header.GetStream<TableStream>().GetTable<PropertyDefinitionTable>()[(int)(mapping[property].Rid - 1)]; " is 120.
Long Statement,AsmResolver.Tests.Net.Cts,PropertyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\PropertyDefinitionTest.cs,PersistentName,The length of the statement  "            var propertyRow = header.GetStream<TableStream>().GetTable<PropertyDefinitionTable>()[(int)(mapping[property].Rid - 1)]; " is 120.
Long Statement,AsmResolver.Tests.Net.Cts,ReferenceImporterTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ReferenceImporterTest.cs,ImportReflectionField,The length of the statement  "            var newReference = importer.ImportField(typeof(string).GetField("Empty"' System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public)); " is 153.
Long Statement,AsmResolver.Tests.Net.Cts,SignatureComparerTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\SignatureComparerTest.cs,VerifyMatching,The length of the statement  "            Assert.False(_comparer.Equals(dummyType' original)' "The dummy type for " + original.FullName + " matched the original."); " is 122.
Long Statement,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedSmallMethod,The length of the statement  "            var mainMethod = image.Assembly.Modules[0].TopLevelTypes.First(x => x.Name == TypeName).Methods.First(x => x.Name == MainMethodName); " is 133.
Long Statement,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedFatMethodVariables,The length of the statement  "            var mainMethod = image.Assembly.Modules[0].TopLevelTypes.First(x => x.Name == TypeName).Methods.First(x => x.Name == MainMethodName); " is 133.
Long Statement,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedFatMethodExceptionHandlers,The length of the statement  "            var mainMethod = image.Assembly.Modules[0].TopLevelTypes.First(x => x.Name == TypeName).Methods.First(x => x.Name == MainMethodName); " is 133.
Long Statement,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedFatMethodExceptionHandlers,The length of the statement  "                CilInstruction.Create(CilOpCodes.Newobj' importer.ImportMethod(typeof(Exception).GetConstructor(new[] {typeof(string)})))' " is 122.
Long Statement,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedFatMethodExceptionHandlers,The length of the statement  "                CilInstruction.Create(CilOpCodes.Call' importer.ImportMethod(typeof(Console).GetMethod("WriteLine"' new[] {typeof(string)})))' " is 126.
Long Statement,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentNativeMethod,The length of the statement  "            var mainMethod = image.Assembly.Modules[0].TopLevelTypes.First(x => x.Name == TypeName).Methods.First(x => x.Name == MainMethodName); " is 133.
Long Statement,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneSimpleClassInternalReferences,The length of the statement  "            var simpleClass = cloner.CloneType(sourceImage.Assembly.Modules[0].TopLevelTypes.First(x => x.Name == "SimpleClassInternalReferences")); " is 136.
Long Statement,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneNestedClasses,The length of the statement  "            var simpleClass = cloner.CloneType(sourceImage.Assembly.Modules[0].TopLevelTypes.First(x => x.Name == "ClassWithNestedClasses")); " is 129.
Long Statement,AsmResolver.Tests.Net,NetAssemblyFactoryTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\NetAssemblyFactoryTest.cs,ImportDirectory,The length of the statement  "            Assert.Contains("_CorDllMain"' assembly.ImportDirectory.ModuleImports.First(x => x.Name == "mscoree.dll").SymbolImports.Select(x => x.HintName.Name)); " is 150.
Long Statement,AsmResolver.Tests.Net,NetAssemblyFactoryTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\NetAssemblyFactoryTest.cs,ImportDirectory,The length of the statement  "            Assert.Contains("_CorExeMain"' assembly.ImportDirectory.ModuleImports.First(x => x.Name == "mscoree.dll").SymbolImports.Select(x => x.HintName.Name)); " is 150.
Long Statement,AsmResolver.Tests.Net,OpenExistingAssembly,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\OpenExistingAssembly.cs,ReadFieldRvaArray,The length of the statement  "            var fieldInitializer = typeof(Class1).Assembly.GetTypes().SelectMany(x => x.GetFields(BindingFlags.Static | BindingFlags.NonPublic)) " is 132.
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: i <= 256
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: instructions.AddRange(new[]              {                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[0])'                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[1])'                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[255])'                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[256])'              });
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: instructions.AddRange(new[]              {                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[0])'                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[1])'                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[255])'                  CilInstruction.Create(CilOpCodes.Ldarg' method.Signature.Parameters[256])'              });
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: Assert.Equal(CilCode.Ldarg_S' instructions[2].OpCode.Code);
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: Assert.Equal(method.Signature.Parameters[255]' instructions[2].Operand);
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: Assert.Equal(method.Signature.Parameters[255]' instructions[2].Operand);
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: Assert.Equal(CilCode.Ldarg' instructions[3].OpCode.Code);
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: Assert.Equal(method.Signature.Parameters[256]' instructions[3].Operand);
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosArguments,The following statement contains a magic number: Assert.Equal(method.Signature.Parameters[256]' instructions[3].Operand);
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosThisParameter,The following statement contains a magic number: i < 2
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosThisParameter,The following statement contains a magic number: Assert.Equal(CilCode.Ldarg_2' instructions[2].OpCode.Code);
Magic Number,AsmResolver.Tests.Net.Cil,CilInstructionCollectionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilInstructionCollectionTest.cs,OptimizeMacrosThisParameter,The following statement contains a magic number: Assert.Null(instructions[2].Operand);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,ComputeMaxStackTestSimple,The following statement contains a magic number: Assert.Equal(2' methodBody.ComputeMaxStack());
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,ComputeMaxStackConditionalBranch,The following statement contains a magic number: Assert.Equal(3' methodBody.ComputeMaxStack());
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,ComputeMaxStackLoop,The following statement contains a magic number: Assert.Equal(2' methodBody.ComputeMaxStack());
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,ComputeMaxStackExceptionHandlers,The following statement contains a magic number: Assert.Equal(2' methodBody.ComputeMaxStack());
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,PersistentVariables,The following statement contains a magic number: Assert.Equal(2' localVarSig.Variables.Count);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeInts,The following statement contains a magic number: Assert.Equal(longOperand' instructions[2].Operand);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeReals,The following statement contains a magic number: const float shortOperand = 0.1234F;
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeReals,The following statement contains a magic number: const double operand = 0.1234;
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeBranchTarget,The following statement contains a magic number: Assert.Equal(target2.Offset' ((CilInstruction) instructions[4].Operand).Offset);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeSwitch,The following statement contains a magic number: Assert.Equal(target3.Offset' targets[2].Offset);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeVar,The following statement contains a magic number: Assert.Equal(var2.VariableType' ((VariableSignature)instructions[2].Operand).VariableType' _comparer);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeVar,The following statement contains a magic number: Assert.Equal(var2.VariableType' ((VariableSignature)instructions[3].Operand).VariableType' _comparer);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeArgument,The following statement contains a magic number: Assert.Equal(param2.ParameterType' ((ParameterSignature)instructions[2].Operand).ParameterType' _comparer);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeArgument,The following statement contains a magic number: Assert.Equal(param2.ParameterType' ((ParameterSignature)instructions[3].Operand).ParameterType' _comparer);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeMethod,The following statement contains a magic number: Assert.Equal(genericInstanceMethod' instructions[2].Operand as IMemberReference' _comparer);
Magic Number,AsmResolver.Tests.Net.Cil,CilMethodBodyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cil\CilMethodBodyTest.cs,OperandTypeType,The following statement contains a magic number: Assert.Equal(genericType' instructions[2].Operand as ITypeDescriptor' _comparer);
Magic Number,AsmResolver.Tests.Net.Cts,AssemblyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyDefinitionTest.cs,PersistentVersion,The following statement contains a magic number: var newVersion = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,AssemblyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyDefinitionTest.cs,PersistentVersion,The following statement contains a magic number: var newVersion = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,AssemblyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyDefinitionTest.cs,PersistentVersion,The following statement contains a magic number: var newVersion = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentVersion,The following statement contains a magic number: var newVersion = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentVersion,The following statement contains a magic number: var newVersion = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,AssemblyReferenceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\AssemblyReferenceTest.cs,PersistentVersion,The following statement contains a magic number: var newVersion = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,CustomAttributeTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\CustomAttributeTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,CustomAttributeTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\CustomAttributeTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,CustomAttributeTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\CustomAttributeTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentConstant,The following statement contains a magic number: var newConstant = new Constant(ElementType.U1' new DataBlobSignature(new byte [] { 42 }));
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,FieldDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\FieldDefinitionTest.cs,PersistentRva,The following statement contains a magic number: byte[] data = new byte[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 0 };
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,GenericInstantiationTest,The following statement contains a magic number: var scope = new AssemblyReference("SomeAssemblyRef"' new Version(1' 2' 3' 4));
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,GenericInstantiationTest,The following statement contains a magic number: var scope = new AssemblyReference("SomeAssemblyRef"' new Version(1' 2' 3' 4));
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,GenericInstantiationTest,The following statement contains a magic number: var scope = new AssemblyReference("SomeAssemblyRef"' new Version(1' 2' 3' 4));
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,ArrayType,The following statement contains a magic number: var signature = new ArrayTypeSignature(genericParameter)              {                  Dimensions = {new ArrayDimension(10' 0)}              };
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,ArrayType,The following statement contains a magic number: Assert.Equal(new ArrayTypeSignature(GetTypeArguments(parameterType)[index])              {                  Dimensions = {new ArrayDimension(10'0)}              }' signature.InstantiateGenericTypes(_context)' Comparer);
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,GenericType,The following statement contains a magic number: var genericInstance = new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  new GenericParameterSignature(parameterTypes[0]' parameterIndices[0])'                  new GenericParameterSignature(parameterTypes[1]' parameterIndices[1])'                  new GenericParameterSignature(parameterTypes[2]' parameterIndices[2])              );
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,GenericType,The following statement contains a magic number: var genericInstance = new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  new GenericParameterSignature(parameterTypes[0]' parameterIndices[0])'                  new GenericParameterSignature(parameterTypes[1]' parameterIndices[1])'                  new GenericParameterSignature(parameterTypes[2]' parameterIndices[2])              );
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,GenericType,The following statement contains a magic number: Assert.Equal(new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  GetTypeArguments(parameterTypes[0])[parameterIndices[0]]'                  GetTypeArguments(parameterTypes[1])[parameterIndices[1]]'                  GetTypeArguments(parameterTypes[2])[parameterIndices[2]]              )' genericInstance.InstantiateGenericTypes(_context)' Comparer);
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,GenericType,The following statement contains a magic number: Assert.Equal(new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  GetTypeArguments(parameterTypes[0])[parameterIndices[0]]'                  GetTypeArguments(parameterTypes[1])[parameterIndices[1]]'                  GetTypeArguments(parameterTypes[2])[parameterIndices[2]]              )' genericInstance.InstantiateGenericTypes(_context)' Comparer);
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: var genericInstance = new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  new GenericParameterSignature(parameterTypes[0]' parameterIndices[0])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      new GenericParameterSignature(parameterTypes[1]' parameterIndices[1]))'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      new GenericParameterSignature(parameterTypes[2]' parameterIndices[2])'                      new GenericParameterSignature(parameterTypes[3]' parameterIndices[3]))              );
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: var genericInstance = new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  new GenericParameterSignature(parameterTypes[0]' parameterIndices[0])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      new GenericParameterSignature(parameterTypes[1]' parameterIndices[1]))'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      new GenericParameterSignature(parameterTypes[2]' parameterIndices[2])'                      new GenericParameterSignature(parameterTypes[3]' parameterIndices[3]))              );
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: var genericInstance = new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  new GenericParameterSignature(parameterTypes[0]' parameterIndices[0])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      new GenericParameterSignature(parameterTypes[1]' parameterIndices[1]))'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      new GenericParameterSignature(parameterTypes[2]' parameterIndices[2])'                      new GenericParameterSignature(parameterTypes[3]' parameterIndices[3]))              );
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: var genericInstance = new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  new GenericParameterSignature(parameterTypes[0]' parameterIndices[0])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      new GenericParameterSignature(parameterTypes[1]' parameterIndices[1]))'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      new GenericParameterSignature(parameterTypes[2]' parameterIndices[2])'                      new GenericParameterSignature(parameterTypes[3]' parameterIndices[3]))              );
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: Assert.Equal(new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  GetTypeArguments(parameterTypes[0])[parameterIndices[0]]'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      GetTypeArguments(parameterTypes[1])[parameterIndices[1]])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      GetTypeArguments(parameterTypes[2])[parameterIndices[2]]'                      GetTypeArguments(parameterTypes[3])[parameterIndices[3]])              )' genericInstance.InstantiateGenericTypes(_context)' Comparer);
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: Assert.Equal(new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  GetTypeArguments(parameterTypes[0])[parameterIndices[0]]'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      GetTypeArguments(parameterTypes[1])[parameterIndices[1]])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      GetTypeArguments(parameterTypes[2])[parameterIndices[2]]'                      GetTypeArguments(parameterTypes[3])[parameterIndices[3]])              )' genericInstance.InstantiateGenericTypes(_context)' Comparer);
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: Assert.Equal(new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  GetTypeArguments(parameterTypes[0])[parameterIndices[0]]'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      GetTypeArguments(parameterTypes[1])[parameterIndices[1]])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      GetTypeArguments(parameterTypes[2])[parameterIndices[2]]'                      GetTypeArguments(parameterTypes[3])[parameterIndices[3]])              )' genericInstance.InstantiateGenericTypes(_context)' Comparer);
Magic Number,AsmResolver.Tests.Net.Cts,GenericInstantiationTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\GenericInstantiationTest.cs,NestedGenericTypes,The following statement contains a magic number: Assert.Equal(new GenericInstanceTypeSignature(_importer.ImportType(typeof(Tuple<''>))'                  GetTypeArguments(parameterTypes[0])[parameterIndices[0]]'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(List<>))'                      GetTypeArguments(parameterTypes[1])[parameterIndices[1]])'                  new GenericInstanceTypeSignature(_importer.ImportType(typeof(Dictionary<'>))'                      GetTypeArguments(parameterTypes[2])[parameterIndices[2]]'                      GetTypeArguments(parameterTypes[3])[parameterIndices[3]])              )' genericInstance.InstantiateGenericTypes(_context)' Comparer);
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentData,The following statement contains a magic number: var newData = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData1 = new byte[] {1' 2' 3' 4' 5' 6' 7' 8' 9' 0};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,ManifestResourceTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ManifestResourceTest.cs,PersistentDataMultipleResources,The following statement contains a magic number: var newData2 = new byte[] {11' 12' 13' 14' 15' 16' 17' 18' 19' 20};
Magic Number,AsmResolver.Tests.Net.Cts,MethodDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\MethodDefinitionTest.cs,PersistentParameters,The following statement contains a magic number: method.Parameters.Add(new ParameterDefinition(2' "param2"' ParameterAttributes.Optional));
Magic Number,AsmResolver.Tests.Net.Cts,MethodDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\MethodDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,MethodDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\MethodDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,MethodDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\MethodDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,ParameterDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ParameterDefinitionTest.cs,PersistentSequence,The following statement contains a magic number: const int value = 2;
Magic Number,AsmResolver.Tests.Net.Cts,ParameterDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ParameterDefinitionTest.cs,PersistentConstant,The following statement contains a magic number: var newConstant = new Constant(ElementType.U1' new DataBlobSignature(new byte [] { 42 }));
Magic Number,AsmResolver.Tests.Net.Cts,PropertyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\PropertyDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,PropertyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\PropertyDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,PropertyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\PropertyDefinitionTest.cs,PersistentExtraData,The following statement contains a magic number: var extraData = new byte[] {1' 2' 3' 4};
Magic Number,AsmResolver.Tests.Net.Cts,PropertyDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\PropertyDefinitionTest.cs,PersistentConstant,The following statement contains a magic number: var constantValue = BitConverter.GetBytes(1337);
Magic Number,AsmResolver.Tests.Net.Cts,ReferenceImporterTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ReferenceImporterTest.cs,ImportNewAssembly,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,ReferenceImporterTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ReferenceImporterTest.cs,ImportNewAssembly,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,ReferenceImporterTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ReferenceImporterTest.cs,ImportNewAssembly,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,ReferenceImporterTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ReferenceImporterTest.cs,ImportExistingAssembly,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,ReferenceImporterTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ReferenceImporterTest.cs,ImportExistingAssembly,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,ReferenceImporterTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\ReferenceImporterTest.cs,ImportExistingAssembly,The following statement contains a magic number: var version = new Version(1' 2' 3' 4);
Magic Number,AsmResolver.Tests.Net.Cts,TypeDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\TypeDefinitionTest.cs,PersistentFields,The following statement contains a magic number: i < 5
Magic Number,AsmResolver.Tests.Net.Cts,TypeDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\TypeDefinitionTest.cs,PersistentMethods,The following statement contains a magic number: i < 5
Magic Number,AsmResolver.Tests.Net.Cts,TypeDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\TypeDefinitionTest.cs,PersistentClassLayout,The following statement contains a magic number: type.ClassLayout = new ClassLayout(20' 1);
Magic Number,AsmResolver.Tests.Net.Cts,TypeDefinitionTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\TypeDefinitionTest.cs,PersistentClassLayout,The following statement contains a magic number: Assert.Equal(20u' type.ClassLayout.ClassSize);
Magic Number,AsmResolver.Tests.Net.Cts,SignatureComparerTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\SignatureComparerTest.cs,CreateAssemblyReference,The following statement contains a magic number: return new AssemblyReference("SomeLibrary"' new Version(1' 3' 3' 7)) { Culture = "en-GB" };
Magic Number,AsmResolver.Tests.Net.Cts,SignatureComparerTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\SignatureComparerTest.cs,CreateAssemblyReference,The following statement contains a magic number: return new AssemblyReference("SomeLibrary"' new Version(1' 3' 3' 7)) { Culture = "en-GB" };
Magic Number,AsmResolver.Tests.Net.Cts,SignatureComparerTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\SignatureComparerTest.cs,CreateAssemblyReference,The following statement contains a magic number: return new AssemblyReference("SomeLibrary"' new Version(1' 3' 3' 7)) { Culture = "en-GB" };
Magic Number,AsmResolver.Tests.Net.Cts,SignatureComparerTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\SignatureComparerTest.cs,CreateAssemblyDefinition,The following statement contains a magic number: return new AssemblyDefinition("SomeLibrary"' new Version(1' 3' 3' 7)) { Culture = "en-GB" };
Magic Number,AsmResolver.Tests.Net.Cts,SignatureComparerTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\SignatureComparerTest.cs,CreateAssemblyDefinition,The following statement contains a magic number: return new AssemblyDefinition("SomeLibrary"' new Version(1' 3' 3' 7)) { Culture = "en-GB" };
Magic Number,AsmResolver.Tests.Net.Cts,SignatureComparerTests,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Cts\SignatureComparerTest.cs,CreateAssemblyDefinition,The following statement contains a magic number: return new AssemblyDefinition("SomeLibrary"' new Version(1' 3' 3' 7)) { Culture = "en-GB" };
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentNativeMethod,The following statement contains a magic number: nativeBody.Instructions.Add(new X86Instruction              {                  Mnemonic = X86Mnemonic.Mov'                  OpCode = X86OpCodes.Mov_Eax_Imm1632'                  Operand1 = new X86Operand(X86Register.Eax)'                  Operand2 = new X86Operand(1337)'              });
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentNativeResources,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentNativeResources,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentNativeResources,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentNativeResources,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentNativeResources,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedResource,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedResource,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedResource,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedResource,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentManagedResource,The following statement contains a magic number: var contents = new byte[] {0' 1' 2' 3' 4' 5' 6};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentStrongName,The following statement contains a magic number: var strongNameData = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8' 9};
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentVTables,The following statement contains a magic number: i < 10
Magic Number,AsmResolver.Tests.Net.Emit,CompactNetAssemblyTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\CompactNetAssemblyTest.cs,PersistentExports,The following statement contains a magic number: var exportDirectory = new ImageExportDirectory              {                  Name = "somefile.dll"'                  OrdinalBase = 2'                  Exports =                  {                      new ImageSymbolExport(0x1234)'                      new ImageSymbolExport(0x5678' "MyNamedExport1")'                      new ImageSymbolExport(0x9ABC)'                      new ImageSymbolExport(0xDEF0' "MyNamedExport2")'                  }              };
Magic Number,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneSimpleClass,The following statement contains a magic number: main.CilMethodBody.Instructions.Add(CilInstruction.Create(CilOpCodes.Ldc_I4' 12));
Magic Number,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneSimpleClass,The following statement contains a magic number: _context.VerifyOutput(assembly' "abc" + 12);
Magic Number,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneSimpleClassInternalReferences,The following statement contains a magic number: main.CilMethodBody.Instructions.Add(CilInstruction.Create(CilOpCodes.Ldc_I4' 12));
Magic Number,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneSimpleClassInternalReferences,The following statement contains a magic number: _context.VerifyOutput(assembly' "abc" + 12);
Magic Number,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneNestedClasses,The following statement contains a magic number: main.CilMethodBody.Instructions.Add(CilInstruction.Create(CilOpCodes.Ldc_I4' 12));
Magic Number,AsmResolver.Tests.Net.Emit,MemberClonerTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MemberClonerTest.cs,CloneNestedClasses,The following statement contains a magic number: _context.VerifyOutput(assembly' "abc" + 12);
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: var extraBlobs = new BlobSignature[]              {                  new DataBlobSignature(new byte[] {1' 2' 3})'                  new DataBlobSignature(new byte[] {4' 5' 6})              };
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: var extraBlobs = new BlobSignature[]              {                  new DataBlobSignature(new byte[] {1' 2' 3})'                  new DataBlobSignature(new byte[] {4' 5' 6})              };
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: var extraBlobs = new BlobSignature[]              {                  new DataBlobSignature(new byte[] {1' 2' 3})'                  new DataBlobSignature(new byte[] {4' 5' 6})              };
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: var extraBlobs = new BlobSignature[]              {                  new DataBlobSignature(new byte[] {1' 2' 3})'                  new DataBlobSignature(new byte[] {4' 5' 6})              };
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: var extraBlobs = new BlobSignature[]              {                  new DataBlobSignature(new byte[] {1' 2' 3})'                  new DataBlobSignature(new byte[] {4' 5' 6})              };
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: Assert.Equal(new byte[] {1' 2' 3}' blobStream.GetBlobByOffset(builder.GetBlobOffset(extraBlobs[0])));
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: Assert.Equal(new byte[] {1' 2' 3}' blobStream.GetBlobByOffset(builder.GetBlobOffset(extraBlobs[0])));
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: Assert.Equal(new byte[] {4' 5' 6}' blobStream.GetBlobByOffset(builder.GetBlobOffset(extraBlobs[1])));
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: Assert.Equal(new byte[] {4' 5' 6}' blobStream.GetBlobByOffset(builder.GetBlobOffset(extraBlobs[1])));
Magic Number,AsmResolver.Tests.Net.Emit,MetadataBuilderTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\MetadataBuilderTest.cs,CustomBlobs,The following statement contains a magic number: Assert.Equal(new byte[] {4' 5' 6}' blobStream.GetBlobByOffset(builder.GetBlobOffset(extraBlobs[1])));
Magic Number,AsmResolver.Tests.Net.Emit,TemporaryDirectoryFixture,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Emit\TemporaryDirectoryFixture.cs,GenerateRandomName,The following statement contains a magic number: return string.Concat(Alphabet.OrderBy(x => Guid.NewGuid()).Take(15));
Magic Number,AsmResolver.Tests.Net,MetadataLockTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\MetadataLockTest.cs,LockMetadata,The following statement contains a magic number: tableStream.GetTable<TypeReferenceTable>().Add(new MetadataRow<uint' uint' uint>              {                  Column1 = 1'                  Column2 = 2'                  Column3 = 3'              });
Magic Number,AsmResolver.Tests.Net,MetadataLockTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\MetadataLockTest.cs,LockMetadata,The following statement contains a magic number: tableStream.GetTable<TypeReferenceTable>().Add(new MetadataRow<uint' uint' uint>              {                  Column1 = 1'                  Column2 = 2'                  Column3 = 3'              });
Magic Number,AsmResolver.Tests.Net,MetadataLockTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\MetadataLockTest.cs,LockMetadata,The following statement contains a magic number: Assert.Throws<MetadataLockedException>(() =>              {                  tableStream.GetTable<TypeReferenceTable>()                      .Add(new MetadataRow<uint' uint' uint>                      {                          Column1 = 1'                          Column2 = 2'                          Column3 = 3'                      });              });
Magic Number,AsmResolver.Tests.Net,MetadataLockTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\MetadataLockTest.cs,LockMetadata,The following statement contains a magic number: Assert.Throws<MetadataLockedException>(() =>              {                  tableStream.GetTable<TypeReferenceTable>()                      .Add(new MetadataRow<uint' uint' uint>                      {                          Column1 = 1'                          Column2 = 2'                          Column3 = 3'                      });              });
Magic Number,AsmResolver.Tests.Net,MetadataLockTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\MetadataLockTest.cs,LockMetadata,The following statement contains a magic number: Assert.Throws<MetadataLockedException>(() =>              {                  tableStream.GetTable<TypeReferenceTable>()[0].Column2 = 4;              });
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEmptyTable,The following statement contains a magic number: const uint newValue = 123;
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertSmaller,The following statement contains a magic number: var sortedTable = new DummySortedTable {new MetadataRow<uint> {Column1 = 123}};
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertSmaller,The following statement contains a magic number: const uint newValue = 10;
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertSmaller,The following statement contains a magic number: Assert.Equal(2' sortedTable.Count);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBigger,The following statement contains a magic number: var sortedTable = new DummySortedTable {new MetadataRow<uint> {Column1 = 123}};
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBigger,The following statement contains a magic number: const uint newValue = 200;
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBigger,The following statement contains a magic number: Assert.Equal(2' sortedTable.Count);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: const uint newValue = 25;
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: Assert.Equal(6' sortedTable.Count);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoMiddleOfList,The following statement contains a magic number: Assert.Equal(newValue' sortedTable[2].Column1);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoBeginOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoBeginOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoBeginOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoBeginOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoBeginOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoBeginOfList,The following statement contains a magic number: Assert.Equal(6' sortedTable.Count);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 20}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 40}'                  new MetadataRow<uint> {Column1 = 50}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: const uint newValue = 60;
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: Assert.Equal(6' sortedTable.Count);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertIntoEndOfList,The following statement contains a magic number: Assert.Equal(newValue' sortedTable[5].Column1);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 10}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: const uint newValue = 60;
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: Assert.Equal(6' sortedTable.Count);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertAfterDuplicates,The following statement contains a magic number: Assert.Equal(newValue' sortedTable[5].Column1);
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBeforeDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 60}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBeforeDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 60}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBeforeDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 60}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBeforeDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 60}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBeforeDuplicates,The following statement contains a magic number: var sortedTable = new DummySortedTable              {                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 30}'                  new MetadataRow<uint> {Column1 = 60}'              };
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBeforeDuplicates,The following statement contains a magic number: const uint newValue = 10;
Magic Number,AsmResolver.Tests.Net.Metadata,SortedTableTest,D:\research\architectureSmells\repos\JerreS_AsmResolver\Tests\Net\AsmResolver.Net.Tests\Metadata\SortedTableTest.cs,InsertBeforeDuplicates,The following statement contains a magic number: Assert.Equal(6' sortedTable.Count);
