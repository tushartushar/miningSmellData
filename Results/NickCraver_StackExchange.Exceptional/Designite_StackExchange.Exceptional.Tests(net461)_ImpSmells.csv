Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,StackExchange.Exceptional.Tests,TheoryDiscoverer,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Helpers\Attributes.cs,CreateTestCasesForSkippedDataRow,The method has 5 parameters. Parameters: discoveryOptions' testMethod' theoryAttribute' dataRow' skipReason
Long Parameter List,StackExchange.Exceptional.Tests,SkippableTestCase,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Helpers\Attributes.cs,SkippableTestCase,The method has 5 parameters. Parameters: diagnosticMessageSink' defaultMethodDisplay' defaultMethodDisplayOptions' testMethod' testMethodArguments
Long Parameter List,StackExchange.Exceptional.Tests,SkippableTestCase,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Helpers\Attributes.cs,RunAsync,The method has 5 parameters. Parameters: diagnosticMessageSink' messageBus' constructorArguments' aggregator' cancellationTokenSource
Long Parameter List,StackExchange.Exceptional.Tests,SkippableTheoryTestCase,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Helpers\Attributes.cs,RunAsync,The method has 5 parameters. Parameters: diagnosticMessageSink' messageBus' constructorArguments' aggregator' cancellationTokenSource
Long Parameter List,StackExchange.Exceptional.Tests,NamedSkippedDataRowTestCase,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Helpers\Attributes.cs,NamedSkippedDataRowTestCase,The method has 6 parameters. Parameters: diagnosticMessageSink' defaultMethodDisplay' defaultMethodDisplayOptions' testMethod' skipReason' testMethodArguments
Long Statement,StackExchange.Exceptional.Tests,SkippableTestCase,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Helpers\Attributes.cs,RunAsync,The length of the statement  "            var result = await base.RunAsync(diagnosticMessageSink' skipMessageBus' constructorArguments' aggregator' cancellationTokenSource).ConfigureAwait(false); " is 153.
Long Statement,StackExchange.Exceptional.Tests,SkippableTheoryTestCase,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Helpers\Attributes.cs,RunAsync,The length of the statement  "            var result = await base.RunAsync(diagnosticMessageSink' skipMessageBus' constructorArguments' aggregator' cancellationTokenSource).ConfigureAwait(false); " is 153.
Empty Catch Block,StackExchange.Exceptional.Tests.Storage,MongoDBFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\MongoDBErrorStoreTest.cs,Dispose,The method has an empty catch block.
Empty Catch Block,StackExchange.Exceptional.Tests.Storage,MySqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\MySQLErrorStoreTest.cs,Dispose,The method has an empty catch block.
Empty Catch Block,StackExchange.Exceptional.Tests.Storage,PostgreSqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\PostgreSQLErrorStoreTest.cs,Dispose,The method has an empty catch block.
Empty Catch Block,StackExchange.Exceptional.Tests.Storage,SqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\SQLErrorStoreTest.cs,Dispose,The method has an empty catch block.
Magic Number,StackExchange.Exceptional.Tests.Storage,MongoDBFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\MongoDBErrorStoreTest.cs,MongoDBFixture,The following statement contains a magic number: TableName = "Test" + Guid.NewGuid().ToString("N").Substring(24);
Magic Number,StackExchange.Exceptional.Tests.Storage,MongoDBFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\MongoDBErrorStoreTest.cs,MongoDBFixture,The following statement contains a magic number: settings.ConnectTimeout = settings.SocketTimeout = settings.ServerSelectionTimeout = TimeSpan.FromSeconds(2);
Magic Number,StackExchange.Exceptional.Tests.Storage,MySqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\MySQLErrorStoreTest.cs,MySqlFixture,The following statement contains a magic number: var csb = new MySqlConnectionStringBuilder(TestConfig.Current.MySQLConnectionString)                  {                      ConnectionTimeout = 2000                  };
Magic Number,StackExchange.Exceptional.Tests.Storage,MySqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\MySQLErrorStoreTest.cs,MySqlFixture,The following statement contains a magic number: TableName = "Test" + Guid.NewGuid().ToString("N").Substring(24);
Magic Number,StackExchange.Exceptional.Tests.Storage,PostgreSqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\PostgreSQLErrorStoreTest.cs,PostgreSqlFixture,The following statement contains a magic number: var csb = new NpgsqlConnectionStringBuilder(TestConfig.Current.PostgreSqlConnectionString)                  {                      Timeout = 2                  };
Magic Number,StackExchange.Exceptional.Tests.Storage,PostgreSqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\PostgreSQLErrorStoreTest.cs,PostgreSqlFixture,The following statement contains a magic number: TableName = $@"public.""Test{Guid.NewGuid().ToString("N").Substring(24)}""";
Magic Number,StackExchange.Exceptional.Tests.Storage,SqlFixture,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\SQLErrorStoreTest.cs,SqlFixture,The following statement contains a magic number: var csb = new SqlConnectionStringBuilder(TestConfig.Current.SQLServerConnectionString)                  {                      ConnectTimeout = 2000                  };
Magic Number,StackExchange.Exceptional.Tests.Storage,StoreBaseTest,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\StoreBaseTest.cs,DeleteAllErrorsAsync,The following statement contains a magic number: Assert.Equal(3' await store.GetCountAsync().ConfigureAwait(false));
Magic Number,StackExchange.Exceptional.Tests.Storage,StoreBaseTest,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\StoreBaseTest.cs,DuplicateCount,The following statement contains a magic number: Assert.Equal(3' storedError.DuplicateCount);
Magic Number,StackExchange.Exceptional.Tests.Storage,StoreBaseTest,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\StoreBaseTest.cs,GetCountAsync,The following statement contains a magic number: Assert.Equal(2' await store.GetCountAsync().ConfigureAwait(false));
Magic Number,StackExchange.Exceptional.Tests.Storage,StoreBaseTest,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\StoreBaseTest.cs,GetCountAsync,The following statement contains a magic number: Assert.Equal(2' await store.GetCountAsync(DateTime.UtcNow.AddMinutes(-10)).ConfigureAwait(false));
Magic Number,StackExchange.Exceptional.Tests.Storage,StoreBaseTest,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\StoreBaseTest.cs,GetCountAsync,The following statement contains a magic number: Assert.Equal(2' await store.GetCountAsync(DateTime.UtcNow.AddMinutes(-10)).ConfigureAwait(false));
Magic Number,StackExchange.Exceptional.Tests.Storage,StoreBaseTest,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\tests\StackExchange.Exceptional.Tests\Storage\StoreBaseTest.cs,GetCountAsync,The following statement contains a magic number: Assert.Equal(0' await store.GetCountAsync(DateTime.UtcNow.AddMinutes(10)).ConfigureAwait(false));
