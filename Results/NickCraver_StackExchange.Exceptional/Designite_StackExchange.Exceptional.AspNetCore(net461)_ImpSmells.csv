Implementation smell,Namespace,Class,File,Method,Description
Long Method,StackExchange.Exceptional,AspNetCoreExtensions,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\AspNetCoreExtensions.cs,SetProperties,The method has 122 lines of code.
Complex Method,StackExchange.Exceptional,AspNetCoreExtensions,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\AspNetCoreExtensions.cs,SetProperties,Cyclomatic complexity of the method is 14
Complex Method,StackExchange.Exceptional,ExceptionalMiddleware,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\ExceptionalMiddleware.cs,HandleRequestAsync,Cyclomatic complexity of the method is 14
Long Parameter List,StackExchange.Exceptional,AspNetCoreExtensions,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\AspNetCoreExtensions.cs,Log,The method has 6 parameters. Parameters: ex' context' category' rollupPerServer' customData' applicationName
Long Parameter List,StackExchange.Exceptional,AspNetCoreExtensions,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\AspNetCoreExtensions.cs,LogAsync,The method has 6 parameters. Parameters: ex' context' category' rollupPerServer' customData' applicationName
Long Statement,StackExchange.Exceptional,ExceptionalMiddleware,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\ExceptionalMiddleware.cs,HandleRequestAsync,The length of the statement  "            string TrimEnd(string s' string value) => s.EndsWith(value) ? s.Remove(s.LastIndexOf(value' StringComparison.Ordinal)) : s; " is 123.
Long Statement,StackExchange.Exceptional,ExceptionalMiddleware,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\ExceptionalMiddleware.cs,HandleRequestAsync,The length of the statement  "                            await Page(new ErrorDetailPage(error' settings' store' TrimEnd($"{context.Request.PathBase}{context.Request.Path}"' "/info")' guid)).ConfigureAwait(false); " is 155.
Long Statement,StackExchange.Exceptional,ExceptionalMiddleware,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\ExceptionalMiddleware.cs,HandleRequestAsync,The length of the statement  "                            await Page(new ErrorListPage(store' settings' $"{context.Request.PathBase}{context.Request.Path}"' await store.GetAllAsync().ConfigureAwait(false))).ConfigureAwait(false); " is 171.
Magic Number,StackExchange.Exceptional,ExceptionalMiddleware,C:\research\architectureSmells\repos\NickCraver_StackExchange.Exceptional\src\StackExchange.Exceptional.AspNetCore\ExceptionalMiddleware.cs,HandleRequestAsync,The following statement contains a magic number: switch (context.Request.Method)              {                  case "POST":                      errorGuid = context.Request.HasFormContentType ? context.Request.Form["guid"].ToString() : string.Empty;                      switch (resource)                      {                          case KnownRoutes.Delete:                              await JsonResult(await store.DeleteAsync(errorGuid.ToGuid()).ConfigureAwait(false)).ConfigureAwait(false);                              return;                          case KnownRoutes.DeleteAll:                              await JsonResult(await store.DeleteAllAsync().ConfigureAwait(false)).ConfigureAwait(false);                              return;                          case KnownRoutes.DeleteList:                              await JsonResult(await store.DeleteAsync(GetFormGuids()).ConfigureAwait(false)).ConfigureAwait(false);                              return;                          case KnownRoutes.Protect:                              await JsonResult(await store.ProtectAsync(errorGuid.ToGuid()).ConfigureAwait(false)).ConfigureAwait(false);                              return;                          case KnownRoutes.ProtectList:                              await JsonResult(await store.ProtectAsync(GetFormGuids()).ConfigureAwait(false)).ConfigureAwait(false);                              return;                          default:                              await Content("Invalid POST Request").ConfigureAwait(false);                              return;                      }                  case "GET":                      errorGuid = context.Request.Query["guid"].ToString() ?? string.Empty;                      switch (resource)                      {                          case KnownRoutes.Info:                              var guid = errorGuid.ToGuid();                              var error = errorGuid.HasValue() ? await store.GetAsync(guid).ConfigureAwait(false) : null;                              await Page(new ErrorDetailPage(error' settings' store' TrimEnd($"{context.Request.PathBase}{context.Request.Path}"' "/info")' guid)).ConfigureAwait(false);                              return;                          case KnownRoutes.Json:                              context.Response.ContentType = "application/json";                              DateTime? since = long.TryParse(context.Request.Headers["since"]' out long sinceLong)                                       ? new DateTime(1970' 1' 1' 0' 0' 0).AddSeconds(sinceLong)                                       : (DateTime?)null;                                var errors = await store.GetAllAsync().ConfigureAwait(false);                              if (since.HasValue)                              {                                  errors = errors.Where(e => e.CreationDate >= since).ToList();                              }                              await context.Response.WriteAsync(JsonConvert.SerializeObject(errors)).ConfigureAwait(false);                              return;                          case KnownRoutes.Css:                              await Resource(Resources.BundleCss).ConfigureAwait(false);                              return;                          case KnownRoutes.Js:                              await Resource(Resources.BundleJs).ConfigureAwait(false);                              return;                          case KnownRoutes.Test:                              throw new Exception("This is a test. Please disregard. If this were a real emergency' it'd have a different message.");                          default:                              context.Response.Headers["Cache-Control"] = "no-cache' no-store";                              await Page(new ErrorListPage(store' settings' $"{context.Request.PathBase}{context.Request.Path}"' await store.GetAllAsync().ConfigureAwait(false))).ConfigureAwait(false);                              return;                      }                  default:                      await Content("Unsupported request method: " + context.Request.Method).ConfigureAwait(false);                      return;              }
