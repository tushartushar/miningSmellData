Implementation smell,Namespace,Class,File,Method,Description
Long Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The method has 142 lines of code.
Long Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The method has 152 lines of code.
Long Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,ProcessPressedKey,The method has 140 lines of code.
Long Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnDeviceEvent,The method has 176 lines of code.
Long Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,The method has 100 lines of code.
Long Method,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,newPrimCulled,The method has 125 lines of code.
Complex Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,Cyclomatic complexity of the method is 8
Complex Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,Cyclomatic complexity of the method is 9
Complex Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnDeviceEvent,Cyclomatic complexity of the method is 10
Complex Method,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,Cyclomatic complexity of the method is 15
Complex Method,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,OnSelfUpdatedObjects,Cyclomatic complexity of the method is 10
Long Parameter List,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnNetworkChat,The method has 8 parameters. Parameters: message' audible' type' sourcetype' fromName' id' ownerid' position
Long Parameter List,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnNetworkLandUpdate,The method has 5 parameters. Parameters: sim' x' y' width' data
Long Parameter List,IdealistRadegastPlugin,SimPatchInfo,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,SimPatchInfo,The method has 5 parameters. Parameters: simulator0' x0' y0' width0' data0
Long Parameter List,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,landPatchCallbackCulled,The method has 5 parameters. Parameters: simulator' x' y' width' data
Long Parameter List,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,chatCallback,The method has 8 parameters. Parameters: message' audible' type' sourcetype' fromName' id' ownerid' position
Long Parameter List,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,newPrim,The method has 5 parameters. Parameters: sc' simulator' prim' regionHandle' timeDilation
Long Parameter List,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,landPatchCallback,The method has 5 parameters. Parameters: simulator' x' y' width' data
Long Identifier,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,,The length of the parameter m_avatarModificationProcessingRate is 34.
Long Identifier,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,,The length of the parameter m_objectModificationProcessingRate is 34.
Long Identifier,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,,The length of the parameter ObjectsToManagedLayerIsRangeBased is 33.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The length of the statement  "                TextureManager = new TextureManager(this'Renderer.Device' Renderer.Driver' SceneGraph.TrianglePicker' SceneGraph.TriangleSelector' "IdealistCache"' NetworkInterface); " is 166.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The length of the statement  "            //SceneNode light2 = Renderer.SceneManager.AddLightSceneNode(Renderer.SceneManager.RootSceneNode' new Vector3D(0' 255' 0)' new Colorf(0f' 0.5f' 0.5f' 0.5f)' 250' -1); " is 166.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The length of the statement  "            SceneNode light2 = Renderer.SceneManager.AddLightSceneNode(Renderer.SceneManager.RootSceneNode' new Vector3D(0' 255' 0)' new Colorf(0f' 0.6f' 0.6f' 0.6f)' 512' -1); " is 164.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The length of the statement  "            Renderer.SceneManager.VideoDriver.SetFog(new Color(0' (int)(0.5f * 255 * fogBrightness)' (int)(0.5f * 255 * fogBrightness)' (int)(1.0f * 255 * fogBrightness))' true' 50' 100' 0' true' true); " is 190.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The length of the statement  "            //ATMOSkySceneNode skynode = new ATMOSkySceneNode(Renderer.Driver.GetTexture("irrlicht2_up.jpg")' null' Renderer.SceneManager' 100' -1); " is 136.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The length of the statement  "            SceneGraph.WaterNode = new WaterSceneNode(null' Renderer.SceneManager' new Dimension2Df(180' 180)' new Dimension2D(100' 100)' new Dimension2D(512' 512)); " is 153.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The length of the statement  "            UserInterface = new UserInterfaceManager(this' Renderer.Driver' Renderer.SceneManager' Renderer.GuiEnvironment' CameraController' AvatarController); " is 148.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The length of the statement  "                    NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation); " is 171.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnDeviceEvent,The length of the statement  "                                    m_log.DebugFormat("FullUpdateCount:{0}' PrimCount:{1}' TextureCount:{2}' UniquePrim:{3}"' SceneGraph.PrimitiveCount' SceneGraph.Objects.Count' texcount' MeshManager.UniqueObjects); " is 180.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnDeviceEvent,The length of the statement  "                                    m_log.DebugFormat("FullUpdateCount:{0}' PrimCount:{1}' TextureCount:{2}' UniquePrim:{3}"' SceneGraph.PrimitiveCount' SceneGraph.Objects.Count' texcount' MeshManager.UniqueObjects); " is 180.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,The length of the statement  "                    Vector3D[] projection = CameraController.ProjectRayPoints(p_event.MousePosition' WindowWidth/2' WindowHeight/2' WindowAspect); " is 126.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,The length of the statement  "                    SceneNode node = SceneGraph.TrianglePicker.GetSceneNodeFromRay(projectedray' 0x0128' true' CameraController.CameraNode.Position); //smgr.CollisionManager.GetSceneNodeFromScreenCoordinates(new Position2D(p_event.MousePosition.X' p_event.MousePosition.Y)' 0' false); " is 264.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,The length of the statement  "                            if (Renderer.SceneManager.CollisionManager.GetCollisionPoint(projectedray' SceneGraph.TriangleSelector' out collisionpoint' out tri)) " is 133.
Long Statement,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,The length of the statement  "                                if (Renderer.SceneManager.CollisionManager.GetCollisionPoint(projectedray' SceneGraph.TriangleSelector' out collisionpoint' out tri)) " is 133.
Long Statement,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,SendCameraViewMatrix,The length of the statement  "            //m_log.Debug("[CAMERA UPDATE] - pos: " + myPos.ToString() + " cam: " + currPos.ToString() + " tgt: " + currTarget.ToString()); " is 127.
Long Statement,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,SendCameraViewMatrix,The length of the statement  "                m_log.Debug("[CAMERA UPDATE] - pos: " + myPos.ToString() + " cam: " + currPos.ToString() + " tgt: " + currTarget.ToString()); " is 125.
Long Statement,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The length of the statement  "            Device.FileSystem.WorkingDirectory = m_viewer.StartupDirectory + "/" + Util.MakePath("media"' "materials"' "textures"' "");  //We set Irrlicht's current directory to %application directory%/media " is 195.
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,Startup,The following statement contains a magic number: if (true)              {                  m_mainThread = new Thread(new ThreadStart(() =>                  {                      ViewerControl.InitializeComponent();                      Device = new IrrlichtDevice(DriverType.OpenGL'                                                  new Dimension2D(WindowWidth'                                                                  WindowHeight)'                                                  32' false' true' true' true                          );                        StartupComponents();                      MainLoop(skin' skincolor);                  }));              }              else              {                  m_mainThread = new Thread(new ThreadStart(() =>                  {                      ViewerControl.InitializeComponent();                      Device = new IrrlichtDevice(DriverType.OpenGL'                                                  new Dimension2D(WindowWidth'                                                                  WindowHeight)'                                                  32' false' true' true' true'                            ViewerControl.IdealistView.Handle                          );                        StartupComponents();                      MainLoop(skin' skincolor);                  }));                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,Startup,The following statement contains a magic number: if (true)              {                  m_mainThread = new Thread(new ThreadStart(() =>                  {                      ViewerControl.InitializeComponent();                      Device = new IrrlichtDevice(DriverType.OpenGL'                                                  new Dimension2D(WindowWidth'                                                                  WindowHeight)'                                                  32' false' true' true' true                          );                        StartupComponents();                      MainLoop(skin' skincolor);                  }));              }              else              {                  m_mainThread = new Thread(new ThreadStart(() =>                  {                      ViewerControl.InitializeComponent();                      Device = new IrrlichtDevice(DriverType.OpenGL'                                                  new Dimension2D(WindowWidth'                                                                  WindowHeight)'                                                  32' false' true' true' true'                            ViewerControl.IdealistView.Handle                          );                        StartupComponents();                      MainLoop(skin' skincolor);                  }));                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: skincolor.A = 255;
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: skincolor.A = 255;
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneNode light2 = Renderer.SceneManager.AddLightSceneNode(Renderer.SceneManager.RootSceneNode' new Vector3D(0' 255' 0)' new Colorf(0f' 0.6f' 0.6f' 0.6f)' 512' -1);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneNode light2 = Renderer.SceneManager.AddLightSceneNode(Renderer.SceneManager.RootSceneNode' new Vector3D(0' 255' 0)' new Colorf(0f' 0.6f' 0.6f' 0.6f)' 512' -1);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: Renderer.SceneManager.VideoDriver.SetFog(new Color(0' (int)(0.5f * 255 * fogBrightness)' (int)(0.5f * 255 * fogBrightness)' (int)(1.0f * 255 * fogBrightness))' true' 50' 100' 0' true' true);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: Renderer.SceneManager.VideoDriver.SetFog(new Color(0' (int)(0.5f * 255 * fogBrightness)' (int)(0.5f * 255 * fogBrightness)' (int)(1.0f * 255 * fogBrightness))' true' 50' 100' 0' true' true);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: Renderer.SceneManager.VideoDriver.SetFog(new Color(0' (int)(0.5f * 255 * fogBrightness)' (int)(0.5f * 255 * fogBrightness)' (int)(1.0f * 255 * fogBrightness))' true' 50' 100' 0' true' true);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: Renderer.SceneManager.VideoDriver.SetFog(new Color(0' (int)(0.5f * 255 * fogBrightness)' (int)(0.5f * 255 * fogBrightness)' (int)(1.0f * 255 * fogBrightness))' true' 50' 100' 0' true' true);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: Renderer.SceneManager.VideoDriver.SetFog(new Color(0' (int)(0.5f * 255 * fogBrightness)' (int)(0.5f * 255 * fogBrightness)' (int)(1.0f * 255 * fogBrightness))' true' 50' 100' 0' true' true);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneGraph.WaterNode = new WaterSceneNode(null' Renderer.SceneManager' new Dimension2Df(180' 180)' new Dimension2D(100' 100)' new Dimension2D(512' 512));
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneGraph.WaterNode = new WaterSceneNode(null' Renderer.SceneManager' new Dimension2Df(180' 180)' new Dimension2D(100' 100)' new Dimension2D(512' 512));
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneGraph.WaterNode = new WaterSceneNode(null' Renderer.SceneManager' new Dimension2Df(180' 180)' new Dimension2D(100' 100)' new Dimension2D(512' 512));
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneGraph.WaterNode = new WaterSceneNode(null' Renderer.SceneManager' new Dimension2Df(180' 180)' new Dimension2D(100' 100)' new Dimension2D(512' 512));
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneGraph.WaterNode = new WaterSceneNode(null' Renderer.SceneManager' new Dimension2Df(180' 180)' new Dimension2D(100' 100)' new Dimension2D(512' 512));
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneGraph.WaterNode = new WaterSceneNode(null' Renderer.SceneManager' new Dimension2Df(180' 180)' new Dimension2D(100' 100)' new Dimension2D(512' 512));
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: SceneGraph.WaterNode.Position = new Vector3D(0' 30' 0);
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following statement contains a magic number: if (formsUiConfigurationOption == "true")              {                  frmCommunications f = new frmCommunications(NetworkInterface);                  f.Visible = true;                  this.m_formsThread = new Thread(delegate() { Application.DoEvents(); Thread.Sleep(50); });                  m_formsThread.Start();              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: int minFrameTime = (int) (1000/((float) m_maximumFramesPerSecond));
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,MainLoop,The following statement contains a magic number: while (Running)              {                  try                  {                      NetworkInterface.Process();                  }                  catch (Exception e)                  {                      m_log.Error("Error processing network messages: " + e);                  }                    try                  {                        // If you close the gui window' device.Run returns false.                      Running = Renderer.Device.Run();                  }                  catch (AccessViolationException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                  }                  catch (OutOfMemoryException e)                  {                      m_log.Error("[VIDEO]: Error in device" + e.ToString());                      continue;                  }                  if (!Running)                      break;                  try                  {                      //  SceneGraph.WaterNode.Update();                  }                  catch ( /*AccessViolation*/ Exception)                  {                      m_log.Warn("[water]: Unable to update this round");                  }                    Renderer.Driver.BeginScene(true' true' new Color(0' 255' 255' 255));                  try                  {                      Renderer.SceneManager.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  try                  {                      Renderer.GuiEnvironment.DrawAll();                  }                  catch (Exception e)                  {                        System.Console.WriteLine("" + e);                  }                  Renderer.Driver.EndScene();                    m_timeSinceLastSceneUpdate += System.Environment.TickCount - m_lastTickCount;                  int frameTime = System.Environment.TickCount - m_lastTickCount;                  m_lastTickCount = System.Environment.TickCount;                    // Update Interpolation targets                  SceneGraph.UpdateMovingObjects();                  // Update camera position and rotation.                  CameraController.CheckTarget();                    if (m_timeSinceLastSceneUpdate > m_baseSceneUpdateTimePeriod)                  {                      // Repeat any held keys                      UpdatePressedKeys();                        m_timeSinceLastSceneUpdate = 0;                      m_sceneUpdateCounter++;                        if (m_sceneUpdateCounter == int.MaxValue)                          m_sceneUpdateCounter = 0;                  }                    if ((m_sceneUpdateCounter%m_avatarModificationProcessingRate) == 0)                  {                      AvatarController.UpdateRemote();                      NetworkInterface.SendCameraViewMatrix(CameraController.GetCameraViewMatrix());                      // process avatar animation changes                      SceneGraph.ProcessAnimations();                      // Process Avatar Mod Queue                      SceneGraph.ProcessObjectModifications(20' ref SceneGraph.AvatarModifications);                  }                    try                  {                      TerrainManager.Process();                  }                  catch (Exception e)                  {                      System.Console.WriteLine("" + e);                  }                    if ((m_sceneUpdateCounter%m_objectModificationProcessingRate) == 0)                  {                      // Process Object Mod Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessObjectModifications(20' ref SceneGraph.ObjectModifications);                      }                      catch (Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessObjectModifications" + ex);                      }                      // Process Mesh Queue.  Parameter is 'Items'                      try                      {                          SceneGraph.ProcessMeshModifications(20);                      }                      catch (System.Exception ex)                      {                            System.Console.WriteLine("MAINLOOP: ProcessMeshModifications" + ex);                      }                      // Check the UnAssigned Child Queue for parents that have since rezed                      try                      {                          SceneGraph.ProcessParentWaitingObjects(5);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessParentWaitingObjects" + ex);                      }                      // Apply textures                      try                      {                          SceneGraph.ProcessTextureModifications(10);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessTextureModifications" + ex);                      }                      // Update foliage.                      try                      {                          SceneGraph.ProcessFoliageMeshModifications(3);                      }                      catch (System.Exception ex)                      {                          System.Console.WriteLine("MAINLOOP: ProcessFoliageMeshModifications" + ex);                      }                      // Set the FPS in the window title.                      Renderer.Device.WindowCaption = "IdealistViewer 0.001' FPS:" + Renderer.Driver.FPS.ToString();                    }                    // process chat                  if (UserInterface.OutboundChatMessages.Count > 0)                      lock (UserInterface.OutboundChatMessages)                          for (int i = 0; i < UserInterface.OutboundChatMessages.Count; i++)                              NetworkInterface.Say(UserInterface.OutboundChatMessages.Dequeue());                    UserInterface.UpdateChatWindow();                    // Sleep until full frame time has been used.                                  if (m_limitFramesPerSecond && frameTime < minFrameTime)                      Thread.Sleep(minFrameTime - frameTime);                }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The following statement contains a magic number: switch (command)              {                  case "a":  // experimental for animation debugging                      try                      {                          int.TryParse(cmdparams[0]' out AnimationManager.StartFrame);                          int.TryParse(cmdparams[1]' out AnimationManager.StopFrame);                          AnimationManager.FramesDirty = true;                      }                      catch                      {                          m_log.Warn("usage: a <startFrame> <endFrame> - where startFrame and endFrame are integers");                      }                      break;                  case "fly":                      AvatarController.Fly = !AvatarController.Fly;                      break;                  case "goto":                      float x = 128f;                      float y = 128f;                      float z = 22f;                      string cmdStr = "";                      foreach (string arg in cmdparams)                          cmdStr += arg + " ";                      cmdStr = cmdStr.Trim();                      string[] dest = cmdStr.Split(new char[] { '/' });                      if (float.TryParse(dest[1]' out x) &&                          float.TryParse(dest[2]' out y) &&                          float.TryParse(dest[3]' out z))                      {                          NetworkInterface.Teleport(dest[0]' x' y' z);                      }                      else                          m_log.Warn("Usage: goto simname x y z");                      break;                  case "help":                      Console.ShowHelp(cmdparams);                      Console.Notice("");                      break;                  case "q":                      string qMsg = " ***************QUEUE STATUS*****************";                      qMsg += "\nfoliageObjectQueue.........................: " + SceneGraph.FoliageMeshModifications.Count.ToString();                      qMsg += "\nobjectModQueue.............................: " + SceneGraph.ObjectModifications.Count.ToString();                      qMsg += "\nobjectMeshQueue............................: " + SceneGraph.ObjectMeshModifications.Count.ToString();                      qMsg += "\nUnAssignedChildObjectModQueue..............: " + SceneGraph.ParentWaitingObjects.Count.ToString();                      qMsg += "\noutgoingChatQueue..........................: " + UserInterface.OutboundChatMessages.Count.ToString();                        m_log.Debug(qMsg);                      break;                    case "cq":                      m_log.Debug("*************** UnAssignedChildObjectModQueue info ************");                      lock (SceneGraph.ParentWaitingObjects)                      {                          foreach (VObject v in SceneGraph.ParentWaitingObjects)                          {                              Primitive prim = v.Primitive;                                m_log.Debug(                                   " UUID: " + prim.ID.ToString()                                  + " parentID: " + prim.ParentID.ToString()                                  + " localID: " + prim.LocalID.ToString()                                  );                          }                      }                      break;                    case "relog":                      NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation);                      break;                  case "say":                      string message = "";                      foreach (string word in cmdparams)                          message += word + " ";                      NetworkInterface.Say(message);                      break;                  case "set":                      if (cmdparams.Length < 2)                          return;                        if (cmdparams[0] == "log" && cmdparams[1] == "level")                      {                          string[] setParams = new string[cmdparams.Length - 2];                          Array.Copy(cmdparams' 2' setParams' 0' cmdparams.Length - 2);                            Console.SetConsoleLogLevel(setParams);                      }                      break;                    case "show":                      if (cmdparams.Length > 0)                      {                          Console.Show(cmdparams);                      }                      break;                    case "quit":                  case "shutdown":                      Shutdown();                      break;              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The following statement contains a magic number: switch (command)              {                  case "a":  // experimental for animation debugging                      try                      {                          int.TryParse(cmdparams[0]' out AnimationManager.StartFrame);                          int.TryParse(cmdparams[1]' out AnimationManager.StopFrame);                          AnimationManager.FramesDirty = true;                      }                      catch                      {                          m_log.Warn("usage: a <startFrame> <endFrame> - where startFrame and endFrame are integers");                      }                      break;                  case "fly":                      AvatarController.Fly = !AvatarController.Fly;                      break;                  case "goto":                      float x = 128f;                      float y = 128f;                      float z = 22f;                      string cmdStr = "";                      foreach (string arg in cmdparams)                          cmdStr += arg + " ";                      cmdStr = cmdStr.Trim();                      string[] dest = cmdStr.Split(new char[] { '/' });                      if (float.TryParse(dest[1]' out x) &&                          float.TryParse(dest[2]' out y) &&                          float.TryParse(dest[3]' out z))                      {                          NetworkInterface.Teleport(dest[0]' x' y' z);                      }                      else                          m_log.Warn("Usage: goto simname x y z");                      break;                  case "help":                      Console.ShowHelp(cmdparams);                      Console.Notice("");                      break;                  case "q":                      string qMsg = " ***************QUEUE STATUS*****************";                      qMsg += "\nfoliageObjectQueue.........................: " + SceneGraph.FoliageMeshModifications.Count.ToString();                      qMsg += "\nobjectModQueue.............................: " + SceneGraph.ObjectModifications.Count.ToString();                      qMsg += "\nobjectMeshQueue............................: " + SceneGraph.ObjectMeshModifications.Count.ToString();                      qMsg += "\nUnAssignedChildObjectModQueue..............: " + SceneGraph.ParentWaitingObjects.Count.ToString();                      qMsg += "\noutgoingChatQueue..........................: " + UserInterface.OutboundChatMessages.Count.ToString();                        m_log.Debug(qMsg);                      break;                    case "cq":                      m_log.Debug("*************** UnAssignedChildObjectModQueue info ************");                      lock (SceneGraph.ParentWaitingObjects)                      {                          foreach (VObject v in SceneGraph.ParentWaitingObjects)                          {                              Primitive prim = v.Primitive;                                m_log.Debug(                                   " UUID: " + prim.ID.ToString()                                  + " parentID: " + prim.ParentID.ToString()                                  + " localID: " + prim.LocalID.ToString()                                  );                          }                      }                      break;                    case "relog":                      NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation);                      break;                  case "say":                      string message = "";                      foreach (string word in cmdparams)                          message += word + " ";                      NetworkInterface.Say(message);                      break;                  case "set":                      if (cmdparams.Length < 2)                          return;                        if (cmdparams[0] == "log" && cmdparams[1] == "level")                      {                          string[] setParams = new string[cmdparams.Length - 2];                          Array.Copy(cmdparams' 2' setParams' 0' cmdparams.Length - 2);                            Console.SetConsoleLogLevel(setParams);                      }                      break;                    case "show":                      if (cmdparams.Length > 0)                      {                          Console.Show(cmdparams);                      }                      break;                    case "quit":                  case "shutdown":                      Shutdown();                      break;              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The following statement contains a magic number: switch (command)              {                  case "a":  // experimental for animation debugging                      try                      {                          int.TryParse(cmdparams[0]' out AnimationManager.StartFrame);                          int.TryParse(cmdparams[1]' out AnimationManager.StopFrame);                          AnimationManager.FramesDirty = true;                      }                      catch                      {                          m_log.Warn("usage: a <startFrame> <endFrame> - where startFrame and endFrame are integers");                      }                      break;                  case "fly":                      AvatarController.Fly = !AvatarController.Fly;                      break;                  case "goto":                      float x = 128f;                      float y = 128f;                      float z = 22f;                      string cmdStr = "";                      foreach (string arg in cmdparams)                          cmdStr += arg + " ";                      cmdStr = cmdStr.Trim();                      string[] dest = cmdStr.Split(new char[] { '/' });                      if (float.TryParse(dest[1]' out x) &&                          float.TryParse(dest[2]' out y) &&                          float.TryParse(dest[3]' out z))                      {                          NetworkInterface.Teleport(dest[0]' x' y' z);                      }                      else                          m_log.Warn("Usage: goto simname x y z");                      break;                  case "help":                      Console.ShowHelp(cmdparams);                      Console.Notice("");                      break;                  case "q":                      string qMsg = " ***************QUEUE STATUS*****************";                      qMsg += "\nfoliageObjectQueue.........................: " + SceneGraph.FoliageMeshModifications.Count.ToString();                      qMsg += "\nobjectModQueue.............................: " + SceneGraph.ObjectModifications.Count.ToString();                      qMsg += "\nobjectMeshQueue............................: " + SceneGraph.ObjectMeshModifications.Count.ToString();                      qMsg += "\nUnAssignedChildObjectModQueue..............: " + SceneGraph.ParentWaitingObjects.Count.ToString();                      qMsg += "\noutgoingChatQueue..........................: " + UserInterface.OutboundChatMessages.Count.ToString();                        m_log.Debug(qMsg);                      break;                    case "cq":                      m_log.Debug("*************** UnAssignedChildObjectModQueue info ************");                      lock (SceneGraph.ParentWaitingObjects)                      {                          foreach (VObject v in SceneGraph.ParentWaitingObjects)                          {                              Primitive prim = v.Primitive;                                m_log.Debug(                                   " UUID: " + prim.ID.ToString()                                  + " parentID: " + prim.ParentID.ToString()                                  + " localID: " + prim.LocalID.ToString()                                  );                          }                      }                      break;                    case "relog":                      NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation);                      break;                  case "say":                      string message = "";                      foreach (string word in cmdparams)                          message += word + " ";                      NetworkInterface.Say(message);                      break;                  case "set":                      if (cmdparams.Length < 2)                          return;                        if (cmdparams[0] == "log" && cmdparams[1] == "level")                      {                          string[] setParams = new string[cmdparams.Length - 2];                          Array.Copy(cmdparams' 2' setParams' 0' cmdparams.Length - 2);                            Console.SetConsoleLogLevel(setParams);                      }                      break;                    case "show":                      if (cmdparams.Length > 0)                      {                          Console.Show(cmdparams);                      }                      break;                    case "quit":                  case "shutdown":                      Shutdown();                      break;              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The following statement contains a magic number: switch (command)              {                  case "a":  // experimental for animation debugging                      try                      {                          int.TryParse(cmdparams[0]' out AnimationManager.StartFrame);                          int.TryParse(cmdparams[1]' out AnimationManager.StopFrame);                          AnimationManager.FramesDirty = true;                      }                      catch                      {                          m_log.Warn("usage: a <startFrame> <endFrame> - where startFrame and endFrame are integers");                      }                      break;                  case "fly":                      AvatarController.Fly = !AvatarController.Fly;                      break;                  case "goto":                      float x = 128f;                      float y = 128f;                      float z = 22f;                      string cmdStr = "";                      foreach (string arg in cmdparams)                          cmdStr += arg + " ";                      cmdStr = cmdStr.Trim();                      string[] dest = cmdStr.Split(new char[] { '/' });                      if (float.TryParse(dest[1]' out x) &&                          float.TryParse(dest[2]' out y) &&                          float.TryParse(dest[3]' out z))                      {                          NetworkInterface.Teleport(dest[0]' x' y' z);                      }                      else                          m_log.Warn("Usage: goto simname x y z");                      break;                  case "help":                      Console.ShowHelp(cmdparams);                      Console.Notice("");                      break;                  case "q":                      string qMsg = " ***************QUEUE STATUS*****************";                      qMsg += "\nfoliageObjectQueue.........................: " + SceneGraph.FoliageMeshModifications.Count.ToString();                      qMsg += "\nobjectModQueue.............................: " + SceneGraph.ObjectModifications.Count.ToString();                      qMsg += "\nobjectMeshQueue............................: " + SceneGraph.ObjectMeshModifications.Count.ToString();                      qMsg += "\nUnAssignedChildObjectModQueue..............: " + SceneGraph.ParentWaitingObjects.Count.ToString();                      qMsg += "\noutgoingChatQueue..........................: " + UserInterface.OutboundChatMessages.Count.ToString();                        m_log.Debug(qMsg);                      break;                    case "cq":                      m_log.Debug("*************** UnAssignedChildObjectModQueue info ************");                      lock (SceneGraph.ParentWaitingObjects)                      {                          foreach (VObject v in SceneGraph.ParentWaitingObjects)                          {                              Primitive prim = v.Primitive;                                m_log.Debug(                                   " UUID: " + prim.ID.ToString()                                  + " parentID: " + prim.ParentID.ToString()                                  + " localID: " + prim.LocalID.ToString()                                  );                          }                      }                      break;                    case "relog":                      NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation);                      break;                  case "say":                      string message = "";                      foreach (string word in cmdparams)                          message += word + " ";                      NetworkInterface.Say(message);                      break;                  case "set":                      if (cmdparams.Length < 2)                          return;                        if (cmdparams[0] == "log" && cmdparams[1] == "level")                      {                          string[] setParams = new string[cmdparams.Length - 2];                          Array.Copy(cmdparams' 2' setParams' 0' cmdparams.Length - 2);                            Console.SetConsoleLogLevel(setParams);                      }                      break;                    case "show":                      if (cmdparams.Length > 0)                      {                          Console.Show(cmdparams);                      }                      break;                    case "quit":                  case "shutdown":                      Shutdown();                      break;              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The following statement contains a magic number: switch (command)              {                  case "a":  // experimental for animation debugging                      try                      {                          int.TryParse(cmdparams[0]' out AnimationManager.StartFrame);                          int.TryParse(cmdparams[1]' out AnimationManager.StopFrame);                          AnimationManager.FramesDirty = true;                      }                      catch                      {                          m_log.Warn("usage: a <startFrame> <endFrame> - where startFrame and endFrame are integers");                      }                      break;                  case "fly":                      AvatarController.Fly = !AvatarController.Fly;                      break;                  case "goto":                      float x = 128f;                      float y = 128f;                      float z = 22f;                      string cmdStr = "";                      foreach (string arg in cmdparams)                          cmdStr += arg + " ";                      cmdStr = cmdStr.Trim();                      string[] dest = cmdStr.Split(new char[] { '/' });                      if (float.TryParse(dest[1]' out x) &&                          float.TryParse(dest[2]' out y) &&                          float.TryParse(dest[3]' out z))                      {                          NetworkInterface.Teleport(dest[0]' x' y' z);                      }                      else                          m_log.Warn("Usage: goto simname x y z");                      break;                  case "help":                      Console.ShowHelp(cmdparams);                      Console.Notice("");                      break;                  case "q":                      string qMsg = " ***************QUEUE STATUS*****************";                      qMsg += "\nfoliageObjectQueue.........................: " + SceneGraph.FoliageMeshModifications.Count.ToString();                      qMsg += "\nobjectModQueue.............................: " + SceneGraph.ObjectModifications.Count.ToString();                      qMsg += "\nobjectMeshQueue............................: " + SceneGraph.ObjectMeshModifications.Count.ToString();                      qMsg += "\nUnAssignedChildObjectModQueue..............: " + SceneGraph.ParentWaitingObjects.Count.ToString();                      qMsg += "\noutgoingChatQueue..........................: " + UserInterface.OutboundChatMessages.Count.ToString();                        m_log.Debug(qMsg);                      break;                    case "cq":                      m_log.Debug("*************** UnAssignedChildObjectModQueue info ************");                      lock (SceneGraph.ParentWaitingObjects)                      {                          foreach (VObject v in SceneGraph.ParentWaitingObjects)                          {                              Primitive prim = v.Primitive;                                m_log.Debug(                                   " UUID: " + prim.ID.ToString()                                  + " parentID: " + prim.ParentID.ToString()                                  + " localID: " + prim.LocalID.ToString()                                  );                          }                      }                      break;                    case "relog":                      NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation);                      break;                  case "say":                      string message = "";                      foreach (string word in cmdparams)                          message += word + " ";                      NetworkInterface.Say(message);                      break;                  case "set":                      if (cmdparams.Length < 2)                          return;                        if (cmdparams[0] == "log" && cmdparams[1] == "level")                      {                          string[] setParams = new string[cmdparams.Length - 2];                          Array.Copy(cmdparams' 2' setParams' 0' cmdparams.Length - 2);                            Console.SetConsoleLogLevel(setParams);                      }                      break;                    case "show":                      if (cmdparams.Length > 0)                      {                          Console.Show(cmdparams);                      }                      break;                    case "quit":                  case "shutdown":                      Shutdown();                      break;              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The following statement contains a magic number: switch (command)              {                  case "a":  // experimental for animation debugging                      try                      {                          int.TryParse(cmdparams[0]' out AnimationManager.StartFrame);                          int.TryParse(cmdparams[1]' out AnimationManager.StopFrame);                          AnimationManager.FramesDirty = true;                      }                      catch                      {                          m_log.Warn("usage: a <startFrame> <endFrame> - where startFrame and endFrame are integers");                      }                      break;                  case "fly":                      AvatarController.Fly = !AvatarController.Fly;                      break;                  case "goto":                      float x = 128f;                      float y = 128f;                      float z = 22f;                      string cmdStr = "";                      foreach (string arg in cmdparams)                          cmdStr += arg + " ";                      cmdStr = cmdStr.Trim();                      string[] dest = cmdStr.Split(new char[] { '/' });                      if (float.TryParse(dest[1]' out x) &&                          float.TryParse(dest[2]' out y) &&                          float.TryParse(dest[3]' out z))                      {                          NetworkInterface.Teleport(dest[0]' x' y' z);                      }                      else                          m_log.Warn("Usage: goto simname x y z");                      break;                  case "help":                      Console.ShowHelp(cmdparams);                      Console.Notice("");                      break;                  case "q":                      string qMsg = " ***************QUEUE STATUS*****************";                      qMsg += "\nfoliageObjectQueue.........................: " + SceneGraph.FoliageMeshModifications.Count.ToString();                      qMsg += "\nobjectModQueue.............................: " + SceneGraph.ObjectModifications.Count.ToString();                      qMsg += "\nobjectMeshQueue............................: " + SceneGraph.ObjectMeshModifications.Count.ToString();                      qMsg += "\nUnAssignedChildObjectModQueue..............: " + SceneGraph.ParentWaitingObjects.Count.ToString();                      qMsg += "\noutgoingChatQueue..........................: " + UserInterface.OutboundChatMessages.Count.ToString();                        m_log.Debug(qMsg);                      break;                    case "cq":                      m_log.Debug("*************** UnAssignedChildObjectModQueue info ************");                      lock (SceneGraph.ParentWaitingObjects)                      {                          foreach (VObject v in SceneGraph.ParentWaitingObjects)                          {                              Primitive prim = v.Primitive;                                m_log.Debug(                                   " UUID: " + prim.ID.ToString()                                  + " parentID: " + prim.ParentID.ToString()                                  + " localID: " + prim.LocalID.ToString()                                  );                          }                      }                      break;                    case "relog":                      NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation);                      break;                  case "say":                      string message = "";                      foreach (string word in cmdparams)                          message += word + " ";                      NetworkInterface.Say(message);                      break;                  case "set":                      if (cmdparams.Length < 2)                          return;                        if (cmdparams[0] == "log" && cmdparams[1] == "level")                      {                          string[] setParams = new string[cmdparams.Length - 2];                          Array.Copy(cmdparams' 2' setParams' 0' cmdparams.Length - 2);                            Console.SetConsoleLogLevel(setParams);                      }                      break;                    case "show":                      if (cmdparams.Length > 0)                      {                          Console.Show(cmdparams);                      }                      break;                    case "quit":                  case "shutdown":                      Shutdown();                      break;              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,The following statement contains a magic number: if (p_event.MouseInputEvent == MouseInputEvent.LMousePressedDown)              {                    m_leftMousePressed = true;                  if (m_ctrlPressed)                  {                      CameraController.SwitchMode(ECameraMode.Build);                      // Pick!                        CameraController.ResetMouseOffsets();                      Vector3D[] projection = CameraController.ProjectRayPoints(p_event.MousePosition' WindowWidth/2' WindowHeight/2' WindowAspect);                      Line3D projectedray = new Line3D(projection[0]' projection[1]);                        Vector3D collisionpoint = new Vector3D(0' 0' 0);                      Triangle3D tri = new Triangle3D(0' 0' 0' 0' 0' 0' 0' 0' 0);                        // Check if we have a node under the mouse                      SceneNode node = SceneGraph.TrianglePicker.GetSceneNodeFromRay(projectedray' 0x0128' true' CameraController.CameraNode.Position); //smgr.CollisionManager.GetSceneNodeFromScreenCoordinates(new Position2D(p_event.MousePosition.X' p_event.MousePosition.Y)' 0' false);                      if (node == null)                      {                          if (SceneGraph.TriangleSelector != null)                          {                              // Collide test against the terrain                              if (Renderer.SceneManager.CollisionManager.GetCollisionPoint(projectedray' SceneGraph.TriangleSelector' out collisionpoint' out tri))                              {                                  if (CameraController.CameraMode == ECameraMode.Build)                                  {                                      CameraController.SetTarget(collisionpoint);                                      CameraController.TargetNode = null;                                  }                              }                          }                      }                      else                      {                          // Sometimes the terrain picker returns weird values.                          // If it's weird try the general 'everything' triangle picker.                          m_log.WarnFormat("[PICK]: Picked <{0}'{1}'{2}>"' node.Position.X' node.Position.Y' node.Position.Z);                          if (node.Position.X == 0 && node.Position.Z == 0)                          {                              if (SceneGraph.TriangleSelector != null)                              {                                  if (Renderer.SceneManager.CollisionManager.GetCollisionPoint(projectedray' SceneGraph.TriangleSelector' out collisionpoint' out tri))                                  {                                      if (CameraController.CameraMode == ECameraMode.Build)                                      {                                          CameraController.SetTarget(collisionpoint);                                          CameraController.TargetNode = null;                                      }                                  }                              }                          }                          else                          {                              // Target the node                              if (CameraController.CameraMode == ECameraMode.Build)                              {                                  CameraController.SetTarget(node.Position);                                  CameraController.TargetNode = node;                              }                          }                      }                  }              }
Magic Number,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnMouseEvent,The following statement contains a magic number: if (p_event.MouseInputEvent == MouseInputEvent.LMousePressedDown)              {                    m_leftMousePressed = true;                  if (m_ctrlPressed)                  {                      CameraController.SwitchMode(ECameraMode.Build);                      // Pick!                        CameraController.ResetMouseOffsets();                      Vector3D[] projection = CameraController.ProjectRayPoints(p_event.MousePosition' WindowWidth/2' WindowHeight/2' WindowAspect);                      Line3D projectedray = new Line3D(projection[0]' projection[1]);                        Vector3D collisionpoint = new Vector3D(0' 0' 0);                      Triangle3D tri = new Triangle3D(0' 0' 0' 0' 0' 0' 0' 0' 0);                        // Check if we have a node under the mouse                      SceneNode node = SceneGraph.TrianglePicker.GetSceneNodeFromRay(projectedray' 0x0128' true' CameraController.CameraNode.Position); //smgr.CollisionManager.GetSceneNodeFromScreenCoordinates(new Position2D(p_event.MousePosition.X' p_event.MousePosition.Y)' 0' false);                      if (node == null)                      {                          if (SceneGraph.TriangleSelector != null)                          {                              // Collide test against the terrain                              if (Renderer.SceneManager.CollisionManager.GetCollisionPoint(projectedray' SceneGraph.TriangleSelector' out collisionpoint' out tri))                              {                                  if (CameraController.CameraMode == ECameraMode.Build)                                  {                                      CameraController.SetTarget(collisionpoint);                                      CameraController.TargetNode = null;                                  }                              }                          }                      }                      else                      {                          // Sometimes the terrain picker returns weird values.                          // If it's weird try the general 'everything' triangle picker.                          m_log.WarnFormat("[PICK]: Picked <{0}'{1}'{2}>"' node.Position.X' node.Position.Y' node.Position.Z);                          if (node.Position.X == 0 && node.Position.Z == 0)                          {                              if (SceneGraph.TriangleSelector != null)                              {                                  if (Renderer.SceneManager.CollisionManager.GetCollisionPoint(projectedray' SceneGraph.TriangleSelector' out collisionpoint' out tri))                                  {                                      if (CameraController.CameraMode == ECameraMode.Build)                                      {                                          CameraController.SetTarget(collisionpoint);                                          CameraController.TargetNode = null;                                      }                                  }                              }                          }                          else                          {                              // Target the node                              if (CameraController.CameraMode == ECameraMode.Build)                              {                                  CameraController.SetTarget(node.Position);                                  CameraController.TargetNode = node;                              }                          }                      }                  }              }
Magic Number,IdealistRadegastPlugin,SimPatchInfo,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,SimPatchInfo,The following statement contains a magic number: float w2 = (float) width/2;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,OnSelfUpdated,The following statement contains a magic number: lock (_lastKnownPosLock)              {                  if (_lastKnownSimPostion == Vector3.Zero)                  {                      _lastKnownSimPostion = update.Position;                      return;                  }                  if (Vector3.Distance(update.Position' _lastKnownSimPostion) < 8) return;                  _lastKnownSimPostion = update.Position;              }
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Total = 600000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Land = 80000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Task = 200000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Texture = 100000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Wind = 10000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Resend = 100000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Asset = 100000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: m_user.Throttle.Cloud = 10000;
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: SetHeightWidth(768' 1024);
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,simConnectedCallback,The following statement contains a magic number: SetHeightWidth(768' 1024);
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,getLoginParams,The following statement contains a magic number: if (startlocation.Length == 0)              {                    if (!loginURI.EndsWith("/"))                      loginURI += "/";                    string[] locationparse = loginURI.Split('/');                  try                  {                      startlocation = locationparse[locationparse.Length - 2];                      if (startlocation == locationparse[2])                      {                          startlocation = "last";                      }                      else                      {                          loginURI = "";                          for (int i = 0; i < locationparse.Length - 2; i++)                          {                              loginURI += locationparse[i] + "/";                          }                      }                    }                  catch (Exception)                  {                      startlocation = "last";                  }                }              else              {                                      //if (!loginURI.EndsWith("/"))                  //    loginURI += "/";                   // string[] locationparse = loginURI.Split('/');                 // try                 // {                 //     string end = locationparse[locationparse.Length - 2];                 //     if (end != locationparse[2])                 //     {                 //         loginURI = "";                 //         for (int i = 0; i < 3; i++)                 //         {                 //             if (locationparse[i].Length != 0 || i==1)                 //                 loginURI += locationparse[i] + "/";                 //         }                 //     }                    //}                 // catch (Exception)                  //{                      //startlocation = "last";                  //    m_log.Warn("[URLPARSING]: Unable to parse URL provided!");                  //}                  }
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,getLoginParams,The following statement contains a magic number: if (startlocation.Length == 0)              {                    if (!loginURI.EndsWith("/"))                      loginURI += "/";                    string[] locationparse = loginURI.Split('/');                  try                  {                      startlocation = locationparse[locationparse.Length - 2];                      if (startlocation == locationparse[2])                      {                          startlocation = "last";                      }                      else                      {                          loginURI = "";                          for (int i = 0; i < locationparse.Length - 2; i++)                          {                              loginURI += locationparse[i] + "/";                          }                      }                    }                  catch (Exception)                  {                      startlocation = "last";                  }                }              else              {                                      //if (!loginURI.EndsWith("/"))                  //    loginURI += "/";                   // string[] locationparse = loginURI.Split('/');                 // try                 // {                 //     string end = locationparse[locationparse.Length - 2];                 //     if (end != locationparse[2])                 //     {                 //         loginURI = "";                 //         for (int i = 0; i < 3; i++)                 //         {                 //             if (locationparse[i].Length != 0 || i==1)                 //                 loginURI += locationparse[i] + "/";                 //         }                 //     }                    //}                 // catch (Exception)                  //{                      //startlocation = "last";                  //    m_log.Warn("[URLPARSING]: Unable to parse URL provided!");                  //}                  }
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,getLoginParams,The following statement contains a magic number: if (startlocation.Length == 0)              {                    if (!loginURI.EndsWith("/"))                      loginURI += "/";                    string[] locationparse = loginURI.Split('/');                  try                  {                      startlocation = locationparse[locationparse.Length - 2];                      if (startlocation == locationparse[2])                      {                          startlocation = "last";                      }                      else                      {                          loginURI = "";                          for (int i = 0; i < locationparse.Length - 2; i++)                          {                              loginURI += locationparse[i] + "/";                          }                      }                    }                  catch (Exception)                  {                      startlocation = "last";                  }                }              else              {                                      //if (!loginURI.EndsWith("/"))                  //    loginURI += "/";                   // string[] locationparse = loginURI.Split('/');                 // try                 // {                 //     string end = locationparse[locationparse.Length - 2];                 //     if (end != locationparse[2])                 //     {                 //         loginURI = "";                 //         for (int i = 0; i < 3; i++)                 //         {                 //             if (locationparse[i].Length != 0 || i==1)                 //                 loginURI += locationparse[i] + "/";                 //         }                 //     }                    //}                 // catch (Exception)                  //{                      //startlocation = "last";                  //    m_log.Warn("[URLPARSING]: Unable to parse URL provided!");                  //}                  }
Magic Number,IdealistRadegastPlugin,RadegastNetworkModule,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Network\LibOmvNetworkModule.cs,chatCallback,The following statement contains a magic number: if ((int)type < 4 && id != m_user.Self.AgentID)              {                  m_log.Debug("Chat: " + fromName + ": " + message);                  if (OnChat != null)                  {                      OnChat(message' audible' type' sourcetype'                                        fromName' id' ownerid' position);                  }              }
Magic Number,IdealistRadegastPlugin,IdealistViewControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\IdealistViewControl.cs,InitializeComponent,The following statement contains a magic number: this.IdealistView.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,IdealistViewControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\IdealistViewControl.cs,InitializeComponent,The following statement contains a magic number: this.IdealistView.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,IdealistViewControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\IdealistViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,IdealistViewControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\IdealistViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,IdealistUserControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\ParentWindowForm.cs,InitializeComponent,The following statement contains a magic number: this.IdealistView.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,IdealistUserControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\ParentWindowForm.cs,InitializeComponent,The following statement contains a magic number: this.IdealistView.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,IdealistUserControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\ParentWindowForm.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,IdealistUserControl,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\ParentWindowForm.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(893' 835);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(2' 0' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(3' 0' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(2' 1' 1);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(3' 1' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(0' 2' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(1' 2' 1);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(2' 2' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(2' 2' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(3' 2' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(3' 2' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(0' 3' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(1' 3' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(2' 3' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(2' 3' 0);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(3' 3' 1);
Magic Number,IdealistRadegastPlugin,RaegastRenderer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Renderer\Renderer.cs,Startup,The following statement contains a magic number: m4.SetM(3' 3' 1);
Duplicate Code,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,ProcessPressedKey,The method contains a code clone-set at the following line numbers (starting from the method definition): ((28' 51)' (131' 154))
Missing Default,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,StartupComponents,The following switch statement is missing a default case: switch (xml.NodeType)                  {                      case XmlNodeType.Text:                          UserInterface.AboutText = xml.ReadContentAsString();                          break;                      case XmlNodeType.Element:                          if (xml.Name.Equals("startUpModel"))                          {                          }                          else if (xml.Name.Equals("messageText"))                              UserInterface.AboutCaption = xml.GetAttribute("caption");                          break;                  }
Missing Default,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnConsoleCommand,The following switch statement is missing a default case: switch (command)              {                  case "a":  // experimental for animation debugging                      try                      {                          int.TryParse(cmdparams[0]' out AnimationManager.StartFrame);                          int.TryParse(cmdparams[1]' out AnimationManager.StopFrame);                          AnimationManager.FramesDirty = true;                      }                      catch                      {                          m_log.Warn("usage: a <startFrame> <endFrame> - where startFrame and endFrame are integers");                      }                      break;                  case "fly":                      AvatarController.Fly = !AvatarController.Fly;                      break;                  case "goto":                      float x = 128f;                      float y = 128f;                      float z = 22f;                      string cmdStr = "";                      foreach (string arg in cmdparams)                          cmdStr += arg + " ";                      cmdStr = cmdStr.Trim();                      string[] dest = cmdStr.Split(new char[] { '/' });                      if (float.TryParse(dest[1]' out x) &&                          float.TryParse(dest[2]' out y) &&                          float.TryParse(dest[3]' out z))                      {                          NetworkInterface.Teleport(dest[0]' x' y' z);                      }                      else                          m_log.Warn("Usage: goto simname x y z");                      break;                  case "help":                      Console.ShowHelp(cmdparams);                      Console.Notice("");                      break;                  case "q":                      string qMsg = " ***************QUEUE STATUS*****************";                      qMsg += "\nfoliageObjectQueue.........................: " + SceneGraph.FoliageMeshModifications.Count.ToString();                      qMsg += "\nobjectModQueue.............................: " + SceneGraph.ObjectModifications.Count.ToString();                      qMsg += "\nobjectMeshQueue............................: " + SceneGraph.ObjectMeshModifications.Count.ToString();                      qMsg += "\nUnAssignedChildObjectModQueue..............: " + SceneGraph.ParentWaitingObjects.Count.ToString();                      qMsg += "\noutgoingChatQueue..........................: " + UserInterface.OutboundChatMessages.Count.ToString();                        m_log.Debug(qMsg);                      break;                    case "cq":                      m_log.Debug("*************** UnAssignedChildObjectModQueue info ************");                      lock (SceneGraph.ParentWaitingObjects)                      {                          foreach (VObject v in SceneGraph.ParentWaitingObjects)                          {                              Primitive prim = v.Primitive;                                m_log.Debug(                                   " UUID: " + prim.ID.ToString()                                  + " parentID: " + prim.ParentID.ToString()                                  + " localID: " + prim.LocalID.ToString()                                  );                          }                      }                      break;                    case "relog":                      NetworkInterface.Login(NetworkInterface.LoginURI' NetworkInterface.FirstName + " " + NetworkInterface.LastName' NetworkInterface.Password' NetworkInterface.StartLocation);                      break;                  case "say":                      string message = "";                      foreach (string word in cmdparams)                          message += word + " ";                      NetworkInterface.Say(message);                      break;                  case "set":                      if (cmdparams.Length < 2)                          return;                        if (cmdparams[0] == "log" && cmdparams[1] == "level")                      {                          string[] setParams = new string[cmdparams.Length - 2];                          Array.Copy(cmdparams' 2' setParams' 0' cmdparams.Length - 2);                            Console.SetConsoleLogLevel(setParams);                      }                      break;                    case "show":                      if (cmdparams.Length > 0)                      {                          Console.Show(cmdparams);                      }                      break;                    case "quit":                  case "shutdown":                      Shutdown();                      break;              }
Missing Default,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,ProcessPressedKey,The following switch statement is missing a default case: switch (ky)              {                  case KeyCode.Key_W:                  case KeyCode.Up:                        AvatarController.Forward = kydown;                      break;                    case KeyCode.Key_S:                  case KeyCode.Down:                      AvatarController.Back = kydown;                      break;                    case KeyCode.Key_A:                  case KeyCode.Left:                      CameraController.SetRotationDelta(-1' 0);                      break;                    case KeyCode.Key_D:                  case KeyCode.Right:                      CameraController.SetRotationDelta(1' 0);                      break;                    case KeyCode.Prior:                      if (AvatarController.Fly)                          AvatarController.Up = kydown;                      else                          if (kydown)                              AvatarController.Jump = true;                          else                              AvatarController.Jump = false;                        break;                    case KeyCode.Next:                      AvatarController.Down = kydown;                      break;                    case KeyCode.Home:                  case KeyCode.Key_F:                      if (!held && !kydown)                          AvatarController.Fly = !AvatarController.Fly;                      break;                }
Missing Default,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,ProcessPressedKey,The following switch statement is missing a default case: switch (ky)              {                  case KeyCode.Up:                      if (!m_shiftPressed && !m_ctrlPressed)                      {                          if (CameraController.CameraMode == ECameraMode.Build)                          {                              if (SceneGraph.m_avatarObject != null)                              {                                  CameraController.SetTarget(SceneGraph.m_avatarObject.SceneNode);                                  CameraController.SwitchMode(ECameraMode.Third);                              }                          }                            ProcessPressedKey(ky' true' true);                      }                      else                      {                          if (m_ctrlPressed)                          {                              CameraController.DoKeyAction(ky);                          }                      }                      break;                    case KeyCode.Down:                      if (!m_shiftPressed && !m_ctrlPressed)                      {                          if (CameraController.CameraMode == ECameraMode.Build)                          {                              if (SceneGraph.m_avatarObject != null)                              {                                  CameraController.SetTarget(SceneGraph.m_avatarObject.SceneNode);                                  CameraController.SwitchMode(ECameraMode.Third);                              }                          }                            ProcessPressedKey(ky' true' true);                      }                      else                      {                          if (m_ctrlPressed)                          {                              CameraController.SwitchMode(ECameraMode.Build);                              CameraController.DoKeyAction(ky);                          }                        }                      break;                    case KeyCode.Left:                      if (!m_shiftPressed && !m_ctrlPressed)                      {                          if (CameraController.CameraMode == ECameraMode.Build)                          {                              if (SceneGraph.m_avatarObject != null)                              {                                  CameraController.SetTarget(SceneGraph.m_avatarObject.SceneNode);                                  CameraController.SwitchMode(ECameraMode.Third);                              }                          }                            ProcessPressedKey(ky' true' true);                      }                      else                      {                          if (m_ctrlPressed)                          {                              //vOrbit.X -= 2f;                              CameraController.SwitchMode(ECameraMode.Build);                              CameraController.DoKeyAction(ky);                          }                        }                      break;                    case KeyCode.Right:                      if (!m_shiftPressed && !m_ctrlPressed)                      {                          if (CameraController.CameraMode == ECameraMode.Build)                          {                              if (SceneGraph.m_avatarObject != null)                              {                                  CameraController.SetTarget(SceneGraph.m_avatarObject.SceneNode);                                  CameraController.SwitchMode(ECameraMode.Third);                              }                          }                            ProcessPressedKey(ky' true' true);                      }                      else                      {                          if (m_ctrlPressed)                          {                              //vOrbit.X += 2f;                              //vOrbit.X -= 2f;                              CameraController.SwitchMode(ECameraMode.Build);                              CameraController.DoKeyAction(ky);                          }                        }                      break;                  case KeyCode.Prior:                      if (!m_shiftPressed && !m_ctrlPressed)                      {                          if (CameraController.CameraMode == ECameraMode.Build)                          {                              if (SceneGraph.m_avatarObject != null)                              {                                  CameraController.SetTarget(SceneGraph.m_avatarObject.SceneNode);                                  CameraController.SwitchMode(ECameraMode.Third);                              }                          }                            ProcessPressedKey(ky' true' true);                      }                      else                      {                          if (m_ctrlPressed)                          {                              //vOrbit.Y -= 2f;                              CameraController.SwitchMode(ECameraMode.Build);                              CameraController.DoKeyAction(ky);                          }                        }                      break;                    case KeyCode.Next:                      if (!m_shiftPressed && !m_ctrlPressed)                      {                          if (CameraController.CameraMode == ECameraMode.Build)                          {                              if (SceneGraph.m_avatarObject != null)                              {                                  CameraController.SetTarget(SceneGraph.m_avatarObject.SceneNode);                                  CameraController.SwitchMode(ECameraMode.Third);                              }                          }                            ProcessPressedKey(ky' true' true);                      }                      else                      {                          if (m_ctrlPressed)                          {                              CameraController.SwitchMode(ECameraMode.Build);                              CameraController.DoKeyAction(ky);                          }                        }                      break;                }
Missing Default,IdealistRadegastPlugin,RadegastViewer,C:\repos\radegastdev_radegast\plugins\IdealistRadegastPlugin\Viewer.cs,OnDeviceEvent,The following switch statement is missing a default case: switch (p_event.KeyCode)                          {                                case KeyCode.Control:                                  m_ctrlPressed = p_event.KeyPressedDown;                                  if (m_ctrlPressed)                                  {                                        CameraController.ResetMouseOffsets();                                  }                                  else                                  {                                      CameraController.ApplyMouseOffsets();                                  }                                  break;                              case KeyCode.Shift:                                  m_shiftPressed = p_event.KeyPressedDown;                                  break;                              case KeyCode.Up:                              case KeyCode.Down:                              case KeyCode.Left:                              case KeyCode.Right:                              case KeyCode.Prior:                              case KeyCode.Next:                              case KeyCode.Key_W:                              case KeyCode.Key_S:                              case KeyCode.Key_A:                              case KeyCode.Key_D:                              case KeyCode.Home:                              case KeyCode.Key_F:                                  if (!m_ctrlPressed)                                      ProcessPressedKey(p_event.KeyCode' p_event.KeyPressedDown' false);                                    UpdateKeyPressState(p_event.KeyCode' p_event.KeyPressedDown);                                  break;                                case KeyCode.Key_P:                                  if (p_event.KeyPressedDown)                                  {                                      uint texcount = 0;                                      if (TextureManager != null)                                          texcount = TextureManager.TextureCacheCount;                                      m_log.DebugFormat("FullUpdateCount:{0}' PrimCount:{1}' TextureCount:{2}' UniquePrim:{3}"' SceneGraph.PrimitiveCount' SceneGraph.Objects.Count' texcount' MeshManager.UniqueObjects);                                  }                                  break;                                case KeyCode.Key_C:                                  if (p_event.KeyPressedDown)                                  {                                      if (TextureManager != null)                                      {                                          TextureManager.ClearMemoryCache();                                        }                                  }                                  break;                          }
