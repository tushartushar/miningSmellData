Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,Cyclomatic complexity of the method is 8
Complex Method,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,Cyclomatic complexity of the method is 8
Complex Method,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordPositions,Cyclomatic complexity of the method is 7
Complex Method,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,Cyclomatic complexity of the method is 10
Long Parameter List,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ChordBoxImage,The method has 4 parameters.
Long Statement,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The length of the statement  "		if (_chordPositions [i] != MUTED && _chordPositions [i] != OPEN && _fingers [i] != NO_FINGER && !bars.ContainsKey (_fingers [i])) { " is 131.
Long Statement,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The length of the statement  "		_graphics.DrawString (_baseFret + "fr"' fretFont' _foregroundBrush' _xstart + _boxWidth + 0.3f * _fretWidth' _ystart - offset); " is 127.
Complex Conditional,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The conditional expression  "_chordPositions [i] != MUTED && _chordPositions [i] != OPEN && _fingers [i] != NO_FINGER && !bars.ContainsKey (_fingers [i])"  is complex.
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _fretWidth = 4 * _size;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _lineWidth = (int)Math.Ceiling (_size * 0.31);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _dotWidth = (int)Math.Ceiling (0.9 * _fretWidth);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _boxWidth = 5 * _fretWidth + 6 * _lineWidth;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _boxWidth = 5 * _fretWidth + 6 * _lineWidth;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: if (_size == 1) {  	_nameFontSize += 2;  	_fingerFontSize += 2;  	_fretFontSize += 2;  	_superScriptFontSize += 2;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: if (_size == 1) {  	_nameFontSize += 2;  	_fingerFontSize += 2;  	_fretFontSize += 2;  	_superScriptFontSize += 2;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: if (_size == 1) {  	_nameFontSize += 2;  	_fingerFontSize += 2;  	_fretFontSize += 2;  	_superScriptFontSize += 2;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: if (_size == 1) {  	_nameFontSize += 2;  	_fingerFontSize += 2;  	_fretFontSize += 2;  	_superScriptFontSize += 2;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _nameFontSize += 2;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _fingerFontSize += 2;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _fretFontSize += 2;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _superScriptFontSize += 2;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _imageWidth = (int)(_boxWidth + 5 * _fretWidth);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _signWidth = (int)(_fretWidth * 0.75);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,InitializeSizes,The following statement contains a magic number: _signRadius = _signWidth / 2;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseName,The following statement contains a magic number: for (int i = 1; i < splitString.Length; i++) {  	if (i % 2 == 0) {  		continue;  	}  	splitString [i] = ConvertSharpSign (splitString [i]);  	splitString [i] = ConvertFlatSign (splitString [i]);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseName,The following statement contains a magic number: if (i % 2 == 0) {  	continue;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseSize,The following statement contains a magic number: if (size == null) {  	_size = 1;  } else {  	double dsize;  	if (double.TryParse (size' out dsize)) {  		dsize = Math.Round (dsize' 0);  		_size = Convert.ToInt32 (Math.Min (Math.Max (1' dsize)' 10));  	} else {  		_size = 1;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseSize,The following statement contains a magic number: if (double.TryParse (size' out dsize)) {  	dsize = Math.Round (dsize' 0);  	_size = Convert.ToInt32 (Math.Min (Math.Max (1' dsize)' 10));  } else {  	_size = 1;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseSize,The following statement contains a magic number: _size = Convert.ToInt32 (Math.Min (Math.Max (1' dsize)' 10));  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord == null || !Regex.IsMatch (chord' @"[\dxX]{6}|((1|2)?[\dxX]-){5}(1|2)?[\dxX]")) {  	_error = true;  } else {  	string[] parts;  	if (chord.Length > 6) {  		parts = chord.Split ('-');  	} else {  		parts = new string[6];  		for (int i = 0; i < 6; i++) {  			parts [i] = chord [i].ToString ();  		}  	}  	int maxFret = 0' minFret = int.MaxValue;  	for (int i = 0; i < 6; i++) {  		if (parts [i].ToUpper () == "X") {  			_chordPositions [i] = MUTED;  		} else {  			_chordPositions [i] = int.Parse (parts [i]);  			maxFret = Math.Max (maxFret' _chordPositions [i]);  			if (_chordPositions [i] != 0) {  				minFret = Math.Min (minFret' _chordPositions [i]);  			}  		}  	}  	if (maxFret <= 5) {  		_baseFret = 1;  	} else {  		_baseFret = minFret;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord == null || !Regex.IsMatch (chord' @"[\dxX]{6}|((1|2)?[\dxX]-){5}(1|2)?[\dxX]")) {  	_error = true;  } else {  	string[] parts;  	if (chord.Length > 6) {  		parts = chord.Split ('-');  	} else {  		parts = new string[6];  		for (int i = 0; i < 6; i++) {  			parts [i] = chord [i].ToString ();  		}  	}  	int maxFret = 0' minFret = int.MaxValue;  	for (int i = 0; i < 6; i++) {  		if (parts [i].ToUpper () == "X") {  			_chordPositions [i] = MUTED;  		} else {  			_chordPositions [i] = int.Parse (parts [i]);  			maxFret = Math.Max (maxFret' _chordPositions [i]);  			if (_chordPositions [i] != 0) {  				minFret = Math.Min (minFret' _chordPositions [i]);  			}  		}  	}  	if (maxFret <= 5) {  		_baseFret = 1;  	} else {  		_baseFret = minFret;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord == null || !Regex.IsMatch (chord' @"[\dxX]{6}|((1|2)?[\dxX]-){5}(1|2)?[\dxX]")) {  	_error = true;  } else {  	string[] parts;  	if (chord.Length > 6) {  		parts = chord.Split ('-');  	} else {  		parts = new string[6];  		for (int i = 0; i < 6; i++) {  			parts [i] = chord [i].ToString ();  		}  	}  	int maxFret = 0' minFret = int.MaxValue;  	for (int i = 0; i < 6; i++) {  		if (parts [i].ToUpper () == "X") {  			_chordPositions [i] = MUTED;  		} else {  			_chordPositions [i] = int.Parse (parts [i]);  			maxFret = Math.Max (maxFret' _chordPositions [i]);  			if (_chordPositions [i] != 0) {  				minFret = Math.Min (minFret' _chordPositions [i]);  			}  		}  	}  	if (maxFret <= 5) {  		_baseFret = 1;  	} else {  		_baseFret = minFret;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord == null || !Regex.IsMatch (chord' @"[\dxX]{6}|((1|2)?[\dxX]-){5}(1|2)?[\dxX]")) {  	_error = true;  } else {  	string[] parts;  	if (chord.Length > 6) {  		parts = chord.Split ('-');  	} else {  		parts = new string[6];  		for (int i = 0; i < 6; i++) {  			parts [i] = chord [i].ToString ();  		}  	}  	int maxFret = 0' minFret = int.MaxValue;  	for (int i = 0; i < 6; i++) {  		if (parts [i].ToUpper () == "X") {  			_chordPositions [i] = MUTED;  		} else {  			_chordPositions [i] = int.Parse (parts [i]);  			maxFret = Math.Max (maxFret' _chordPositions [i]);  			if (_chordPositions [i] != 0) {  				minFret = Math.Min (minFret' _chordPositions [i]);  			}  		}  	}  	if (maxFret <= 5) {  		_baseFret = 1;  	} else {  		_baseFret = minFret;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord == null || !Regex.IsMatch (chord' @"[\dxX]{6}|((1|2)?[\dxX]-){5}(1|2)?[\dxX]")) {  	_error = true;  } else {  	string[] parts;  	if (chord.Length > 6) {  		parts = chord.Split ('-');  	} else {  		parts = new string[6];  		for (int i = 0; i < 6; i++) {  			parts [i] = chord [i].ToString ();  		}  	}  	int maxFret = 0' minFret = int.MaxValue;  	for (int i = 0; i < 6; i++) {  		if (parts [i].ToUpper () == "X") {  			_chordPositions [i] = MUTED;  		} else {  			_chordPositions [i] = int.Parse (parts [i]);  			maxFret = Math.Max (maxFret' _chordPositions [i]);  			if (_chordPositions [i] != 0) {  				minFret = Math.Min (minFret' _chordPositions [i]);  			}  		}  	}  	if (maxFret <= 5) {  		_baseFret = 1;  	} else {  		_baseFret = minFret;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord.Length > 6) {  	parts = chord.Split ('-');  } else {  	parts = new string[6];  	for (int i = 0; i < 6; i++) {  		parts [i] = chord [i].ToString ();  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord.Length > 6) {  	parts = chord.Split ('-');  } else {  	parts = new string[6];  	for (int i = 0; i < 6; i++) {  		parts [i] = chord [i].ToString ();  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (chord.Length > 6) {  	parts = chord.Split ('-');  } else {  	parts = new string[6];  	for (int i = 0; i < 6; i++) {  		parts [i] = chord [i].ToString ();  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: parts = new string[6];  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	parts [i] = chord [i].ToString ();  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	if (parts [i].ToUpper () == "X") {  		_chordPositions [i] = MUTED;  	} else {  		_chordPositions [i] = int.Parse (parts [i]);  		maxFret = Math.Max (maxFret' _chordPositions [i]);  		if (_chordPositions [i] != 0) {  			minFret = Math.Min (minFret' _chordPositions [i]);  		}  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,ParseChord,The following statement contains a magic number: if (maxFret <= 5) {  	_baseFret = 1;  } else {  	_baseFret = minFret;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordBox,The following statement contains a magic number: for (int i = 0; i < 6; i++) {  	float x = _xstart + (i * totalFretWidth);  	_graphics.DrawLine (pen' x' _ystart' x' _ystart + _boxHeight - pen.Width);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	if (_chordPositions [i] != MUTED && _chordPositions [i] != OPEN && _fingers [i] != NO_FINGER && !bars.ContainsKey (_fingers [i])) {  		Bar bar = new Bar {  			Str = i'  			Pos = _chordPositions [i]'  			Length = 0'  			Finger = _fingers [i]  		};  		for (int j = i + 1; j < 6; j++) {  			if (_fingers [j] == bar.Finger && _chordPositions [j] == _chordPositions [i]) {  				bar.Length = j - i;  			}  		}  		if (bar.Length > 0) {  			bars.Add (bar.Finger' bar);  		}  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	if (_chordPositions [i] != MUTED && _chordPositions [i] != OPEN && _fingers [i] != NO_FINGER && !bars.ContainsKey (_fingers [i])) {  		Bar bar = new Bar {  			Str = i'  			Pos = _chordPositions [i]'  			Length = 0'  			Finger = _fingers [i]  		};  		for (int j = i + 1; j < 6; j++) {  			if (_fingers [j] == bar.Finger && _chordPositions [j] == _chordPositions [i]) {  				bar.Length = j - i;  			}  		}  		if (bar.Length > 0) {  			bars.Add (bar.Finger' bar);  		}  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: if (_chordPositions [i] != MUTED && _chordPositions [i] != OPEN && _fingers [i] != NO_FINGER && !bars.ContainsKey (_fingers [i])) {  	Bar bar = new Bar {  		Str = i'  		Pos = _chordPositions [i]'  		Length = 0'  		Finger = _fingers [i]  	};  	for (int j = i + 1; j < 6; j++) {  		if (_fingers [j] == bar.Finger && _chordPositions [j] == _chordPositions [i]) {  			bar.Length = j - i;  		}  	}  	if (bar.Length > 0) {  		bars.Add (bar.Finger' bar);  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: for (int j = i + 1; j < 6; j++) {  	if (_fingers [j] == bar.Finger && _chordPositions [j] == _chordPositions [i]) {  		bar.Length = j - i;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: foreach (Bar bar in bars.Values) {  	float yTempOffset = 0.0f;  	if (bar.Pos == 1) {  		// the bar must go a little higher in order to be shown correctly  		yTempOffset = -0.3f * totalFretWidth;  	}  	float xstart = _xstart + bar.Str * totalFretWidth - (_dotWidth / 2);  	float y = _ystart + (bar.Pos - _baseFret) * totalFretWidth - (0.6f * totalFretWidth) + yTempOffset;  	Pen pen = new Pen (_foregroundBrush' arcWidth);  	Pen pen2 = new Pen (_foregroundBrush' 1.3f * arcWidth);  	//_graphics.DrawLine(pen' xstart' y' xend' y);  	float barWidth = bar.Length * totalFretWidth + _dotWidth;  	_graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  	_graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  	_graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: foreach (Bar bar in bars.Values) {  	float yTempOffset = 0.0f;  	if (bar.Pos == 1) {  		// the bar must go a little higher in order to be shown correctly  		yTempOffset = -0.3f * totalFretWidth;  	}  	float xstart = _xstart + bar.Str * totalFretWidth - (_dotWidth / 2);  	float y = _ystart + (bar.Pos - _baseFret) * totalFretWidth - (0.6f * totalFretWidth) + yTempOffset;  	Pen pen = new Pen (_foregroundBrush' arcWidth);  	Pen pen2 = new Pen (_foregroundBrush' 1.3f * arcWidth);  	//_graphics.DrawLine(pen' xstart' y' xend' y);  	float barWidth = bar.Length * totalFretWidth + _dotWidth;  	_graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  	_graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  	_graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: foreach (Bar bar in bars.Values) {  	float yTempOffset = 0.0f;  	if (bar.Pos == 1) {  		// the bar must go a little higher in order to be shown correctly  		yTempOffset = -0.3f * totalFretWidth;  	}  	float xstart = _xstart + bar.Str * totalFretWidth - (_dotWidth / 2);  	float y = _ystart + (bar.Pos - _baseFret) * totalFretWidth - (0.6f * totalFretWidth) + yTempOffset;  	Pen pen = new Pen (_foregroundBrush' arcWidth);  	Pen pen2 = new Pen (_foregroundBrush' 1.3f * arcWidth);  	//_graphics.DrawLine(pen' xstart' y' xend' y);  	float barWidth = bar.Length * totalFretWidth + _dotWidth;  	_graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  	_graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  	_graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: foreach (Bar bar in bars.Values) {  	float yTempOffset = 0.0f;  	if (bar.Pos == 1) {  		// the bar must go a little higher in order to be shown correctly  		yTempOffset = -0.3f * totalFretWidth;  	}  	float xstart = _xstart + bar.Str * totalFretWidth - (_dotWidth / 2);  	float y = _ystart + (bar.Pos - _baseFret) * totalFretWidth - (0.6f * totalFretWidth) + yTempOffset;  	Pen pen = new Pen (_foregroundBrush' arcWidth);  	Pen pen2 = new Pen (_foregroundBrush' 1.3f * arcWidth);  	//_graphics.DrawLine(pen' xstart' y' xend' y);  	float barWidth = bar.Length * totalFretWidth + _dotWidth;  	_graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  	_graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  	_graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: foreach (Bar bar in bars.Values) {  	float yTempOffset = 0.0f;  	if (bar.Pos == 1) {  		// the bar must go a little higher in order to be shown correctly  		yTempOffset = -0.3f * totalFretWidth;  	}  	float xstart = _xstart + bar.Str * totalFretWidth - (_dotWidth / 2);  	float y = _ystart + (bar.Pos - _baseFret) * totalFretWidth - (0.6f * totalFretWidth) + yTempOffset;  	Pen pen = new Pen (_foregroundBrush' arcWidth);  	Pen pen2 = new Pen (_foregroundBrush' 1.3f * arcWidth);  	//_graphics.DrawLine(pen' xstart' y' xend' y);  	float barWidth = bar.Length * totalFretWidth + _dotWidth;  	_graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  	_graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  	_graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: foreach (Bar bar in bars.Values) {  	float yTempOffset = 0.0f;  	if (bar.Pos == 1) {  		// the bar must go a little higher in order to be shown correctly  		yTempOffset = -0.3f * totalFretWidth;  	}  	float xstart = _xstart + bar.Str * totalFretWidth - (_dotWidth / 2);  	float y = _ystart + (bar.Pos - _baseFret) * totalFretWidth - (0.6f * totalFretWidth) + yTempOffset;  	Pen pen = new Pen (_foregroundBrush' arcWidth);  	Pen pen2 = new Pen (_foregroundBrush' 1.3f * arcWidth);  	//_graphics.DrawLine(pen' xstart' y' xend' y);  	float barWidth = bar.Length * totalFretWidth + _dotWidth;  	_graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  	_graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  	_graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: foreach (Bar bar in bars.Values) {  	float yTempOffset = 0.0f;  	if (bar.Pos == 1) {  		// the bar must go a little higher in order to be shown correctly  		yTempOffset = -0.3f * totalFretWidth;  	}  	float xstart = _xstart + bar.Str * totalFretWidth - (_dotWidth / 2);  	float y = _ystart + (bar.Pos - _baseFret) * totalFretWidth - (0.6f * totalFretWidth) + yTempOffset;  	Pen pen = new Pen (_foregroundBrush' arcWidth);  	Pen pen2 = new Pen (_foregroundBrush' 1.3f * arcWidth);  	//_graphics.DrawLine(pen' xstart' y' xend' y);  	float barWidth = bar.Length * totalFretWidth + _dotWidth;  	_graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  	_graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  	_graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: _graphics.DrawArc (pen' xstart' y' barWidth' totalFretWidth' -1' -178);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: _graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: _graphics.DrawArc (pen2' xstart' y - arcWidth' barWidth' totalFretWidth + arcWidth' -4' -172);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: _graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: _graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawBars,The following statement contains a magic number: _graphics.DrawArc (pen2' xstart' y - 1.5f * arcWidth' barWidth' totalFretWidth + 3 * arcWidth' -20' -150);  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (maxParts > 4) {  	maxParts = 4;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (maxParts > 4) {  	maxParts = 4;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: maxParts = 4;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: for (int i = 0; i < maxParts; i++) {  	if (i % 2 == 0) {  		//odd parts are normal text  		SizeF stringSize2 = _graphics.MeasureString (parts [i]' nameFont);  		chordNameSize += 0.75f * stringSize2.Width;  	} else {  		//even parts are superscipts  		SizeF stringSize2 = _graphics.MeasureString (parts [i]' superFont);  		chordNameSize += 0.8f * stringSize2.Width;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (i % 2 == 0) {  	//odd parts are normal text  	SizeF stringSize2 = _graphics.MeasureString (parts [i]' nameFont);  	chordNameSize += 0.75f * stringSize2.Width;  } else {  	//even parts are superscipts  	SizeF stringSize2 = _graphics.MeasureString (parts [i]' superFont);  	chordNameSize += 0.8f * stringSize2.Width;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (chordNameSize < _boxWidth) {  	xTextStart = _xstart + ((_boxWidth - chordNameSize) / 2f);  } else if ((xTextStart + chordNameSize) > _imageWidth) {  	// if it goes outside the boundaries  	float nx = (xTextStart + chordNameSize) / 2f;  	if (nx < _imageWidth / 2) {  		// if it can fit inside the image  		xTextStart = (_imageWidth / 2) - nx;  	} else {  		xTextStart = 2f;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (chordNameSize < _boxWidth) {  	xTextStart = _xstart + ((_boxWidth - chordNameSize) / 2f);  } else if ((xTextStart + chordNameSize) > _imageWidth) {  	// if it goes outside the boundaries  	float nx = (xTextStart + chordNameSize) / 2f;  	if (nx < _imageWidth / 2) {  		// if it can fit inside the image  		xTextStart = (_imageWidth / 2) - nx;  	} else {  		xTextStart = 2f;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if ((xTextStart + chordNameSize) > _imageWidth) {  	// if it goes outside the boundaries  	float nx = (xTextStart + chordNameSize) / 2f;  	if (nx < _imageWidth / 2) {  		// if it can fit inside the image  		xTextStart = (_imageWidth / 2) - nx;  	} else {  		xTextStart = 2f;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if ((xTextStart + chordNameSize) > _imageWidth) {  	// if it goes outside the boundaries  	float nx = (xTextStart + chordNameSize) / 2f;  	if (nx < _imageWidth / 2) {  		// if it can fit inside the image  		xTextStart = (_imageWidth / 2) - nx;  	} else {  		xTextStart = 2f;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (nx < _imageWidth / 2) {  	// if it can fit inside the image  	xTextStart = (_imageWidth / 2) - nx;  } else {  	xTextStart = 2f;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (nx < _imageWidth / 2) {  	// if it can fit inside the image  	xTextStart = (_imageWidth / 2) - nx;  } else {  	xTextStart = 2f;  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: xTextStart = (_imageWidth / 2) - nx;  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: for (int i = 0; i < maxParts; i++) {  	if (i % 2 == 0) {  		SizeF stringSize2 = _graphics.MeasureString (parts [i]' nameFont);  		_graphics.DrawString (parts [i]' nameFont' _foregroundBrush' xTextStart' 0.2f * _superScriptFontSize);  		xTextStart += 0.75f * stringSize2.Width;  	} else {  		SizeF stringSize2 = _graphics.MeasureString (parts [i]' superFont);  		_graphics.DrawString (parts [i]' superFont' _foregroundBrush' xTextStart' 0);  		xTextStart += 0.8f * stringSize2.Width;  	}  }  
Magic Number,EinarEgilsson.Chords,ChordBoxImage,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordBoxImage.cs,DrawChordName,The following statement contains a magic number: if (i % 2 == 0) {  	SizeF stringSize2 = _graphics.MeasureString (parts [i]' nameFont);  	_graphics.DrawString (parts [i]' nameFont' _foregroundBrush' xTextStart' 0.2f * _superScriptFontSize);  	xTextStart += 0.75f * stringSize2.Width;  } else {  	SizeF stringSize2 = _graphics.MeasureString (parts [i]' superFont);  	_graphics.DrawString (parts [i]' superFont' _foregroundBrush' xTextStart' 0);  	xTextStart += 0.8f * stringSize2.Width;  }  
Magic Number,EinarEgilsson.Chords,ChordHandler,D:\newReposJune17\einaregilsson_ChordImageGenerator\ChordHandler.cs,ProcessRequest,The following statement contains a magic number: response.Cache.SetMaxAge (TimeSpan.FromDays (7));  
