Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Winterdom.Viasfora.Rainbow,RainbowToolTipSource,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowToolTipSource.cs,AugmentQuickInfoSession,Cyclomatic complexity of the method is 8
Complex Method,Winterdom.Viasfora.Rainbow,TextBufferBraces,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\TextBufferBraces.cs,GetBracePairFromPosition,Cyclomatic complexity of the method is 8
Long Parameter List,Winterdom.Viasfora.Rainbow,RainbowCommandHandler,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowCommandHandler.cs,Exec,The method has 5 parameters. Parameters: pguidCmdGroup' nCmdID' nCmdexecopt' pvaIn' pvaOut
Long Identifier,Winterdom.Viasfora.Rainbow.Classifications,RainbowClassifications,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Classifications\RainbowClassifications.cs,,The length of the parameter RainbowErrorClassificationType is 30.
Empty Catch Block,Winterdom.Viasfora.Rainbow,RainbowProvider,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowProvider.cs,OnScheduledUpdate,The method has an empty catch block.
Empty Catch Block,Winterdom.Viasfora.Design,QuickInfoPresenter,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Design\QuickInfoPresenter.xaml.cs,Close,The method has an empty catch block.
Empty Catch Block,Winterdom.Viasfora.Util,ToolTipWindow,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Util\ToolTipWindow.cs,ReleaseView,The method has an empty catch block.
Magic Number,Winterdom.Viasfora.Rainbow,PerBraceStacker,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\PerBraceStacker.cs,PerBraceStacker,The following statement contains a magic number: for ( int i=0; i < braceList.Length; i += 2 ) {          var pairs = new Stack<BracePos>();          this.stack[braceList[i]] = pairs;          this.stack[braceList[i + 1]] = pairs;        }
Magic Number,Winterdom.Viasfora.Rainbow,RainbowHighlight,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowHighlight.cs,MakeAdornment,The following statement contains a magic number: path.StrokeThickness = 1.3;
Magic Number,Winterdom.Viasfora.Rainbow,RainbowHighlight,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowHighlight.cs,MakeBackgroundBrush,The following statement contains a magic number: newBrush.Opacity = 0.10;
Magic Number,Winterdom.Viasfora.Rainbow,RainbowProvider,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowProvider.cs,ScheduleUpdate,The following statement contains a magic number: if ( dispatcherTimer == null ) {          dispatcherTimer = new DispatcherTimer(DispatcherPriority.Background' this.Dispatcher);          dispatcherTimer.Interval = TimeSpan.FromMilliseconds(500);          dispatcherTimer.Tick += OnScheduledUpdate;        }
Magic Number,Winterdom.Viasfora.Rainbow,RainbowTipHighlight,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowTipHighlight.cs,CreateVisual,The following statement contains a magic number: highlight.Opacity = 0.10;
Magic Number,Winterdom.Viasfora.Rainbow,RainbowToolTipSource,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowToolTipSource.cs,AugmentQuickInfoSession,The following statement contains a magic number: if ( toolTipWindow == null ) {          toolTipWindow = this.provider.ToolTipProvider.CreateToolTip(session.TextView);          toolTipWindow.SetSize(60' 5);        }
Magic Number,Winterdom.Viasfora.Rainbow,RainbowToolTipSource,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowToolTipSource.cs,AugmentQuickInfoSession,The following statement contains a magic number: if ( toolTipWindow == null ) {          toolTipWindow = this.provider.ToolTipProvider.CreateToolTip(session.TextView);          toolTipWindow.SetSize(60' 5);        }
Magic Number,Winterdom.Viasfora.Rainbow,RainbowToolTipSource,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowToolTipSource.cs,IsTooClose,The following statement contains a magic number: return distance < 100;
Magic Number,Winterdom.Viasfora.Rainbow,TextBufferBraces,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\TextBufferBraces.cs,TextBufferBraces,The following statement contains a magic number: if ( this.language != null ) {          this.braceScanner = this.language.GetService<IBraceScanner>();            this.braceList.Clear();          this.BraceChars = this.braceScanner.BraceList;          for ( int i = 0; i < BraceChars.Length; i += 2 ) {            this.braceList.Add(BraceChars[i]' BraceChars[i + 1]);          }        }
Magic Number,Winterdom.Viasfora.Rainbow,TextBufferBraces,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\TextBufferBraces.cs,EnsureLinesInPreferredSpan,The following statement contains a magic number: int minSpanLen = Math.Max(100' (int)(span.Snapshot.Length * 0.10));
Magic Number,Winterdom.Viasfora.Rainbow,TextBufferBraces,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\TextBufferBraces.cs,EnsureLinesInPreferredSpan,The following statement contains a magic number: int minSpanLen = Math.Max(100' (int)(span.Snapshot.Length * 0.10));
Magic Number,Winterdom.Viasfora.Rainbow,TextBufferBraces,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\TextBufferBraces.cs,FindIndexOfBraceAtOrAfter,The following statement contains a magic number: while ( first <= last ) {          int mid = (first + last) / 2;          BracePos midPos = braces[mid];          if ( midPos.Position < position ) {            // keep looking in second half            first = mid + 1;          } else if ( midPos.Position > position ) {            // keep looking in first half            candidate = mid;            last = mid - 1;          } else {            // we've got an exact match            candidate = mid;            break;          }        }
Magic Number,Winterdom.Viasfora.Rainbow,TextBufferBraces,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\TextBufferBraces.cs,FindIndexOfBraceBefore,The following statement contains a magic number: while ( first <= last ) {          int mid = (first + last) / 2;          BracePos midPos = braces[mid];          if ( midPos.Position < position ) {            // keep looking in second half            candidate = mid;            first = mid + 1;          } else if ( midPos.Position > position ) {            // keep looking in first half            last = mid - 1;          } else {            // we've got an exact match            // but we're interested on an strict            // order' so return the item before this one            candidate = mid - 1;            break;          }        }
Magic Number,Winterdom.Viasfora.Design,QuickInfoPresenter,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Design\QuickInfoPresenter.xaml.cs,CreateViewForBuffer,The following statement contains a magic number: border.Margin = new Thickness(5' 3' 5' 3);
Magic Number,Winterdom.Viasfora.Design,QuickInfoPresenter,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Design\QuickInfoPresenter.xaml.cs,CreateViewForBuffer,The following statement contains a magic number: border.Margin = new Thickness(5' 3' 5' 3);
Magic Number,Winterdom.Viasfora.Design,QuickInfoPresenter,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Design\QuickInfoPresenter.xaml.cs,CreateViewForBuffer,The following statement contains a magic number: border.Margin = new Thickness(5' 3' 5' 3);
Magic Number,Winterdom.Viasfora.Design,QuickInfoPresenter,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Design\QuickInfoPresenter.xaml.cs,CreateViewForBuffer,The following statement contains a magic number: border.Margin = new Thickness(5' 3' 5' 3);
Magic Number,Winterdom.Viasfora.Util,ToolTipWindow,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Util\ToolTipWindow.cs,SetSize,The following statement contains a magic number: double zoom = (tipView.ZoomLevel / 100.0);
Magic Number,Winterdom.Viasfora.Util,ToolTipWindow,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Util\ToolTipWindow.cs,CreateTipView,The following statement contains a magic number: this.tipView.ZoomLevel = GetSourceZoomFactor() * ZoomFactor * 100;
Magic Number,Winterdom.Viasfora.Util,ToolTipWindow,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\Util\ToolTipWindow.cs,GetSourceZoomFactor,The following statement contains a magic number: if ( wpfSource != null ) {          return wpfSource.ZoomLevel / 100;        } else {          return 1.0;        }
Missing Default,Winterdom.Viasfora.Rainbow,RainbowCommandHandler,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowCommandHandler.cs,QueryStatus,The following switch statement is missing a default case: switch ( cmdId) {            case PkgCmdIdList.cmdidRainbowPrevious:            case PkgCmdIdList.cmdidRainbowNext:              enabled = true;              break;          }
Missing Default,Winterdom.Viasfora.Rainbow,RainbowCommandHandler,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowCommandHandler.cs,Exec,The following switch statement is missing a default case: switch ( (int)nCmdID ) {            case PkgCmdIdList.cmdidRainbowPrevious:              handled = MoveRainbow(true' mode);              break;            case PkgCmdIdList.cmdidRainbowNext:              handled = MoveRainbow(false' mode);              break;          }
Missing Default,Winterdom.Viasfora.Rainbow,RainbowToolTipPresenter,C:\repos\tomasr_viasfora\src\Viasfora.Rainbow\RainbowToolTipPresenter.cs,ExecuteKeyboardCommand,The following switch statement is missing a default case: switch ( command ) {          case IntellisenseKeyboardCommand.Escape:            if ( this.session != null ) {              this.session.Dismiss();              return true;            }            break;        }
