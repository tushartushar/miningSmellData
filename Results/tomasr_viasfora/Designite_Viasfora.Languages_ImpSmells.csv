Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,Cyclomatic complexity of the method is 8
Complex Conditional,Winterdom.Viasfora.Languages.BraceScanners,PythonBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PythonBraceScanner.cs,ParseText,The conditional expression  "(tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"')                    || (tc.Char() == '\'' && tc.NChar() == '\'' && tc.NNChar() == '\'')"  is complex.
Complex Conditional,Winterdom.Viasfora.Languages.Sequences,BasicCStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\BasicCStringScanner.cs,ParseEscapeSequence,The conditional expression  "f == 'x' || f == 'X' || f == 'u' || f == 'U'"  is complex.
Complex Conditional,Winterdom.Viasfora.Languages.Sequences,RStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\RStringScanner.cs,ParseEscapeSequence,The conditional expression  "(f == 'x' || f == 'u' || f == 'U') && text.Char() != '{'"  is complex.
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( Char.IsDigit(tc.Char()) && tc.NChar() == '\'' ) {            // this is a C++ 14 digit separator' such as 1'000'000            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( Char.IsDigit(tc.Char()) && tc.NChar() == '\'' ) {            // this is a C++ 14 digit separator' such as 1'000'000            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CBraceScanner.cs,ParseCharLiteral,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '"' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CBraceScanner.cs,ParseMultiLineComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '*' && tc.NChar() == '/' ) {            tc.Skip(2);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,Reset,The following statement contains a magic number: this.nestingLevel = (state & 0xFF0000) >> 24;
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stString;            this.multiLine = true;            tc.Skip(2);            this.ParseMultiLineString(tc);          } else if ( tc.Char() == '$' && tc.NChar() == '"' ) {            // Roslyn interpolated string            this.parsingExpression = false;            this.status = stIString;            tc.Skip(2);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '$' && tc.NChar() == '@' && tc.NNChar() == '"' ) {            this.status = stIString;            this.multiLine = true;            this.parsingExpression = false;            tc.Skip(3);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stString;            this.multiLine = true;            tc.Skip(2);            this.ParseMultiLineString(tc);          } else if ( tc.Char() == '$' && tc.NChar() == '"' ) {            // Roslyn interpolated string            this.parsingExpression = false;            this.status = stIString;            tc.Skip(2);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '$' && tc.NChar() == '@' && tc.NNChar() == '"' ) {            this.status = stIString;            this.multiLine = true;            this.parsingExpression = false;            tc.Skip(3);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stString;            this.multiLine = true;            tc.Skip(2);            this.ParseMultiLineString(tc);          } else if ( tc.Char() == '$' && tc.NChar() == '"' ) {            // Roslyn interpolated string            this.parsingExpression = false;            this.status = stIString;            tc.Skip(2);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '$' && tc.NChar() == '@' && tc.NNChar() == '"' ) {            this.status = stIString;            this.multiLine = true;            this.parsingExpression = false;            tc.Skip(3);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stString;            this.multiLine = true;            tc.Skip(2);            this.ParseMultiLineString(tc);          } else if ( tc.Char() == '$' && tc.NChar() == '"' ) {            // Roslyn interpolated string            this.parsingExpression = false;            this.status = stIString;            tc.Skip(2);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '$' && tc.NChar() == '@' && tc.NNChar() == '"' ) {            this.status = stIString;            this.multiLine = true;            this.parsingExpression = false;            tc.Skip(3);            return this.ParseInterpolatedString(tc' ref pos);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseCharLiteral,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '"' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseMultiLineString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '"' && tc.NChar() == '"' ) {            // means a single embedded double quote            tc.Skip(2);          } else if ( tc.Char() == '"' ) {            tc.Next();            this.status = stText;            this.multiLine = false;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseMultiLineComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '*' && tc.NChar() == '/' ) {            tc.Skip(2);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseInterpolatedString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( parsingExpression ) {            //            // we're inside an interpolated section            //            if ( tc.Char() == '"' ) {              // opening string              tc.Next();              this.ParseString(tc);              this.status = stIString;            } else if ( tc.Char() == '\'' ) {              tc.Next();              ParseCharLiteral(tc);              this.status = stIString;            } else if ( tc.Char() == '}' ) {              // reached the end              this.nestingLevel--;              if ( nestingLevel == 0 ) {                this.parsingExpression = false;              }              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              tc.Next();              return true;            } else if ( BraceList.Contains(tc.Char()) ) {              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              if ( tc.Char() == '{' )                this.nestingLevel++;              tc.Next();              return true;            } else {              tc.Next();            }          } else {            //            // parsing the string part            // if it's an at-string' don't look for escape sequences            //            if ( tc.Char() == '\\' && !this.multiLine ) {              // skip over escape sequences              tc.Skip(2);            } else if ( tc.Char() == '{' && tc.NChar() == '{' ) {              tc.Skip(2);            } else if ( tc.Char() == '{' ) {              this.parsingExpression = true;              this.nestingLevel++;              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              tc.Next();              return true;            } else if ( this.multiLine && tc.Char() == '"' && tc.NChar() == '"' ) {              // single embedded double quote              tc.Skip(2);            } else if ( tc.Char() == '"' ) {              // done parsing the interpolated string              this.status = stText;              this.multiLine = false;              tc.Next();              break;            } else {              tc.Next();            }          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseInterpolatedString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( parsingExpression ) {            //            // we're inside an interpolated section            //            if ( tc.Char() == '"' ) {              // opening string              tc.Next();              this.ParseString(tc);              this.status = stIString;            } else if ( tc.Char() == '\'' ) {              tc.Next();              ParseCharLiteral(tc);              this.status = stIString;            } else if ( tc.Char() == '}' ) {              // reached the end              this.nestingLevel--;              if ( nestingLevel == 0 ) {                this.parsingExpression = false;              }              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              tc.Next();              return true;            } else if ( BraceList.Contains(tc.Char()) ) {              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              if ( tc.Char() == '{' )                this.nestingLevel++;              tc.Next();              return true;            } else {              tc.Next();            }          } else {            //            // parsing the string part            // if it's an at-string' don't look for escape sequences            //            if ( tc.Char() == '\\' && !this.multiLine ) {              // skip over escape sequences              tc.Skip(2);            } else if ( tc.Char() == '{' && tc.NChar() == '{' ) {              tc.Skip(2);            } else if ( tc.Char() == '{' ) {              this.parsingExpression = true;              this.nestingLevel++;              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              tc.Next();              return true;            } else if ( this.multiLine && tc.Char() == '"' && tc.NChar() == '"' ) {              // single embedded double quote              tc.Skip(2);            } else if ( tc.Char() == '"' ) {              // done parsing the interpolated string              this.status = stText;              this.multiLine = false;              tc.Next();              break;            } else {              tc.Next();            }          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,ParseInterpolatedString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( parsingExpression ) {            //            // we're inside an interpolated section            //            if ( tc.Char() == '"' ) {              // opening string              tc.Next();              this.ParseString(tc);              this.status = stIString;            } else if ( tc.Char() == '\'' ) {              tc.Next();              ParseCharLiteral(tc);              this.status = stIString;            } else if ( tc.Char() == '}' ) {              // reached the end              this.nestingLevel--;              if ( nestingLevel == 0 ) {                this.parsingExpression = false;              }              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              tc.Next();              return true;            } else if ( BraceList.Contains(tc.Char()) ) {              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              if ( tc.Char() == '{' )                this.nestingLevel++;              tc.Next();              return true;            } else {              tc.Next();            }          } else {            //            // parsing the string part            // if it's an at-string' don't look for escape sequences            //            if ( tc.Char() == '\\' && !this.multiLine ) {              // skip over escape sequences              tc.Skip(2);            } else if ( tc.Char() == '{' && tc.NChar() == '{' ) {              tc.Skip(2);            } else if ( tc.Char() == '{' ) {              this.parsingExpression = true;              this.nestingLevel++;              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              tc.Next();              return true;            } else if ( this.multiLine && tc.Char() == '"' && tc.NChar() == '"' ) {              // single embedded double quote              tc.Skip(2);            } else if ( tc.Char() == '"' ) {              // done parsing the interpolated string              this.status = stText;              this.multiLine = false;              tc.Next();              break;            } else {              tc.Next();            }          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CSharpBraceScanner.cs,EncodedState,The following statement contains a magic number: encoded |= (nestingLevel & 0xFF) << 24;
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CssBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CssBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.state = stComment;            tc.Skip(2);            ParseComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            // CSS doesn't really support single-line comments'             // but SASS does' and it doesn't harm too            // much to implement it as a single thing            tc.SkipRemainder();          } else if ( tc.Char() == '"' ) {            this.state = stDoubleQuotedString;            tc.Next();            ParseDString(tc);          } else if ( tc.Char() == '\'' ) {            this.state = stSingleQuotedString;            tc.Next();            ParseString(tc);          } else if ( this.BraceList.Contains(tc.Char()) ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CssBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CssBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // escape sequence            // could be 1-6 hex digits or something else            tc.Skip(2);          } else if ( tc.Char() == quote ) {            tc.Next();            this.state = stText;            break;          }          tc.Next();        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,CssBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\CssBraceScanner.cs,ParseComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '*' && tc.NChar() == '/' ) {            tc.Skip(2);            this.state = stText;            return;          }          tc.Next();        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '(' && tc.NChar() == '*' && tc.NNChar() != ')') {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stVerbatimString;            tc.Skip(2);            this.ParseVerbatimString(tc);          } else if ( tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"' ) {            this.status = stTripleQuotedString;            tc.Skip(3);            this.ParseTripleQuotedString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '<' && tc.NChar() == '\'') {            // this is just a generic parameter' so skip it already            tc.Skip(2);          } else if ( Char.IsLetterOrDigit(tc.Char()) && tc.NChar() == '\'' ) {            // identifier like c'            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            this.status = stChar;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '(' && tc.NChar() == '*' && tc.NNChar() != ')') {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stVerbatimString;            tc.Skip(2);            this.ParseVerbatimString(tc);          } else if ( tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"' ) {            this.status = stTripleQuotedString;            tc.Skip(3);            this.ParseTripleQuotedString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '<' && tc.NChar() == '\'') {            // this is just a generic parameter' so skip it already            tc.Skip(2);          } else if ( Char.IsLetterOrDigit(tc.Char()) && tc.NChar() == '\'' ) {            // identifier like c'            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            this.status = stChar;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '(' && tc.NChar() == '*' && tc.NNChar() != ')') {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stVerbatimString;            tc.Skip(2);            this.ParseVerbatimString(tc);          } else if ( tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"' ) {            this.status = stTripleQuotedString;            tc.Skip(3);            this.ParseTripleQuotedString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '<' && tc.NChar() == '\'') {            // this is just a generic parameter' so skip it already            tc.Skip(2);          } else if ( Char.IsLetterOrDigit(tc.Char()) && tc.NChar() == '\'' ) {            // identifier like c'            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            this.status = stChar;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '(' && tc.NChar() == '*' && tc.NNChar() != ')') {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stVerbatimString;            tc.Skip(2);            this.ParseVerbatimString(tc);          } else if ( tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"' ) {            this.status = stTripleQuotedString;            tc.Skip(3);            this.ParseTripleQuotedString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '<' && tc.NChar() == '\'') {            // this is just a generic parameter' so skip it already            tc.Skip(2);          } else if ( Char.IsLetterOrDigit(tc.Char()) && tc.NChar() == '\'' ) {            // identifier like c'            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            this.status = stChar;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '(' && tc.NChar() == '*' && tc.NNChar() != ')') {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stVerbatimString;            tc.Skip(2);            this.ParseVerbatimString(tc);          } else if ( tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"' ) {            this.status = stTripleQuotedString;            tc.Skip(3);            this.ParseTripleQuotedString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '<' && tc.NChar() == '\'') {            // this is just a generic parameter' so skip it already            tc.Skip(2);          } else if ( Char.IsLetterOrDigit(tc.Char()) && tc.NChar() == '\'' ) {            // identifier like c'            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            this.status = stChar;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseCharLiteral,The following statement contains a magic number: if ( tc.Char() == '\\' ) {          // skip until next quote          tc.Skip(2);          while ( !tc.EndOfLine && tc.Char() != '\'' ) {            tc.Next();          }          tc.Next();        } else {          // skip the first char' as it's going to be a literal          // however' if the next char isn't a '' assume          // this is a generic declaration          tc.Next();          if ( tc.Char() == '\'' ) {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '"' ) {            tc.Next();            this.status = stText;            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseTripleQuotedString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"' ) {            tc.Skip(3);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,FSharpBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\FSharpBraceScanner.cs,ParseMultiLineComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '*' && tc.NChar() == ')' ) {            tc.Skip(2);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,Reset,The following statement contains a magic number: this.nestingLevel = (state & 0xFF0000) >> 24;
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '/' && CheckPrevious(tc.PreviousToken()) ) {            // probably a regular expression literal            tc.Next();            this.status = stRegex;            this.ParseRegex(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseCharLiteral(tc);          } else if ( tc.Char() == '`' ) {            this.status = stIString;            tc.Next();            return this.ParseInterpolatedString(tc' ref pos);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,ParseCharLiteral,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,ParseRegex,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '/' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '"' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,ParseMultiLineComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '*' && tc.NChar() == '/' ) {            tc.Skip(2);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,ParseInterpolatedString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( parsingExpression ) {            // inside template literal expression in ${}            if ( ParseTemplateExpressionChar(tc' ref pos) )              return true;          } else {            // in the string part            if ( tc.Char() == '\\' ) {              // skip over escape sequences              tc.Skip(2);            } else if ( tc.Char() == '$' && tc.NChar() == '{' ) {              // opening expression              this.parsingExpression = true;              this.nestingLevel++;              tc.Next(); // skip $              pos = new CharPos(tc.Char()' tc.AbsolutePosition' EncodedState());              tc.Next(); // skip {              return true;            } else if ( tc.Char() == '`' ) {              // done parsing the template               this.status = stText;              tc.Next();              break;            } else {              tc.Next();            }          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,JScriptBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\JScriptBraceScanner.cs,EncodedState,The following statement contains a magic number: encoded |= (nestingLevel & 0xFF) << 24;
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '<' && tc.NChar() == '#' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '#' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '\'' ) {            this.status = stHereString;            tc.Skip(2);            this.ParseHereString(tc);          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stHereExpandableString;            tc.Skip(2);            this.ParseHereExpandableString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseExpandableString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '<' && tc.NChar() == '#' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '#' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '\'' ) {            this.status = stHereString;            tc.Skip(2);            this.ParseHereString(tc);          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stHereExpandableString;            tc.Skip(2);            this.ParseHereExpandableString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseExpandableString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '<' && tc.NChar() == '#' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '#' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '@' && tc.NChar() == '\'' ) {            this.status = stHereString;            tc.Skip(2);            this.ParseHereString(tc);          } else if ( tc.Char() == '@' && tc.NChar() == '"' ) {            this.status = stHereExpandableString;            tc.Skip(2);            this.ParseHereExpandableString(tc);          } else if ( tc.Char() == '"' ) {            this.status = stString;            tc.Next();            this.ParseExpandableString(tc);          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseExpandableString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '`' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '"' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseHereExpandableString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '`' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '"' && tc.NChar() == '@' ) {            tc.Skip(2);            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseHereExpandableString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '`' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '"' && tc.NChar() == '@' ) {            tc.Skip(2);            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseHereString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\'' && tc.NChar() == '@' ) {            tc.Skip(2);            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PsBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PsBraceScanner.cs,ParseMultiLineComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '#' && tc.NChar() == '>' ) {            tc.Skip(2);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PythonBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PythonBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '#' ) {            tc.SkipRemainder();          } else if ( (tc.Char() == '"' && tc.NChar() == '"' && tc.NNChar() == '"')                    || (tc.Char() == '\'' && tc.NChar() == '\'' && tc.NNChar() == '\'') ) {            this.status = stMultiLineString;            this.quoteChar = tc.Char();            tc.Skip(3);            this.ParseMultiLineString(tc);          } else if ( tc.Char() == '\'' || tc.Char() == '"' ) {            this.status = stString;            this.quoteChar = tc.Char();            tc.Next();            this.ParseString(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PythonBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PythonBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == quoteChar ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,PythonBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\PythonBraceScanner.cs,ParseMultiLineString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == this.quoteChar && tc.NChar() == this.quoteChar && tc.NNChar() == this.quoteChar ) {            tc.Skip(3);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,RBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\RBraceScanner.cs,ParseStringInt,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == quote ) {            tc.Next();            this.status = stText;            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,SqlBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\SqlBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          // multi-line comment          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            this.status = stMultiLineComment;            tc.Skip(2);            this.ParseMultiLineComment(tc);          } else if ( tc.Char() == '-' && tc.NChar() == '-' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '\'' ) {            this.status = stString;            tc.Next();            this.ParseString(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,SqlBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\SqlBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\'' && tc.NChar() == '\'' ) {            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            tc.Next();            this.status = stText;            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,SqlBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\SqlBraceScanner.cs,ParseMultiLineComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '*' && tc.NChar() == '/' ) {            tc.Skip(2);            this.status = stText;            return;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,USqlBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\USqlBraceScanner.cs,ParseText,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '/' && tc.NChar() == '*' ) {            tc.Skip(2);            status = stMultiLineComment;            ParseMultilineComment(tc);          } else if ( tc.Char() == '/' && tc.NChar() == '/' ) {            tc.SkipRemainder();          } else if ( tc.Char() == '\'' ) {            status = stString;            tc.Next();            ParseCharLiteral(tc);          } else if ( tc.Char() == '"' ) {            status = stString;            tc.Next();            ParseString(tc);          } else if ( this.BraceList.IndexOf(tc.Char()) >= 0 ) {            pos = new CharPos(tc.Char()' tc.AbsolutePosition);            tc.Next();            return true;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,USqlBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\USqlBraceScanner.cs,ParseCharLiteral,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '\\' ) {            // skip over escape sequences            tc.Skip(2);          } else if ( tc.Char() == '\'' ) {            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,USqlBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\USqlBraceScanner.cs,ParseMultilineComment,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '*' && tc.Char() == '/' ) {            tc.Skip(2);            status = stText;            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.BraceScanners,VbBraceScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\BraceScanners\VbBraceScanner.cs,ParseString,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == '"' && tc.NChar() == '"' ) {            // embedded quotes' skip            tc.Skip(2);          } else if ( tc.Char() == '"' ) {            this.status = stText;            tc.Next();            break;          } else {            tc.Next();          }        }
Magic Number,Winterdom.Viasfora.Languages.CommentParsers,GenericCommentParser,C:\repos\tomasr_viasfora\src\Viasfora.Languages\CommentParsers\GenericCommentParser.cs,Parse,The following statement contains a magic number: if ( tc.Char() == '/' && tc.NChar() == '/' ) {          // C single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '/' && tc.NChar() == '*' ) {          // C multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*/");        } else if ( tc.Char() == '(' && tc.NChar() == '*' ) {          // F# multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*)");        } else if ( tc.Char() == '-' && tc.NChar() == '-' ) {          // SQL single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '#' ) {          // Python single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '\'' ) {          // VB single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '<' && tc.NChar() == '!' && tc.NNChar() == '-' ) {          //  XML comment          tc.Skip(3);          if ( tc.Char() == '-' ) {            tc.Next();            return TrimmedMinus(tc' "-->");          }        }
Magic Number,Winterdom.Viasfora.Languages.CommentParsers,GenericCommentParser,C:\repos\tomasr_viasfora\src\Viasfora.Languages\CommentParsers\GenericCommentParser.cs,Parse,The following statement contains a magic number: if ( tc.Char() == '/' && tc.NChar() == '/' ) {          // C single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '/' && tc.NChar() == '*' ) {          // C multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*/");        } else if ( tc.Char() == '(' && tc.NChar() == '*' ) {          // F# multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*)");        } else if ( tc.Char() == '-' && tc.NChar() == '-' ) {          // SQL single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '#' ) {          // Python single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '\'' ) {          // VB single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '<' && tc.NChar() == '!' && tc.NNChar() == '-' ) {          //  XML comment          tc.Skip(3);          if ( tc.Char() == '-' ) {            tc.Next();            return TrimmedMinus(tc' "-->");          }        }
Magic Number,Winterdom.Viasfora.Languages.CommentParsers,GenericCommentParser,C:\repos\tomasr_viasfora\src\Viasfora.Languages\CommentParsers\GenericCommentParser.cs,Parse,The following statement contains a magic number: if ( tc.Char() == '/' && tc.NChar() == '/' ) {          // C single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '/' && tc.NChar() == '*' ) {          // C multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*/");        } else if ( tc.Char() == '(' && tc.NChar() == '*' ) {          // F# multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*)");        } else if ( tc.Char() == '-' && tc.NChar() == '-' ) {          // SQL single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '#' ) {          // Python single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '\'' ) {          // VB single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '<' && tc.NChar() == '!' && tc.NNChar() == '-' ) {          //  XML comment          tc.Skip(3);          if ( tc.Char() == '-' ) {            tc.Next();            return TrimmedMinus(tc' "-->");          }        }
Magic Number,Winterdom.Viasfora.Languages.CommentParsers,GenericCommentParser,C:\repos\tomasr_viasfora\src\Viasfora.Languages\CommentParsers\GenericCommentParser.cs,Parse,The following statement contains a magic number: if ( tc.Char() == '/' && tc.NChar() == '/' ) {          // C single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '/' && tc.NChar() == '*' ) {          // C multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*/");        } else if ( tc.Char() == '(' && tc.NChar() == '*' ) {          // F# multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*)");        } else if ( tc.Char() == '-' && tc.NChar() == '-' ) {          // SQL single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '#' ) {          // Python single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '\'' ) {          // VB single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '<' && tc.NChar() == '!' && tc.NNChar() == '-' ) {          //  XML comment          tc.Skip(3);          if ( tc.Char() == '-' ) {            tc.Next();            return TrimmedMinus(tc' "-->");          }        }
Magic Number,Winterdom.Viasfora.Languages.CommentParsers,GenericCommentParser,C:\repos\tomasr_viasfora\src\Viasfora.Languages\CommentParsers\GenericCommentParser.cs,Parse,The following statement contains a magic number: if ( tc.Char() == '/' && tc.NChar() == '/' ) {          // C single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '/' && tc.NChar() == '*' ) {          // C multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*/");        } else if ( tc.Char() == '(' && tc.NChar() == '*' ) {          // F# multi line comment          tc.Skip(2);          return TrimmedMinus(tc' "*)");        } else if ( tc.Char() == '-' && tc.NChar() == '-' ) {          // SQL single line comment          tc.Skip(2);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '#' ) {          // Python single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '\'' ) {          // VB single line comment          tc.Skip(1);          return TrimmedRemainder(tc);        } else if ( tc.Char() == '<' && tc.NChar() == '!' && tc.NNChar() == '-' ) {          //  XML comment          tc.Skip(3);          if ( tc.Char() == '-' ) {            tc.Next();            return TrimmedMinus(tc' "-->");          }        }
Magic Number,Winterdom.Viasfora.Languages.CommentParsers,GenericCommentParser,C:\repos\tomasr_viasfora\src\Viasfora.Languages\CommentParsers\GenericCommentParser.cs,TrimmedMinus,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == t[0] && tc.NChar() == t[1] ) {            if ( t.Length <= 2 || tc.NNChar() == t[2] ) {              break;            }          }          buffer.Append(tc.Char());          tc.Next();        }
Magic Number,Winterdom.Viasfora.Languages.CommentParsers,GenericCommentParser,C:\repos\tomasr_viasfora\src\Viasfora.Languages\CommentParsers\GenericCommentParser.cs,TrimmedMinus,The following statement contains a magic number: while ( !tc.EndOfLine ) {          if ( tc.Char() == t[0] && tc.NChar() == t[1] ) {            if ( t.Length <= 2 || tc.NNChar() == t[2] ) {              break;            }          }          buffer.Append(tc.Char());          tc.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,BasicCStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\BasicCStringScanner.cs,ParseEscapeSequence,The following statement contains a magic number: if ( f == 'x' || f == 'X' || f == 'u' || f == 'U' ) {          if ( f == 'u' ) maxlen = 5;          else if ( f == 'U' ) maxlen = 9;            while ( text.Char().IsHexDigit() && len < maxlen ) {            text.Next();            len++;          }        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,BasicCStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\BasicCStringScanner.cs,ParseEscapeSequence,The following statement contains a magic number: if ( f == 'x' || f == 'X' || f == 'u' || f == 'U' ) {          if ( f == 'u' ) maxlen = 5;          else if ( f == 'U' ) maxlen = 9;            while ( text.Char().IsHexDigit() && len < maxlen ) {            text.Next();            len++;          }        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,CSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CSharpStringScanner.cs,CSharpStringScanner,The following statement contains a magic number: if ( first == '@' ) {          this.isVerbatim = true;          this.text.Skip(2);        } else if ( first == '$' ) {          this.isInterpolated = true;          if ( this.text.NChar() == '@' ) {            this.isVerbatim = true;            this.text.Skip(3);          } else {            this.text.Skip(2);          }        } else if ( first == '"' || first == '\'' ) {          // always skip the first char          // (since quotes are included in the string)          this.text.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,CSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CSharpStringScanner.cs,CSharpStringScanner,The following statement contains a magic number: if ( first == '@' ) {          this.isVerbatim = true;          this.text.Skip(2);        } else if ( first == '$' ) {          this.isInterpolated = true;          if ( this.text.NChar() == '@' ) {            this.isVerbatim = true;            this.text.Skip(3);          } else {            this.text.Skip(2);          }        } else if ( first == '"' || first == '\'' ) {          // always skip the first char          // (since quotes are included in the string)          this.text.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,CSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CSharpStringScanner.cs,CSharpStringScanner,The following statement contains a magic number: if ( first == '@' ) {          this.isVerbatim = true;          this.text.Skip(2);        } else if ( first == '$' ) {          this.isInterpolated = true;          if ( this.text.NChar() == '@' ) {            this.isVerbatim = true;            this.text.Skip(3);          } else {            this.text.Skip(2);          }        } else if ( first == '"' || first == '\'' ) {          // always skip the first char          // (since quotes are included in the string)          this.text.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,CssStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CssStringScanner.cs,Next,The following statement contains a magic number: const int maxHexLen = 6;
Magic Number,Winterdom.Viasfora.Languages.Sequences,CssStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CssStringScanner.cs,Next,The following statement contains a magic number: while ( start < text.Length - 2 ) {          if ( text[start] == '\\' ) {            int len = 1;            while ( (start+len) < text.Length && text[start+len+1].IsHexDigit() && len < maxHexLen ) {              len++;            }              Span span = new Span(start' len+1);            start += len + 1;            return new StringPart(span' StringPartType.EscapeSequence);          }          start++;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,CStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CStringScanner.cs,CStringScanner,The following statement contains a magic number: if ( this.text.Char() == '<' ) {          this.text.SkipRemainder();        } else if ( this.text.Char() == 'R' ) {          isRString = true;          this.text.Skip(2);        } else {          // always skip the first char          // (since quotes are included in the string)          this.text.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,CStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CStringScanner.cs,Next,The following statement contains a magic number: while ( !text.EndOfLine ) {          if ( text.Char() == '\\' && !isRString ) {            return BasicCStringScanner.ParseEscapeSequence(text);          } else if ( text.Char() == '%' ) {            // skip %%            if ( text.NChar() == '%' ) {              text.Skip(2);              continue;            }            StringPart part = new StringPart();            if ( ParseFormatSpecifier(ref part) )              return part;          }          text.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,CStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\CStringScanner.cs,ParseFormatSpecifier,The following statement contains a magic number: if ( len < 2 )          return false;
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,The following statement contains a magic number: if ( escapeChar.IndexOf(text.Char()) >= 0 ) {          text.Next();          part = new StringPart(new Span(text.Position - 2' 2));          return true;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,The following statement contains a magic number: if ( escapeChar.IndexOf(text.Char()) >= 0 ) {          text.Next();          part = new StringPart(new Span(text.Position - 2' 2));          return true;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,The following statement contains a magic number: if ( Char.IsDigit(text.Char()) && Char.IsDigit(text.NChar()) && Char.IsDigit(text.NNChar()) ) {          // a trigraph          text.Skip(3);          part = new StringPart(new Span(text.Position - 4' 4));          return true;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,The following statement contains a magic number: if ( Char.IsDigit(text.Char()) && Char.IsDigit(text.NChar()) && Char.IsDigit(text.NNChar()) ) {          // a trigraph          text.Skip(3);          part = new StringPart(new Span(text.Position - 4' 4));          return true;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,The following statement contains a magic number: if ( Char.IsDigit(text.Char()) && Char.IsDigit(text.NChar()) && Char.IsDigit(text.NNChar()) ) {          // a trigraph          text.Skip(3);          part = new StringPart(new Span(text.Position - 4' 4));          return true;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,The following statement contains a magic number: if ( text.Char() == '0' && !Char.IsDigit(text.NChar()) ) {          // \0          text.Next();          part = new StringPart(new Span(text.Position - 2' 2));          return true;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseEscapeSequence,The following statement contains a magic number: if ( text.Char() == '0' && !Char.IsDigit(text.NChar()) ) {          // \0          text.Next();          part = new StringPart(new Span(text.Position - 2' 2));          return true;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseShortUnicode,The following statement contains a magic number: for ( int i = 0; i < 4; i++ ) {          if ( !text.Char().IsHexDigit() ) {            return null;          }          text.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseShortUnicode,The following statement contains a magic number: return new Span(text.Position - 6' 6);
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseShortUnicode,The following statement contains a magic number: return new Span(text.Position - 6' 6);
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseLongUnicode,The following statement contains a magic number: for ( int i = 0; i < 8; i++ ) {          if ( !text.Char().IsHexDigit() ) {            return null;          }          text.Next();        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseLongUnicode,The following statement contains a magic number: return new Span(text.Position - 10' 10);
Magic Number,Winterdom.Viasfora.Languages.Sequences,FSharpStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\FSharpStringScanner.cs,TryParseLongUnicode,The following statement contains a magic number: return new Span(text.Position - 10' 10);
Magic Number,Winterdom.Viasfora.Languages.Sequences,PsStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\PsStringScanner.cs,Next,The following statement contains a magic number: while ( start < text.Length - 2 ) {          if ( text[start] == '`' ) {            var span = new Span(start' 2);            start += 2;            return new StringPart(span);          }          start++;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,PsStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\PsStringScanner.cs,Next,The following statement contains a magic number: while ( start < text.Length - 2 ) {          if ( text[start] == '`' ) {            var span = new Span(start' 2);            start += 2;            return new StringPart(span);          }          start++;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,PsStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\PsStringScanner.cs,Next,The following statement contains a magic number: while ( start < text.Length - 2 ) {          if ( text[start] == '`' ) {            var span = new Span(start' 2);            start += 2;            return new StringPart(span);          }          start++;        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,RStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\RStringScanner.cs,ParseEscapeSequence,The following statement contains a magic number: if ( (f == 'x' || f == 'u' || f == 'U') && text.Char() != '{' ) {          if ( f == 'x' ) maxlen = 3;          else if ( f == 'u' ) maxlen = 5;          else if ( f == 'U' ) maxlen = 9;            while ( text.Char().IsHexDigit() && len < maxlen ) {            text.Next();            len++;          }        } else if ( (f == 'u' || f == 'U') && text.Char() == '{' ) {          len++;          while ( text.Char() != '}' && !text.EndOfLine ) {            text.Next();            len++;          }        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,RStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\RStringScanner.cs,ParseEscapeSequence,The following statement contains a magic number: if ( (f == 'x' || f == 'u' || f == 'U') && text.Char() != '{' ) {          if ( f == 'x' ) maxlen = 3;          else if ( f == 'u' ) maxlen = 5;          else if ( f == 'U' ) maxlen = 9;            while ( text.Char().IsHexDigit() && len < maxlen ) {            text.Next();            len++;          }        } else if ( (f == 'u' || f == 'U') && text.Char() == '{' ) {          len++;          while ( text.Char() != '}' && !text.EndOfLine ) {            text.Next();            len++;          }        }
Magic Number,Winterdom.Viasfora.Languages.Sequences,RStringScanner,C:\repos\tomasr_viasfora\src\Viasfora.Languages\Sequences\RStringScanner.cs,ParseEscapeSequence,The following statement contains a magic number: if ( (f == 'x' || f == 'u' || f == 'U') && text.Char() != '{' ) {          if ( f == 'x' ) maxlen = 3;          else if ( f == 'u' ) maxlen = 5;          else if ( f == 'U' ) maxlen = 9;            while ( text.Char().IsHexDigit() && len < maxlen ) {            text.Next();            len++;          }        } else if ( (f == 'u' || f == 'U') && text.Char() == '{' ) {          len++;          while ( text.Char() != '}' && !text.EndOfLine ) {            text.Next();            len++;          }        }
