Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HigLabo.DbSharp.MetaData,ClassNameTypeExtensions,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\ClassNameType.cs,ToType,Cyclomatic complexity of the method is 24
Complex Method,HigLabo.DbSharp.MetaData,ClassNameTypeExtensions,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\ClassNameType.cs,ToClassNameString,Cyclomatic complexity of the method is 24
Complex Method,HigLabo.DbSharp.MetaData,ClassNameTypeExtensions,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\ClassNameType.cs,IsStructure,Cyclomatic complexity of the method is 25
Complex Method,HigLabo.DbSharp.MetaData,DataType,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\DataType.cs,GetDeclareParameterText,Cyclomatic complexity of the method is 16
Complex Method,HigLabo.DbSharp.MetaData,DataType,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\DataType.cs,GetDeclareTypeName,Cyclomatic complexity of the method is 20
Complex Method,HigLabo.DbSharp.MetaData,DataType,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\DataType.cs,GetClassNameType,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.DbSharp.MetaData,DataType,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\DataType.cs,GetClassNameType,Cyclomatic complexity of the method is 17
Complex Method,HigLabo.DbSharp.MetaData,DataType,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\DataType.cs,GetClassNameType,Cyclomatic complexity of the method is 25
Long Parameter List,System.ComponentModel,INotifyPropertyChangedExtensions,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Core\INotifyPropertyChangedExtensions.cs,SetPropertyValue,The method has 5 parameters. Parameters: obj' field' value' onPropertyChanged' propertyName
Long Identifier,HigLabo.DbSharp.MetaData,Table,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\Table.cs,GetColumns,The length of the parameter includeServerAutomaticallyInsertValueColumn is 43.
Magic Number,HigLabo.DbSharp.MetaData,DataType,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.SchemaData\Version1.0\DataType.cs,GetDeclareParameterText,The following statement contains a magic number: switch (this.DbType.DatabaseServer)              {                  case DatabaseServer.SqlServer:                      #region                      {                          var tp = this.DbType;                          if (tp.CanDeclareLength() == true && this.Length.HasValue == true)                          {                              if (this.Length > 8000 ||                                  this.Length == -1)                              {                                  return String.Format("{0} {1} (max)"' this.Name' this.GetDeclareTypeName());                              }                              else if (this.Length > 0)                              {                                  return String.Format("{0} {1} ({2})"' this.Name' this.GetDeclareTypeName()' this.Length);                              }                          }                          else if (tp.CanDeclarePrecisionScale() == true && this.Precision.HasValue == true)                          {                              if (this.Scale.HasValue == true)                              {                                  return String.Format("{0} {1} ({2}' {3})"' this.Name' this.GetDeclareTypeName()' this.Precision' this.Scale);                              }                              return String.Format("{0} {1} ({2})"' this.Name' this.GetDeclareTypeName()' this.Precision);                          }                          else if (tp.CanDeclareScale() == true && this.Scale > 0)                          {                              return String.Format("{0} {1} ({2})"' this.Name' this.GetDeclareTypeName()' this.Scale);                          }                          return String.Format("{0} {1}"' this.Name' this.GetDeclareTypeName());                      }                      #endregion                  case DatabaseServer.MySql:                      #region                      {                          var tp = this.DbType;                          if (tp.CanDeclareLength() == true && this.Length.HasValue == true)                          {                              return String.Format("{0} {1} ({2})"' this.Name' this.GetDeclareTypeName()' this.Length);                          }                          else if (tp.CanDeclarePrecisionScale() == true && this.Precision.HasValue == true)                          {                              if (this.Scale.HasValue == true)                              {                                  return String.Format("{0} {1} ({2}' {3})"' this.Name' this.GetDeclareTypeName()' this.Precision' this.Scale);                              }                              return String.Format("{0} {1} ({2})"' this.Name' this.GetDeclareTypeName()' this.Precision);                          }                          else if (tp.CanDeclareScale() == true && this.Scale > 0)                          {                              return String.Format("{0} {1} ({2})"' this.Name' this.GetDeclareTypeName()' this.Scale);                          }                          //Unsigned type are UIntX and it does not have length'precision'scale.                          if (tp.CanDeclareUnsigned() == true)                          {                              return String.Format("{0} {1} unsigned"' this.Name' this.GetDeclareTypeName());                          }                          if (tp.MySqlServerDbType.Value == MySqlDbType.Year)                          {                              return String.Format("{0} year(4)"' this.Name);                          }                          if (tp.MySqlServerDbType.Value == MySqlDbType.Enum ||                              tp.MySqlServerDbType.Value == MySqlDbType.Set)                          {                              return String.Format("{0} {1}"' this.Name' this.EnumValues);                          }                          return String.Format("{0} {1}"' this.Name' this.GetDeclareTypeName());                      }                      #endregion                  case DatabaseServer.Oracle:                  case DatabaseServer.PostgreSql:                  default: throw new InvalidOperationException();              }
