Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,DownloadFile,Cyclomatic complexity of the method is 8
Long Statement,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,UploadFile,The length of the statement  "			if (this.EnsureOpen() == FtpConnectionState.Disconnected) { throw new FtpClientException("Connection must be opened"); } " is 120.
Long Statement,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,DownloadFile,The length of the statement  "			if (this.EnsureOpen() == FtpConnectionState.Disconnected) { throw new FtpClientException("Connection must be opened"); } " is 120.
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: for (int i = 0; i < size; i++)  			{  				this.Stream.WriteByte(bb[i]);                  if (_State == ParseState.ResponseCode)                  {                      responseCodeIndex += 1;                      if (responseCodeIndex == 3)                      {                          var lastByte = this.GetLastByte(3);                          var text = this.Encoding.GetString(lastByte);                          Int32 code = 0;                          if (Int32.TryParse(text' out code) == true)                          {                              _State = ParseState.HasNextLine;                          }                          else                          {                              _State = ParseState.Message;                          }                      }                  }                  else if (_State == ParseState.HasNextLine)                  {                      if (bb[i] == AsciiCharCode.Space.GetNumber())                      {                          _State = ParseState.LastLineMessage;                      }                      else if (bb[i] == AsciiCharCode.Minus.GetNumber())                      {                          _State = ParseState.Message;                      }                      else { throw new DataTransferContextException(this); }                  }                  else if (_State == ParseState.Message)                  {                      if (bb[i] == AsciiCharCode.CarriageReturn.GetNumber())                      {                          _State = ParseState.CarriageReturn;                      }                  }                  else if (_State == ParseState.CarriageReturn)                  {                      if (bb[i] == AsciiCharCode.LineFeed.GetNumber())                      {                          responseCodeIndex = 0;                          _State = ParseState.ResponseCode;                      }                      else { throw new DataTransferContextException(this); }                  }                  else if (_State == ParseState.LastLineMessage)                  {                      if (bb[i] == AsciiCharCode.CarriageReturn.GetNumber())                      {                          _State = ParseState.LastLineCarriageReturn;                      }                  }                  else if (_State == ParseState.LastLineCarriageReturn)                  {                      if (bb[i] == AsciiCharCode.LineFeed.GetNumber())                      {                          return false;                      }                      else { throw new DataTransferContextException(this); }                  }                  bb[i] = 0;  			}
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: for (int i = 0; i < size; i++)  			{  				this.Stream.WriteByte(bb[i]);                  if (_State == ParseState.ResponseCode)                  {                      responseCodeIndex += 1;                      if (responseCodeIndex == 3)                      {                          var lastByte = this.GetLastByte(3);                          var text = this.Encoding.GetString(lastByte);                          Int32 code = 0;                          if (Int32.TryParse(text' out code) == true)                          {                              _State = ParseState.HasNextLine;                          }                          else                          {                              _State = ParseState.Message;                          }                      }                  }                  else if (_State == ParseState.HasNextLine)                  {                      if (bb[i] == AsciiCharCode.Space.GetNumber())                      {                          _State = ParseState.LastLineMessage;                      }                      else if (bb[i] == AsciiCharCode.Minus.GetNumber())                      {                          _State = ParseState.Message;                      }                      else { throw new DataTransferContextException(this); }                  }                  else if (_State == ParseState.Message)                  {                      if (bb[i] == AsciiCharCode.CarriageReturn.GetNumber())                      {                          _State = ParseState.CarriageReturn;                      }                  }                  else if (_State == ParseState.CarriageReturn)                  {                      if (bb[i] == AsciiCharCode.LineFeed.GetNumber())                      {                          responseCodeIndex = 0;                          _State = ParseState.ResponseCode;                      }                      else { throw new DataTransferContextException(this); }                  }                  else if (_State == ParseState.LastLineMessage)                  {                      if (bb[i] == AsciiCharCode.CarriageReturn.GetNumber())                      {                          _State = ParseState.LastLineCarriageReturn;                      }                  }                  else if (_State == ParseState.LastLineCarriageReturn)                  {                      if (bb[i] == AsciiCharCode.LineFeed.GetNumber())                      {                          return false;                      }                      else { throw new DataTransferContextException(this); }                  }                  bb[i] = 0;  			}
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenPassiveConnection,The following statement contains a magic number: if (pasv.Length < 6)  			{  				throw new FtpClientException(rs);  			}
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenPassiveConnection,The following statement contains a magic number: String server = String.Format("{0}.{1}.{2}.{3}"' pasv[0]' pasv[1]' pasv[2]' pasv[3]);
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenPassiveConnection,The following statement contains a magic number: String server = String.Format("{0}.{1}.{2}.{3}"' pasv[0]' pasv[1]' pasv[2]' pasv[3]);
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenPassiveConnection,The following statement contains a magic number: Int32 port = (Int32.Parse(pasv[4]) << 8) + Int32.Parse(pasv[5]);
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenPassiveConnection,The following statement contains a magic number: Int32 port = (Int32.Parse(pasv[4]) << 8) + Int32.Parse(pasv[5]);
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenPassiveConnection,The following statement contains a magic number: Int32 port = (Int32.Parse(pasv[4]) << 8) + Int32.Parse(pasv[5]);
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenActiveConnection,The following statement contains a magic number: String port = String.Format("{0}'{1}'{2}"' sIPAddr.Replace('.'' ''')' nPort / 256' nPort % 256);
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,OpenActiveConnection,The following statement contains a magic number: String port = String.Format("{0}'{1}'{2}"' sIPAddr.Replace('.'' ''')' nPort / 256' nPort % 256);
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,GetFileSize,The following statement contains a magic number: return Int64.Parse(rs.Text.Substring(4));
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,ExecuteNlst,The following statement contains a magic number: Byte[] bytes = new Byte[512];
Magic Number,HigLabo.Net.Ftp,FtpClient,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.cs,ExecuteList,The following statement contains a magic number: Byte[] bytes = new Byte[512];
Magic Number,HigLabo.Net.Ftp,FtpClientDefaultSettings,C:\repos\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClientDefaultSettings.cs,FtpClientDefaultSettings,The following statement contains a magic number: this.Port = 21;
