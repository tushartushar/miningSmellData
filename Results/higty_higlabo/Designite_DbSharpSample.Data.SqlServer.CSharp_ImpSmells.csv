Implementation smell,Namespace,Class,File,Method,Description
Long Method,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The method has 217 lines of code.
Long Method,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The method has 446 lines of code.
Long Method,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The method has 458 lines of code.
Long Method,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The method has 103 lines of code.
Long Method,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The method has 830 lines of code.
Long Method,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The method has 132 lines of code.
Complex Method,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,Cyclomatic complexity of the method is 28
Complex Method,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,SetResultSet,Cyclomatic complexity of the method is 33
Complex Method,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,SetResultSet,Cyclomatic complexity of the method is 33
Complex Method,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectByPrimaryKey.cs,SetResultSet,Cyclomatic complexity of the method is 33
Long Parameter List,HigLabo.DbSharpSample.SqlServer,MultiPkTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\MultiPkTable.cs,Delete,The method has 5 parameters. Parameters: database' bigIntColumn' intColumn' floatColumn' timestampColumn
Long Identifier,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,,The length of the parameter _NotNullUniqueIdentifierColumn is 30.
Long Identifier,HigLabo.DbSharpSample.SqlServer,ResultSetsList,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,,The length of the parameter _AllDataTypeTableResultSetList is 30.
Long Identifier,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,,The length of the parameter _NotNullUniqueIdentifierColumn is 30.
Long Identifier,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,,The length of the parameter _NotNullUniqueIdentifierColumn is 30.
Long Identifier,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,,The length of the parameter _NotNullUniqueIdentifierColumn is 30.
Long Identifier,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,,The length of the parameter _NotNullUniqueIdentifierColumn is 30.
Long Identifier,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,,The length of the parameter _NotNullUniqueIdentifierColumn is 30.
Long Statement,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The length of the statement  "            if (p.Value != DBNull.Value && p.Value != null) this.GeometryColumn = (global::Microsoft.SqlServer.Types.SqlGeometry)p.Value; " is 125.
Long Statement,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The length of the statement  "            if (p.Value != DBNull.Value && p.Value != null) this.GeographyColumn = (global::Microsoft.SqlServer.Types.SqlGeography)p.Value; " is 127.
Long Statement,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.GeometryColumn = (global::Microsoft.SqlServer.Types.SqlGeometry)reader[index]; " is 127.
Long Statement,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.GeographyColumn = (global::Microsoft.SqlServer.Types.SqlGeography)reader[index]; " is 129.
Long Statement,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.HierarchyIDColumn = (global::Microsoft.SqlServer.Types.SqlHierarchyId)reader[index]; " is 133.
Long Statement,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.EnumColumn = StoredProcedure.ToEnum<MyEnum>(reader[index] as String) ?? r.EnumColumn; " is 134.
Long Statement,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,GetResultSetsList,The length of the statement  "            var l = base.GetResultSetsList(database' CreateCreateResultSetMethod<AllDataTypeTableResultSet>(this.SetResultSet)' CreateCreateResultSetMethod<IdentityTableResultSet>(this.SetResultSet)' CreateCreateResultSetMethod<RowGuidColTableResultSet>(this.SetResultSet)' CreateCreateResultSetMethod<MultiPkTableResultSet>(this.SetResultSet)); " is 333.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.GeometryColumn = (global::Microsoft.SqlServer.Types.SqlGeometry)reader[index]; " is 127.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.GeographyColumn = (global::Microsoft.SqlServer.Types.SqlGeography)reader[index]; " is 129.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.HierarchyIDColumn = (global::Microsoft.SqlServer.Types.SqlHierarchyId)reader[index]; " is 133.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.EnumColumn = StoredProcedure.ToEnum<MyEnum>(reader[index] as String) ?? r.EnumColumn; " is 134.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectByPrimaryKey.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.GeometryColumn = (global::Microsoft.SqlServer.Types.SqlGeometry)reader[index]; " is 127.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectByPrimaryKey.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.GeographyColumn = (global::Microsoft.SqlServer.Types.SqlGeography)reader[index]; " is 129.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectByPrimaryKey.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.HierarchyIDColumn = (global::Microsoft.SqlServer.Types.SqlHierarchyId)reader[index]; " is 133.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectByPrimaryKey.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.EnumColumn = StoredProcedure.ToEnum<MyEnum>(reader[index] as String) ?? r.EnumColumn; " is 134.
Long Statement,HigLabo.DbSharpSample.SqlServer,AllDataTypeTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.cs,CreateStoredProcedureWithResultSet,The length of the statement  "                case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record); " is 123.
Long Statement,HigLabo.DbSharpSample.SqlServer,IdentityTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\IdentityTable.cs,CreateStoredProcedureWithResultSet,The length of the statement  "                case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record); " is 123.
Long Statement,HigLabo.DbSharpSample.SqlServer,MultiPkTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\MultiPkTable.cs,CreateStoredProcedureWithResultSet,The length of the statement  "                case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record); " is 123.
Long Statement,HigLabo.DbSharpSample.SqlServer,RowGuidColTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\RowGuidColTable.cs,CreateStoredProcedureWithResultSet,The length of the statement  "                case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record); " is 123.
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 1073741823;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTimeColumn"' SqlDbType.DateTime' null' 3);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@TimeColumn"' SqlDbType.Time' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTime2Column"' SqlDbType.DateTime2' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DecimalColumn"' SqlDbType.Decimal' 18' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@MoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@MoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@RealColumn"' SqlDbType.Real' 24' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallIntColumn"' SqlDbType.SmallInt' 5' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@TinyIntColumn"' SqlDbType.TinyInt' 3' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTimeOffsetColumn"' SqlDbType.DateTimeOffset' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 892;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[3] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[4] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[5] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[6] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[8] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[10] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[11] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[12] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[13] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[14] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[15] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[16] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[17] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[18] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[19] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[20] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[21] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[22] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[23] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[24] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[25] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[26] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[27] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[28] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[30] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_OutputParameter,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,GetResultSetsList,The following statement contains a magic number: rs.RowGuidColTableResultSetList.AddRange(l[2].ConvertAll(el => (RowGuidColTableResultSet)el));
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,GetResultSetsList,The following statement contains a magic number: rs.MultiPkTableResultSetList.AddRange(l[3].ConvertAll(el => (MultiPkTableResultSet)el));
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_SelectMultiTable,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_SelectMultiTable.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_Structure,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_Structure.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,Usp_Structure,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\StoredProcedure\Usp_Structure.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_PrimaryKeyColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableDelete.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PrimaryKeyColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 1073741823;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTimeColumn"' SqlDbType.DateTime' null' 3);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@TimeColumn"' SqlDbType.Time' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTime2Column"' SqlDbType.DateTime2' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DecimalColumn"' SqlDbType.Decimal' 18' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@MoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@MoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@RealColumn"' SqlDbType.Real' 24' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallIntColumn"' SqlDbType.SmallInt' 5' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@TinyIntColumn"' SqlDbType.TinyInt' 3' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTimeOffsetColumn"' SqlDbType.DateTimeOffset' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 892;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullBigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 1073741823;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDateTimeColumn"' SqlDbType.DateTime' null' 3);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullTimeColumn"' SqlDbType.Time' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDateTime2Column"' SqlDbType.DateTime2' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDecimalColumn"' SqlDbType.Decimal' 18' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullMoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullMoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullSmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullSmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullFloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullIntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullRealColumn"' SqlDbType.Real' 24' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullSmallIntColumn"' SqlDbType.SmallInt' 5' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullTinyIntColumn"' SqlDbType.TinyInt' 3' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDateTimeOffsetColumn"' SqlDbType.DateTimeOffset' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 892;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableInsert.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,ResultSet,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_PrimaryKeyColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableSelectByPrimaryKey.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PrimaryKeyColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 1073741823;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTimeColumn"' SqlDbType.DateTime' null' 3);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@TimeColumn"' SqlDbType.Time' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTime2Column"' SqlDbType.DateTime2' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DecimalColumn"' SqlDbType.Decimal' 18' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@MoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@MoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@RealColumn"' SqlDbType.Real' 24' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@SmallIntColumn"' SqlDbType.SmallInt' 5' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@TinyIntColumn"' SqlDbType.TinyInt' 3' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@DateTimeOffsetColumn"' SqlDbType.DateTimeOffset' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 892;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullBigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 1073741823;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDateTimeColumn"' SqlDbType.DateTime' null' 3);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullTimeColumn"' SqlDbType.Time' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDateTime2Column"' SqlDbType.DateTime2' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDecimalColumn"' SqlDbType.Decimal' 18' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullMoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullMoneyColumn"' SqlDbType.Money' 19' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullSmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullSmallMoneyColumn"' SqlDbType.SmallMoney' 10' 4);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullFloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullIntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullRealColumn"' SqlDbType.Real' 24' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullSmallIntColumn"' SqlDbType.SmallInt' 5' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullTinyIntColumn"' SqlDbType.TinyInt' 3' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@NotNullDateTimeOffsetColumn"' SqlDbType.DateTimeOffset' null' 7);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 892;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_PrimaryKeyColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,AllDataTypeTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\AllDataTypeTableUpdate.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableDelete.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableInsert.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableSelectByPrimaryKey.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,IdentityTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\IdentityTableUpdate.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableDelete.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 1073741823;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[4] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableInsert.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableSelectByPrimaryKey.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 1073741823;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_BigIntColumn"' SqlDbType.BigInt' 19' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_IntColumn"' SqlDbType.Int' 10' 0);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("@PK_FloatColumn"' SqlDbType.Float' 53' null);
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[4] as DbParameter;
Magic Number,HigLabo.DbSharpSample.SqlServer,MultiPkTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\MultiPkTableUpdate.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableDelete,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\RowGuidColTableDelete.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\RowGuidColTableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableInsert,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\RowGuidColTableInsert.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableSelectAll,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\RowGuidColTableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableSelectByPrimaryKey,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\RowGuidColTableSelectByPrimaryKey.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\RowGuidColTableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.SqlServer,RowGuidColTableUpdate,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\TableStoredProcedure\RowGuidColTableUpdate.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetColumnCount,The following statement contains a magic number: return 66;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetColumnCount,The following statement contains a magic number: return 2;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetColumnCount,The following statement contains a magic number: return 10;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetColumnCount,The following statement contains a magic number: return 2;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: Object[] oo = new Object[28];
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[2] = this.ImageColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[3] = this.VarBinaryColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[4] = this.BitColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[5] = this.CharColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[6] = this.NCharColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[7] = this.NTextColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[8] = this.NVarCharColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[9] = this.TextColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[10] = this.VarCharColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[11] = this.XmlColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[12] = this.DateTimeColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[13] = this.SmallDateTimeColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[14] = this.DateColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[15] = this.TimeColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[16] = this.DateTime2Column;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[17] = this.DecimalColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[18] = this.MoneyColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[19] = this.SmallMoneyColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[20] = this.FloatColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[21] = this.IntColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[22] = this.RealColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[23] = this.UniqueIdentifierColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[24] = this.SmallIntColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[25] = this.TinyIntColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[26] = this.DateTimeOffsetColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: if (this.EnumColumn != null) oo[27] = this.EnumColumn.ToString();
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: Object[] oo = new Object[4];
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[2] = this.ImageColumn;
Magic Number,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValues,The following statement contains a magic number: oo[3] = this.VarBinaryColumn;
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.BigIntColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.ImageColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.CharColumn;                      case 8: return this.NCharColumn;                      case 9: return this.NTextColumn;                      case 10: return this.NVarCharColumn;                      case 11: return this.TextColumn;                      case 12: return this.VarCharColumn;                      case 13: return this.XmlColumn;                      case 14: return this.DateTimeColumn;                      case 15: return this.SmallDateTimeColumn;                      case 16: return this.DateColumn;                      case 17: return this.TimeColumn;                      case 18: return this.DateTime2Column;                      case 19: return this.DecimalColumn;                      case 20: return this.MoneyColumn;                      case 21: return this.SmallMoneyColumn;                      case 22: return this.FloatColumn;                      case 23: return this.IntColumn;                      case 24: return this.RealColumn;                      case 25: return this.UniqueIdentifierColumn;                      case 26: return this.SmallIntColumn;                      case 27: return this.TinyIntColumn;                      case 28: return this.DateTimeOffsetColumn;                      case 29: return this.SqlVariantColumn;                      case 30: return this.GeometryColumn;                      case 31: return this.GeographyColumn;                      case 32: return this.HierarchyIDColumn;                      case 33: return this.EnumColumn;                      case 34: return this.NotNullBigIntColumn;                      case 35: return this.NotNullBinaryColumn;                      case 36: return this.NotNullImageColumn;                      case 37: return this.NotNullVarBinaryColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullCharColumn;                      case 40: return this.NotNullNCharColumn;                      case 41: return this.NotNullNTextColumn;                      case 42: return this.NotNullNVarCharColumn;                      case 43: return this.NotNullTextColumn;                      case 44: return this.NotNullVarCharColumn;                      case 45: return this.NotNullXmlColumn;                      case 46: return this.NotNullDateTimeColumn;                      case 47: return this.NotNullSmallDateTimeColumn;                      case 48: return this.NotNullDateColumn;                      case 49: return this.NotNullTimeColumn;                      case 50: return this.NotNullDateTime2Column;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullMoneyColumn;                      case 53: return this.NotNullSmallMoneyColumn;                      case 54: return this.NotNullFloatColumn;                      case 55: return this.NotNullIntColumn;                      case 56: return this.NotNullRealColumn;                      case 57: return this.NotNullUniqueIdentifierColumn;                      case 58: return this.NotNullSmallIntColumn;                      case 59: return this.NotNullTinyIntColumn;                      case 60: return this.NotNullDateTimeOffsetColumn;                      case 61: return this.NotNullSqlVariantColumn;                      case 62: return this.NotNullGeometryColumn;                      case 63: return this.NotNullGeographyColumn;                      case 64: return this.NotNullHierarchyIDColumn;                      case 65: return this.NotNullEnumColumn;                  }
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.ImageColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.ImageColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.XmlColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.XmlColumn = newValue;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.SmallDateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.SmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.DateTime2Column = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTime2Column = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.MoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.MoneyColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.SmallMoneyColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.SmallMoneyColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.RealColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.RealColumn = newValue.Value;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.UniqueIdentifierColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.UniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.DateTimeOffsetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.DateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.SqlVariantColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.SqlVariantColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.GeometryColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.GeographyColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.GeographyColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.HierarchyIDColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.HierarchyIDColumn = newValue.Value;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullImageColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNCharColumn = newValue;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNTextColumn = newValue;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullNVarCharColumn = newValue;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullXmlColumn = newValue;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullSmallDateTimeColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTime2Column = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullMoneyColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullSmallMoneyColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullRealColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.NotNullUniqueIdentifierColumn = newValue.Value;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTimeOffset(value);                              if (newValue == null) return false;                              this.NotNullDateTimeOffsetColumn = newValue.Value;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Object;                              if (newValue == null) return false;                              this.NotNullSqlVariantColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeometry;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlGeography;                              if (newValue == null) return false;                              this.NotNullGeographyColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::Microsoft.SqlServer.Types.SqlHierarchyId?;                              if (newValue == null) return false;                              this.NotNullHierarchyIDColumn = newValue.Value;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                  }
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0: return this.IntColumn;                      case 1: return this.NVarCharColumn;                  }
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NTextColumn;                      case 9: return this.NVarCharColumn;                  }
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TimestampColumn = newValue;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NTextColumn = newValue;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,GetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0: return this.RowGuidColumn;                      case 1: return this.NVarCharColumn;                  }
Missing Default,HigLabo.DbSharpSample.SqlServer,Record,C:\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.SqlServer.CSharp\GeneratedFiles\Table\AllDataTypeTable.Record.cs,SetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToGuid(value);                              if (newValue == null) return false;                              this.RowGuidColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
