Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToSByte,Cyclomatic complexity of the method is 19
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToInt16,Cyclomatic complexity of the method is 17
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToInt32,Cyclomatic complexity of the method is 15
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToInt64,Cyclomatic complexity of the method is 13
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToByte,Cyclomatic complexity of the method is 19
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToUInt16,Cyclomatic complexity of the method is 18
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToUInt32,Cyclomatic complexity of the method is 17
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToUInt64,Cyclomatic complexity of the method is 16
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToSingle,Cyclomatic complexity of the method is 15
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDouble,Cyclomatic complexity of the method is 15
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDecimal,Cyclomatic complexity of the method is 15
Complex Method,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,Cyclomatic complexity of the method is 44
Complex Method,HigLabo.Core,TypeExtensions,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Extensions\TypeExtensions.cs,IsNumber,Cyclomatic complexity of the method is 12
Long Parameter List,System.ComponentModel,INotifyPropertyChangedExtensions,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Extensions\INotifyPropertyChangedExtensions_Net_4_0.cs,SetPropertyValue,The method has 5 parameters. Parameters: obj' propertyName' field' value' onPropertyChanged
Long Parameter List,System.ComponentModel,INotifyPropertyChangedExtensions,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Extensions\INotifyPropertyChangedExtensions_Net_4_0.cs,SetPropertyValue,The method has 5 parameters. Parameters: obj' propertyName' field' value' onPropertyChanged
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToSByte,The length of the statement  "            if (tp == typeof(String) && SByte.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 132.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToInt16,The length of the statement  "            if (tp == typeof(String) && Int16.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 132.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToInt32,The length of the statement  "            if (tp == typeof(String) && Int32.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 132.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToInt64,The length of the statement  "            if (tp == typeof(String) && Int64.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 132.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToByte,The length of the statement  "            if (tp == typeof(String) && Byte.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 131.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToUInt16,The length of the statement  "            if (tp == typeof(String) && UInt16.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 133.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToUInt32,The length of the statement  "            if (tp == typeof(String) && UInt32.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 133.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToUInt64,The length of the statement  "            if (tp == typeof(String) && UInt64.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 133.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToSingle,The length of the statement  "            if (tp == typeof(String) && Single.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 133.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDouble,The length of the statement  "            if (tp == typeof(String) && Double.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 133.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDecimal,The length of the statement  "            if (tp == typeof(String) && Decimal.TryParse(this.ConvertFromFullWidthToHalfWidth((String)value)' numberStyle' formatProvider' out x)) " is 134.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeExact,The length of the statement  "            if (tp == typeof(String) && DateTime.TryParseExact(this.ConvertFromFullWidthToHalfWidth((String)value)' format' formatProvider' dateTimeStyle' out x)) " is 150.
Long Statement,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetExact,The length of the statement  "            if (tp == typeof(String) && DateTimeOffset.TryParseExact(this.ConvertFromFullWidthToHalfWidth((String)value)' format' formatProvider' dateTimeStyle' out x)) " is 156.
Empty Catch Block,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToGuid,The method has an empty catch block.
Empty Catch Block,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToEnum,The method has an empty catch block.
Empty Catch Block,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToEncoding,The method has an empty catch block.
Empty Catch Block,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToEncoding,The method has an empty catch block.
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToSByte,The following statement contains a magic number: xx <= 127
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToInt16,The following statement contains a magic number: xx <= 32767
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: timeZonePart.Length < 5
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: var hour = Convert.ToInt32(timeZonePart.Substring(1' 2));
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: var minute = Convert.ToInt32(timeZonePart.Substring(3' 2));
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: var minute = Convert.ToInt32(timeZonePart.Substring(3' 2));
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,TypeConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Core\TypeConverter.cs,ToDateTimeOffsetWithTimeZone,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: return null;              }
Magic Number,HigLabo.Core,IPAddress_v4,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\IPAddress_v4.cs,IPAddress_v4,The following statement contains a magic number: Int64 x = 256;
Magic Number,HigLabo.Core,IPAddress_v4,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\IPAddress_v4.cs,TryCreate,The following statement contains a magic number: Byte[] xx = new Byte[4];
Magic Number,HigLabo.Core,IPAddress_v4,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\IPAddress_v4.cs,TryCreate,The following statement contains a magic number: xx.Length != 4
Magic Number,HigLabo.Core,IPAddress_v4,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\IPAddress_v4.cs,TryCreate,The following statement contains a magic number: return new IPAddress_v4(xx[0]' xx[1]' xx[2]' xx[3]);
Magic Number,HigLabo.Core,IPAddress_v4,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\IPAddress_v4.cs,TryCreate,The following statement contains a magic number: return new IPAddress_v4(xx[0]' xx[1]' xx[2]' xx[3]);
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: byte[] randomBytes = new byte[10];
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: long timestamp = DateTime.Now.Ticks / 10000L;
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: byte[] guidBytes = new byte[16];
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following statement contains a magic number: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
Magic Number,HigLabo.Core,StringExtensions,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Extensions\StringExtensions.cs,ToSnakeCase,The following statement contains a magic number: var sb = new StringBuilder(value.Length + 4);
Magic Number,HigLabo.Core,StringExtensions,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Extensions\StringExtensions.cs,ToTrainCase,The following statement contains a magic number: var sb = new StringBuilder(value.Length + 4);
Magic Number,HigLabo.Core,StringExtensions,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Extensions\StringExtensions.cs,ToKebabCase,The following statement contains a magic number: var sb = new StringBuilder(value.Length + 4);
Magic Number,HigLabo.Security,AesManagedExtensions,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Extensions\AesManagedExtensions.cs,HexStringToByte,The following statement contains a magic number: var bytes = new Byte[hex.Length / 2];
Missing Default,HigLabo.Core,SequentialGuid,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Core\Entity\SequentialGuid.cs,NewGuid,The following switch statement is missing a default case: switch (guidType)              {                    case SequentialGuidType.String:                  case SequentialGuidType.Binary:                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 0' 6);                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 6' 10);                      if (guidType == SequentialGuidType.String && BitConverter.IsLittleEndian)                      {                          Array.Reverse(guidBytes' 0' 4);                          Array.Reverse(guidBytes' 4' 2);                      }                      break;                  case SequentialGuidType.AtEnd:                      Buffer.BlockCopy(randomBytes' 0' guidBytes' 0' 10);                      Buffer.BlockCopy(timestampBytes' 2' guidBytes' 10' 6);                      break;              }
