Implementation smell,Namespace,Class,File,Method,Description
Long Method,HigLabo.Converter,Rfc2047Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2047Converter.cs,Decode,The method has 160 lines of code.
Complex Method,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,Cyclomatic complexity of the method is 43
Complex Method,HigLabo.Converter,ModifiedUtf7Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,Cyclomatic complexity of the method is 12
Complex Method,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,Cyclomatic complexity of the method is 15
Complex Method,HigLabo.Converter,Rfc2047Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2047Converter.cs,Decode,Cyclomatic complexity of the method is 27
Complex Method,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,Cyclomatic complexity of the method is 16
Complex Method,HigLabo.Core,QueryStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QueryStringConverter.cs,Parse,Cyclomatic complexity of the method is 9
Long Identifier,HigLabo.Converter,Rfc2047Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2047Converter.cs,,The length of the parameter _QuotedPrintableHeaderConverter is 31.
Complex Conditional,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The conditional expression  "c >= 0 && c <= 31 || c == 34 || c == 39 || c == 60 || c == 62 || c == 92"  is complex.
Complex Conditional,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The conditional expression  "c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The conditional expression  "isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The conditional expression  "isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The conditional expression  "isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The conditional expression  "isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The conditional expression  "isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The conditional expression  "isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370"  is complex.
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,Base64Converter,The following statement contains a magic number: this.CharCountPerLine = 72;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: BufferByteArray encoded = new BufferByteArray((input.Length / 3) * 4);
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: BufferByteArray encoded = new BufferByteArray((input.Length / 3) * 4);
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: Int32 loopCount = input.Length / 3;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: startIndex = i * 3;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: c2 = input[startIndex + 2];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: bufferIndex + 6 >= buffer.Length
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[c0 >> 2];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[c2 & 63];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: charCountPerLine += 4;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = 13;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = 10;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: startIndex += 3;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: bufferIndex + 4 > buffer.Length
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[c0 >> 2];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: buffer[bufferIndex++] = 61;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: input.Length - startIndex == 2
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded = new Byte[(input.Length / 3) * 4];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded = new Byte[(input.Length / 3) * 4];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: input.Length % 3 == 0
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: Int32 loopCount = input.Length / 3;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: startIndex = i * 3;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: c2 = input[startIndex + 2];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: startIndex += 3;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[c0 >> 2];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[c2 & 63];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[c0 >> 2];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: encoded[encodedIndex++] = 61;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: input.Length - startIndex == 2
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: BufferByteArray decoded = new BufferByteArray((input.Length / 4 * 3));
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: BufferByteArray decoded = new BufferByteArray((input.Length / 4 * 3));
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: c == 255
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: bufferIndex + 3 >= buffer.Length
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: bbbb = bbbb << 6 | c;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: input[i] == 61
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: bIndex == 4
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: paddingCount = 2;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: input[input.Length - 2] == 61
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: input[input.Length - 2] == 61
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: input[input.Length - 1] == 61
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: Byte[] decoded = new Byte[(input.Length / 4 * 3) + paddingCount];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: Byte[] decoded = new Byte[(input.Length / 4 * 3) + paddingCount];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: Int32 loopCount = input.Length / 4;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: startIndex = i * 4;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: buffer = buffer << 6 | decodeTable[input[startIndex + bIndex]];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: bIndex < 4
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: decoded[decodedIndex++] = (byte)((buffer >> 16) & 0xFF);
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: decoded[decodedIndex++] = (byte)((buffer >> 8) & 0xFF);
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: buffer += buffer << 6 | decodeTable[input[startIndex + bIndex]];
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: bIndex < 4 - paddingCount
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: var count = 3 - paddingCount;
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: decoded[decodedIndex++] = (byte)(buffer >> (16 - (i * 8)) & 0xFF);
Magic Number,HigLabo.Converter,Base64Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: decoded[decodedIndex++] = (byte)(buffer >> (16 - (i * 8)) & 0xFF);
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: timeZonePart.Length < 5
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: var hour = Convert.ToInt32(timeZonePart.Substring(1' 2));
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: var minute = Convert.ToInt32(timeZonePart.Substring(3' 2));
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: var minute = Convert.ToInt32(timeZonePart.Substring(3' 2));
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,Rfc2822Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2822Converter.cs,Parse,The following statement contains a magic number: switch (timeZonePart)              {                  case "A": ts = new TimeSpan(1' 0' 0); break;                  case "B": ts = new TimeSpan(2' 0' 0); break;                  case "C": ts = new TimeSpan(3' 0' 0); break;                  case "D": ts = new TimeSpan(4' 0' 0); break;                  case "E": ts = new TimeSpan(5' 0' 0); break;                  case "F": ts = new TimeSpan(6' 0' 0); break;                  case "G": ts = new TimeSpan(7' 0' 0); break;                  case "H": ts = new TimeSpan(8' 0' 0); break;                  case "I": ts = new TimeSpan(9' 0' 0); break;                  case "K": ts = new TimeSpan(10' 0' 0); break;                  case "L": ts = new TimeSpan(11' 0' 0); break;                  case "M": ts = new TimeSpan(12' 0' 0); break;                  case "N": ts = new TimeSpan(-1' 0' 0); break;                  case "O": ts = new TimeSpan(-2' 0' 0); break;                  case "P": ts = new TimeSpan(-3' 0' 0); break;                  case "Q": ts = new TimeSpan(-4' 0' 0); break;                  case "R": ts = new TimeSpan(-5' 0' 0); break;                  case "S": ts = new TimeSpan(-6' 0' 0); break;                  case "T": ts = new TimeSpan(-7' 0' 0); break;                  case "U": ts = new TimeSpan(-8' 0' 0); break;                  case "V": ts = new TimeSpan(-9' 0' 0); break;                  case "W": ts = new TimeSpan(-10' 0' 0); break;                  case "X": ts = new TimeSpan(-11' 0' 0); break;                  case "Y": ts = new TimeSpan(-12' 0' 0); break;                  case "Z":                  case "UT":                  case "GMT": break;    // It's UTC                  case "EST": ts = new TimeSpan(5' 0' 0); break;                  case "EDT": ts = new TimeSpan(4' 0' 0); break;                  case "CST": ts = new TimeSpan(6' 0' 0); break;                  case "CDT": ts = new TimeSpan(5' 0' 0); break;                  case "MST": ts = new TimeSpan(7' 0' 0); break;                  case "MDT": ts = new TimeSpan(6' 0' 0); break;                  case "PST": ts = new TimeSpan(8' 0' 0); break;                  case "PDT": ts = new TimeSpan(7' 0' 0); break;                  case "JST": ts = new TimeSpan(9' 0' 0); break;                  default: throw new FormatException("invalid time zone");              }
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: var padding = 4 - length % 4;
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: var padding = 4 - length % 4;
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: padding == 4
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: bb[i] = 61;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,QuotedPrintableConverter,The following statement contains a magic number: this.CharCountPerLine = 76;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: BufferByteArray decoded = new BufferByteArray(input.Length * 3);
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: bufferIndex + 6 > buffer.Length
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: buffer[bufferIndex++] = 61;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: buffer[bufferIndex++] = 61;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: buffer[bufferIndex++] = 13;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: buffer[bufferIndex++] = 10;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: InsertNewline == true && this.CharCountPerLine - 3 < charCount
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: buffer[bufferIndex++] = 61;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: charCount += 3;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: var bbb = new byte[3];
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: bufferIndex + 3 > buffer.Length
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: c == 61
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: bbb[1] == 13 && bbb[2] == 10
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: bbb[1] == 13 && bbb[2] == 10
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: bbb[1] == 13 && bbb[2] == 10
Magic Number,HigLabo.Converter,QuotedPrintableConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: bbbIndex == 3
Magic Number,HigLabo.Converter,Rfc2047Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2047Converter.cs,Rfc2047Converter,The following statement contains a magic number: _Base64Converter = new Base64Converter(200);
Magic Number,HigLabo.Converter,Rfc2047Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2047Converter.cs,Rfc2047Converter,The following statement contains a magic number: _QuotedPrintableHeaderConverter = new QuotedPrintableConverter(200' QuotedPrintableConvertMode.Header);
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: Hex += (c1 - 48);
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: c1 >= 48 && c1 <= 57
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: c1 >= 48 && c1 <= 57
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: Hex += (c1 - 65 + 10);
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: Hex += (c1 - 65 + 10);
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: c1 >= 65 && c1 <= 70
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: c1 >= 65 && c1 <= 70
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: Hex += (c1 - 97 + 10);
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: Hex += (c1 - 97 + 10);
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: c1 >= 97 && c1 <= 102
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: c1 >= 97 && c1 <= 102
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: Hex = Hex * 16;
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: i < 2
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%'
Magic Number,HigLabo.Converter,Rfc2231Converter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: CurrentIndex += 3;
Magic Number,HigLabo.Converter,Base64CharTable,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,Base64CharTable,The following statement contains a magic number: Char[] cc = new Char[64];
Magic Number,HigLabo.Converter,Base64CharTable,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,Base64CharTable,The following statement contains a magic number: cc[62] = char62;
Magic Number,HigLabo.Converter,Base64CharTable,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,Base64CharTable,The following statement contains a magic number: cc[63] = char63;
Magic Number,HigLabo.Converter,Base64CharTable,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,SetDecodeTable,The following statement contains a magic number: _DecodeTable = new Byte[256];
Magic Number,HigLabo.Converter,Base64CharTable,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,SetDecodeTable,The following statement contains a magic number: i == 61
Magic Number,HigLabo.Converter,Base64CharTable,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,SetDecodeTable,The following statement contains a magic number: i < 256
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 31 || c == 34 || c == 39 || c == 60 || c == 62 || c == 92
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 31 || c == 34 || c == 39 || c == 60 || c == 62 || c == 92
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 31 || c == 34 || c == 39 || c == 60 || c == 62 || c == 92
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 31 || c == 34 || c == 39 || c == 60 || c == 62 || c == 92
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 31 || c == 34 || c == 39 || c == 60 || c == 62 || c == 92
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 31 || c == 34 || c == 39 || c == 60 || c == 62 || c == 92
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62
Magic Number,HigLabo.Core,JavaScriptStringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\JavaScriptStringConverter.cs,Encode,The following statement contains a magic number: c >= 0 && c <= 7 || c == 11 || c >= 14 && c <= 31 || c == 39 || c == 60 || c == 62
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370
Magic Number,HigLabo.Core,StringConverter,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370
