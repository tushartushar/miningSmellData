Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HigLabo.Web.Mvc,WebApiMultiParameterBinding,C:\repos\higty_higlabo\HigLabo.Web\Mvc\WebApiMultiParameterBinding.cs,ExecuteBindingAsync,Cyclomatic complexity of the method is 10
Long Parameter List,HigLabo.Web,HttpResponseStream,C:\repos\higty_higlabo\HigLabo.Web\Core\HttpResponseStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,HigLabo.Web.Mvc,ControllerExtensions,C:\repos\higty_higlabo\HigLabo.Web\Extensions\ControllerExtensions.cs,Render,The method has 5 parameters. Parameters: controller' viewType' viewPath' model' writer
Long Statement,HigLabo.Web.Mvc,WadlXmlWriter,C:\repos\higty_higlabo\HigLabo.Web\Mvc\WadlXmlWriter.cs,Write,The length of the statement  "                        xw.WriteQualifiedName(ToXmlTypeString(param.ParameterDescriptor.ParameterType) ?? "string"' "http://www.w3.org/2001/XMLSchema"); " is 128.
Empty Catch Block,HigLabo.Web,HttpResponseStream,C:\repos\higty_higlabo\HigLabo.Web\Core\HttpResponseStream.cs,Close,The method has an empty catch block.
Empty Catch Block,HigLabo.Web.Mvc,ParameterDataProviderFromRequestBody,C:\repos\higty_higlabo\HigLabo.Web\Mvc\ParameterDataProviderFromRequestBody.cs,GetDataSource,The method has an empty catch block.
Empty Catch Block,HigLabo.Web.Mvc,WebApiMultiParameterBinding,C:\repos\higty_higlabo\HigLabo.Web\Mvc\WebApiMultiParameterBinding.cs,ExecuteBindingAsync,The method has an empty catch block.
Empty Catch Block,HigLabo.Web.Mvc,WebApiMultiParameterBinding,C:\repos\higty_higlabo\HigLabo.Web\Mvc\WebApiMultiParameterBinding.cs,GetValue,The method has an empty catch block.
Magic Number,HigLabo.Web,Cookie,C:\repos\higty_higlabo\HigLabo.Web\Core\Cookie.cs,Remove,The following statement contains a magic number: hc.Expires = DateTime.Now.AddDays(-10);
Magic Number,HigLabo.Web,HttpDefaultContext,C:\repos\higty_higlabo\HigLabo.Web\Core\HttpDefaultContext.cs,GetRequestHeaderText,The following statement contains a magic number: if (_RequestHeaderLoaded == false)              {                  _RequestHeaderLoaded = true;                  StringBuilder sb = new StringBuilder(512 + this.Request.ContentLength);                    for (int i = 0; i < this.Request.Headers.Keys.Count; i++)                  {                      sb.AppendFormat("{0}: {1}"' this.Request.Headers.Keys[i]' this.Request.Headers[i]);                      sb.AppendLine();                  }                  _RequestHeaderText = sb.ToString();              }
Missing Default,HigLabo.Web.Mvc,ParameterDataProviderFromRequestBody,C:\repos\higty_higlabo\HigLabo.Web\Mvc\ParameterDataProviderFromRequestBody.cs,GetDataSource,The following switch statement is missing a default case: switch (contentType.MediaType.ToLower())              {                  case "application/json":                      {                          var bodyText = req.Content.ReadAsStringAsync().Result.Trim();                          if (bodyText.StartsWith("{"))                          {                              try                              {                                  var values = JsonConvert.DeserializeObject<Dictionary<String' Object>>(bodyText);                                  d = values.Aggregate(d' (seed' current) =>                                  {                                      if (current.Key != null && current.Value != null)                                      {                                          seed[current.Key] = current.Value.ToString();                                      }                                      return seed;                                  });                              }                              catch { }                          }                      }                      break;                  case "application/x-www-form-urlencoded":                      {                          var dd = req.Content.ReadAsFormDataAsync().Result;                          foreach (var key in dd.AllKeys)                          {                              d[key] = dd[key];                          }                      }                      break;                  case "multipart/form-data":                      {                          var result = req.Content.ReadAsMultipartAsync().Result;                          foreach (var content in result.Contents)                          {                              var name = content.Headers.ContentDisposition.Name;                              d[name] = content.ReadAsStringAsync().Result;                          }                      }                      break;              }
