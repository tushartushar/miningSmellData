Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HigLabo.DbSharp.CodeGenerator,DataConvertSqlScriptFile,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\CodeGenerator\SqlScript\DataConvertSqlScriptFile.cs,CreateBodyText,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.DbSharp.CodeGenerator,DataConvertSqlScriptFile,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\CodeGenerator\SqlScript\DataConvertSqlScriptFile.cs,CreateBodyTextSqlServer,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,Create,Cyclomatic complexity of the method is 12
Complex Method,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateClass,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateCreateCommandMethodBody,Cyclomatic complexity of the method is 43
Complex Method,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateSetOutputParameterValueMethodBody,Cyclomatic complexity of the method is 12
Complex Method,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateSetResultSetMethodBody,Cyclomatic complexity of the method is 11
Complex Method,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateDataReaderCastCSharpCodeSqlServer,Cyclomatic complexity of the method is 32
Complex Method,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateDataReaderCastCSharpCodeMySql,Cyclomatic complexity of the method is 39
Complex Method,HigLabo.DbSharp.CodeGenerator,TableRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableRecordClassSourceCodeFileFactory.cs,CreateSetValueMethod,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameInsert,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.DbSharp.CodeGenerator,TableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\TableStoredProcedureFactory.cs,CreateStoredProcedure,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,CreateParameter,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,Cyclomatic complexity of the method is 33
Complex Method,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,Cyclomatic complexity of the method is 40
Complex Method,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,GetColumns,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,GetParameters,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.DbSharp.MetaData,MySqlDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\MySqlDatabaseSchemaReader.cs,SetResultSetsList,Cyclomatic complexity of the method is 17
Complex Method,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,SetResultSetsList,Cyclomatic complexity of the method is 30
Long Statement,HigLabo.DbSharp.CodeGenerator,ResultSetClassFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\Class\ResultSetClassFactory.cs,CreateResultSetConstructor,The length of the statement  "		if (this.StoredProcedureType == StoredProcedureType.SelectAll || this.StoredProcedureType == StoredProcedureType.SelectByPrimaryKey) { " is 134.
Long Statement,HigLabo.DbSharp.CodeGenerator,ResultSetClassFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\Class\ResultSetClassFactory.cs,CreateResultSetToStringMethodBody,The length of the statement  "	yield return new CodeBlock (SourceCodeLanguage.CSharp' "sb.AppendLine(\"<{0}.{1}>\");"' this.StoredProcedureName' this.ResultSet.Name); " is 135.
Long Statement,HigLabo.DbSharp.CodeGenerator,ResultSetClassFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\Class\ResultSetClassFactory.cs,CreateResultSetToStringMethodBody,The length of the statement  "		yield return new CodeBlock (SourceCodeLanguage.CSharp' "sb.AppendFormat(\"{0}={1}\"' this.{0}); sb.AppendLine();"' parameter.Name' "{0}"); " is 138.
Long Statement,HigLabo.DbSharp.CodeGenerator,UserDefinedTableTypeRecordClassFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\Class\UserDefinedTableTypeRecordClassFactory.cs,CreateGetValuesMethodBody,The length of the statement  "				yield return new CodeBlock (SourceCodeLanguage.CSharp' "if (this.{1} != null) oo[{0}] = this.{1}.ToString();"' i' t.Columns [i].Name); " is 134.
Long Statement,HigLabo.DbSharp.CodeGenerator,ClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\ClassSourceCodeFileFactory.cs,AddPropertyAndField,The length of the statement  "			p.Set.Body.Add (SourceCodeLanguage.CSharp' "this.SetPropertyValue(ref _{0}' value ?? \"\"' this.GetPropertyChangedEventHandler());"' pName); " is 140.
Long Statement,HigLabo.DbSharp.CodeGenerator,ClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\ClassSourceCodeFileFactory.cs,AddPropertyAndField,The length of the statement  "			p.Set.Body.Add (SourceCodeLanguage.CSharp' "this.SetPropertyValue(ref _{0}' value' this.GetPropertyChangedEventHandler());"' pName); " is 132.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateCreateCommandMethodBody,The length of the statement  "			yield return new CodeBlock (SourceCodeLanguage.CSharp' "p = db.CreateParameter(\"{0}\"' {1}' {2}' {3});"' parameter.Name' parameter.DbType.GetDbTypeCodeBlock ()' parameter.Precision.HasValue ? parameter.Precision.ToString () : "null"' parameter.Scale.HasValue ? parameter.Scale.ToString () : "null"); " is 300.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateCreateCommandMethodBody,The length of the statement  "		cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "if (cm.Parameters[i].Value == null) cm.Parameters[i].Value = DBNull.Value;")); " is 140.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateSetOutputParameterValueMethodBody,The length of the statement  "				yield return new CodeBlock (SourceCodeLanguage.CSharp' "if (p.Value != DBNull.Value && p.Value != null) this.{0} = ((UInt64)p.Value != 0);"' parameter.GetNameWithoutAtmark ()); " is 176.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateSetOutputParameterValueMethodBody,The length of the statement  "				yield return new CodeBlock (SourceCodeLanguage.CSharp' "if (p.Value != DBNull.Value && p.Value != null) this.{0} = ({1})p.Value;"' parameter.GetNameWithoutAtmark ()' parameter.GetClassNameText ()); " is 197.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateSetOutputParameterValueMethodBody,The length of the statement  "			yield return new CodeBlock (SourceCodeLanguage.CSharp' "if (p.Value != DBNull.Value && p.Value != null) this.{0} = StoredProcedure.ToEnum<{1}>(p.Value as String) ?? this.{0};"' parameter.GetNameWithoutAtmark ()' parameter.EnumName); " is 232.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateSetResultSetMethodBody,The length of the statement  "				code += String.Format ("r.{0} = StoredProcedure.ToEnum<{1}>(reader[index] as String) ?? r.{0};"' parameter.Name' parameter.EnumName); " is 133.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateSetResultSetMethodBody,The length of the statement  "	cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "throw new StoredProcedureSchemaMismatchedException(this' index' ex);")); " is 134.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateToStringMethodBody,The length of the statement  "		yield return new CodeBlock (SourceCodeLanguage.CSharp' "sb.AppendFormat(\"{0}={1}\"' this.{0}); sb.AppendLine();"' parameter.GetNameWithoutAtmark ()' "{0}"); " is 157.
Long Statement,HigLabo.DbSharp.CodeGenerator,StoredProcedureClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\StoredProcedureClassSourceCodeFileFactory.cs,CreateGetResultSetsListMethodBody,The length of the statement  "		yield return new CodeBlock (SourceCodeLanguage.CSharp' "rs.{0}List.AddRange(l[{1}].ConvertAll(el => ({0})el));"' sp.ResultSets [i].Name' i); " is 140.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateSelectByPrimaryKeyOrNullMethod,The length of the statement  "	md.Body.Add (SourceCodeLanguage.CSharp' "return this.SelectByPrimaryKeyOrNull(this.GetDatabase()' {0});"' sb.ToString ()); " is 122.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateSelectByPrimaryKeyMethod1,The length of the statement  "	md.Body.Add (SourceCodeLanguage.CSharp' "if (r == null) throw new TableRecordNotFoundException(Name' {0});"' sb.ToString ()); " is 125.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateCreateStoredProcedureWithResultSetMethodBody,The length of the statement  "	cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' String.Format ("case TableStoredProcedureTypeWithResultSet.SelectAll: return CreateSelectAllStoredProcedure();"))); " is 176.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateCreateStoredProcedureWithResultSetMethodBody,The length of the statement  "	cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' String.Format ("case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record);"' t.Name))); " is 213.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateCreateStoredProcedureMethodBody,The length of the statement  "	cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' String.Format ("case TableStoredProcedureType.Insert: return this.CreateInsertStoredProcedure(record);"' t.Name))); " is 176.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateCreateStoredProcedureMethodBody,The length of the statement  "	cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' String.Format ("case TableStoredProcedureType.Update: return this.CreateUpdateStoredProcedure(record);"' t.Name))); " is 176.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateCreateStoredProcedureMethodBody,The length of the statement  "	cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' String.Format ("case TableStoredProcedureType.Delete: return this.CreateDeleteStoredProcedure(record);"' t.Name))); " is 176.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateSelectByPrimaryKeyStoredProcedureMethodBody,The length of the statement  "	yield return new CodeBlock (SourceCodeLanguage.CSharp' "if (record.OldRecord == null) throw new OldRecordIsNullException();"); " is 126.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateUpdateStoredProcedureMethodBody,The length of the statement  "	yield return new CodeBlock (SourceCodeLanguage.CSharp' "if (record.OldRecord == null) throw new OldRecordIsNullException();"); " is 126.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateDeleteStoredProcedureMethodBody,The length of the statement  "	yield return new CodeBlock (SourceCodeLanguage.CSharp' "if (record.OldRecord == null) throw new OldRecordIsNullException();"); " is 126.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateCreateDataTableMethod,The length of the statement  "		md.Body.Add (SourceCodeLanguage.CSharp' "dt.Columns.Add(\"@PK_{0}\"' typeof({1}));"' column.Name' column.GetClassNameText ()); " is 126.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateCreateDataTableMethod,The length of the statement  "		md.Body.Add (SourceCodeLanguage.CSharp' "dt.Columns.Add(\"@{0}\"' typeof({1}));"' column.Name' column.GetClassNameText ()); " is 123.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateSetDataRowMethodBody,The length of the statement  "	cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "if (record.OldRecord == null) throw new OldRecordIsNullException();")); " is 133.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateSetDataRowMethodBody,The length of the statement  "		cb.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "dataRow[\"@PK_{0}\"] = GetValueOrDBNull(record.OldRecord.{0});"' column.Name)); " is 141.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,CreateSetDataRowMethodBody,The length of the statement  "		yield return new CodeBlock (SourceCodeLanguage.CSharp' "dataRow[\"@{0}\"] = GetValueOrDBNull(record.{0});"' column.Name); " is 121.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableIRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableIRecordClassSourceCodeFileFactory.cs,AddProperty,The length of the statement  "		@interface.Properties.Add (new InterfaceProperty (new TypeName (column.GetClassName ())' column.GetNameWithoutAtmark ()' true' true)); " is 134.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableRecordClassSourceCodeFileFactory.cs,CreateSetValueMethod,The length of the statement  "		useCast = item.ConvertType == SqlParameterConvertType.Default && (tp == ClassNameType.Object || tp == ClassNameType.String || tp == ClassNameType.ByteArray || tp == ClassNameType.MySqlGeometry || tp == ClassNameType.Geography || tp == ClassNameType.Geometry || tp == ClassNameType.HierarchyId); " is 294.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableRecordClassSourceCodeFileFactory.cs,CreateSetValueMethod,The length of the statement  "				cbElse.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "var newValue = value as {0}?;"' tp.ToClassNameString ())); " is 124.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableRecordClassSourceCodeFileFactory.cs,CreateSetValueMethod,The length of the statement  "				cbElse.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "var newValue = value as {0};"' item.GetClassName ())); " is 120.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableRecordClassSourceCodeFileFactory.cs,CreateSetValueMethod,The length of the statement  "				cbElse.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "var newValue = TableRecord.TypeConverter.To{0}(value);"' tp)); " is 128.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableRecordClassSourceCodeFileFactory.cs,CreateSetValueMethod,The length of the statement  "				cbElse.CodeBlocks.Add (new CodeBlock (SourceCodeLanguage.CSharp' "var newValue = TableRecord.TypeConverter.ToEnum<{0}>(value);"' item.EnumName)); " is 145.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableRecordClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableRecordClassSourceCodeFileFactory.cs,CreateSetValueMethod,The length of the statement  "	md.Body.Add (SourceCodeLanguage.CSharp' String.Format ("throw new ArgumentOutOfRangeException(\"index\"' index' \"index must be 0-{0}\");"' t.Columns.Count - 1)); " is 162.
Long Statement,HigLabo.DbSharp.CodeGenerator,UserDefinedTableTypeSourceCodeFileClassFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\UserDefinedTableTypeSourceCodeFileClassFactory.cs,CreateDataTableMethodBody,The length of the statement  "		yield return new CodeBlock (SourceCodeLanguage.CSharp' "dt.Columns.Add(\"{0}\"' typeof({1}));"' column.Name' column.GetClassNameText ()); " is 137.
Long Statement,HigLabo.DbSharp.CodeGenerator,MySqlTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\MySqlTableStoredProcedureFactory.cs,CreateQueryOfTableNameSelectAll,The length of the statement  "	return String.Format ("Create Procedure {0}SelectAll () " + Environment.NewLine + Environment.NewLine + "select {1} from {0}"' table.Name' cNames); " is 147.
Long Statement,HigLabo.DbSharp.CodeGenerator,MySqlTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\MySqlTableStoredProcedureFactory.cs,CreateQueryOfTableNameSelectByPrimaryKey,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyColumns ()' column => String.Format ("PK_{0}"' column.GetDeclareParameterText ())' "'"' true)); " is 137.
Long Statement,HigLabo.DbSharp.CodeGenerator,MySqlTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\MySqlTableStoredProcedureFactory.cs,CreateQueryOfTableNameSelectByPrimaryKey,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyColumns ()' column => String.Format ("{0} = PK_{0}"' column.Name)' "and "' true)); " is 124.
Long Statement,HigLabo.DbSharp.CodeGenerator,MySqlTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\MySqlTableStoredProcedureFactory.cs,CreateQueryOfTableNameUpdate,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyOrTimestampColumns ()' column => String.Format ("PK_{0}"' column.GetDeclareParameterText ())' "'"' true)); " is 148.
Long Statement,HigLabo.DbSharp.CodeGenerator,MySqlTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\MySqlTableStoredProcedureFactory.cs,CreateQueryOfTableNameUpdate,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyColumns ()' column => String.Format ("{0} = PK_{0}"' column.Name)' "and "' true)); " is 124.
Long Statement,HigLabo.DbSharp.CodeGenerator,MySqlTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\MySqlTableStoredProcedureFactory.cs,CreateQueryOfTableNameUpdate,The length of the statement  "	sb.Append (CreateText (table.Columns.Where (column => column.CanUpdateValueColumn ())' column => String.Format ("T01.{0} = {0}"' column.Name)' "'"' true)); " is 155.
Long Statement,HigLabo.DbSharp.CodeGenerator,MySqlTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\MySqlTableStoredProcedureFactory.cs,CreateQueryOfTableNameDelete,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyOrTimestampColumns ()' column => String.Format ("PK_{0}"' column.GetDeclareParameterText ())' "'"' true)); " is 148.
Long Statement,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameSelectAll,The length of the statement  "	return String.Format ("Create Procedure {0}SelectAll As " + Environment.NewLine + Environment.NewLine + "select {1}from [{0}] with(nolock)"' table.Name' cNames); " is 161.
Long Statement,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameSelectByPrimaryKey,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyColumns ()' column => String.Format ("@PK_{0}"' column.GetDeclareParameterText ())' "'"' true)); " is 138.
Long Statement,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameSelectByPrimaryKey,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyColumns ()' column => String.Format ("[{0}] = @PK_{0}"' column.Name)' "and "' true)); " is 127.
Long Statement,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameUpdate,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyOrTimestampColumns ()' column => String.Format ("@PK_{0}"' column.GetDeclareParameterText ())' "'"' true)); " is 149.
Long Statement,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameUpdate,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyColumns ()' column => String.Format ("@{0} = @PK_{0}"' column.Name)' "and "' true)); " is 126.
Long Statement,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameUpdate,The length of the statement  "	sb.Append (CreateText (table.Columns.Where (column => column.CanUpdateValueColumn ())' column => String.Format ("[{0}] = @{0}"' column.Name)' "'"' true)); " is 154.
Long Statement,HigLabo.DbSharp.CodeGenerator,SqlServerTableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\SqlServerTableStoredProcedureFactory.cs,CreateQueryOfTableNameDelete,The length of the statement  "	sb.Append (CreateText (table.GetPrimaryKeyOrTimestampColumns ()' column => String.Format ("@PK_{0}"' column.GetDeclareParameterText ())' "'"' true)); " is 149.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\TableStoredProcedureFactory.cs,CreateTableStoredProcedures,The length of the statement  "		l.Add (this.CreateStoredProcedure (db' table' StoredProcedureType.SelectAll' this.CreateQueryOfTableNameSelectAll (table))); " is 124.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\TableStoredProcedureFactory.cs,CreateTableStoredProcedures,The length of the statement  "			l.Add (this.CreateStoredProcedure (db' table' StoredProcedureType.SelectByPrimaryKey' this.CreateQueryOfTableNameSelectByPrimaryKey (table))); " is 142.
Long Statement,HigLabo.DbSharp.CodeGenerator,TableStoredProcedureFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\TableStoredProcedureFactory\TableStoredProcedureFactory.cs,CreateStoredProcedure,The length of the statement  "	if (storedProcedureType == StoredProcedureType.SelectAll || storedProcedureType == StoredProcedureType.SelectByPrimaryKey) { " is 124.
Magic Number,HigLabo.DbSharp.CodeGenerator,TableClassSourceCodeFileFactory,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SourceCodeFactory\SourceCode\TableClassSourceCodeFileFactory.cs,ToCamelCase,The following statement contains a magic number: if (value.Length == 2)  	return value.ToLower ();  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case SqlServer2012DbType.BigInt:  	return 1;  case SqlServer2012DbType.Binary:  case SqlServer2012DbType.Image:  case SqlServer2012DbType.Timestamp:  case SqlServer2012DbType.VarBinary:  	return new Byte[0];  case SqlServer2012DbType.Bit:  	return true;  case SqlServer2012DbType.Char:  case SqlServer2012DbType.NChar:  case SqlServer2012DbType.NText:  case SqlServer2012DbType.NVarChar:  case SqlServer2012DbType.Text:  case SqlServer2012DbType.VarChar:  	return "a";  case SqlServer2012DbType.Xml:  	return "<xml></xml>";  case SqlServer2012DbType.DateTime:  case SqlServer2012DbType.SmallDateTime:  case SqlServer2012DbType.Date:  case SqlServer2012DbType.DateTime2:  	return new DateTime (2000' 1' 1);  case SqlServer2012DbType.Time:  	return new TimeSpan (2' 0' 0);  case SqlServer2012DbType.Decimal:  case SqlServer2012DbType.Money:  case SqlServer2012DbType.SmallMoney:  	return 1;  case SqlServer2012DbType.Float:  	return 1;  case SqlServer2012DbType.Int:  	return 1;  case SqlServer2012DbType.Real:  	return 1;  case SqlServer2012DbType.UniqueIdentifier:  	return Guid.NewGuid ();  case SqlServer2012DbType.SmallInt:  	return 1;  case SqlServer2012DbType.TinyInt:  	return 1;  case SqlServer2012DbType.Variant:  case SqlServer2012DbType.Udt:  	return new Object ();  case SqlServer2012DbType.Structured:  	return new DataTable ();  case SqlServer2012DbType.DateTimeOffset:  	return new DateTimeOffset (2000' 1' 1' 0' 0' 0' TimeSpan.FromHours (9));  default:  	throw new ArgumentException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case SqlServer2012DbType.BigInt:  	return 1;  case SqlServer2012DbType.Binary:  case SqlServer2012DbType.Image:  case SqlServer2012DbType.Timestamp:  case SqlServer2012DbType.VarBinary:  	return new Byte[0];  case SqlServer2012DbType.Bit:  	return true;  case SqlServer2012DbType.Char:  case SqlServer2012DbType.NChar:  case SqlServer2012DbType.NText:  case SqlServer2012DbType.NVarChar:  case SqlServer2012DbType.Text:  case SqlServer2012DbType.VarChar:  	return "a";  case SqlServer2012DbType.Xml:  	return "<xml></xml>";  case SqlServer2012DbType.DateTime:  case SqlServer2012DbType.SmallDateTime:  case SqlServer2012DbType.Date:  case SqlServer2012DbType.DateTime2:  	return new DateTime (2000' 1' 1);  case SqlServer2012DbType.Time:  	return new TimeSpan (2' 0' 0);  case SqlServer2012DbType.Decimal:  case SqlServer2012DbType.Money:  case SqlServer2012DbType.SmallMoney:  	return 1;  case SqlServer2012DbType.Float:  	return 1;  case SqlServer2012DbType.Int:  	return 1;  case SqlServer2012DbType.Real:  	return 1;  case SqlServer2012DbType.UniqueIdentifier:  	return Guid.NewGuid ();  case SqlServer2012DbType.SmallInt:  	return 1;  case SqlServer2012DbType.TinyInt:  	return 1;  case SqlServer2012DbType.Variant:  case SqlServer2012DbType.Udt:  	return new Object ();  case SqlServer2012DbType.Structured:  	return new DataTable ();  case SqlServer2012DbType.DateTimeOffset:  	return new DateTimeOffset (2000' 1' 1' 0' 0' 0' TimeSpan.FromHours (9));  default:  	throw new ArgumentException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case SqlServer2012DbType.BigInt:  	return 1;  case SqlServer2012DbType.Binary:  case SqlServer2012DbType.Image:  case SqlServer2012DbType.Timestamp:  case SqlServer2012DbType.VarBinary:  	return new Byte[0];  case SqlServer2012DbType.Bit:  	return true;  case SqlServer2012DbType.Char:  case SqlServer2012DbType.NChar:  case SqlServer2012DbType.NText:  case SqlServer2012DbType.NVarChar:  case SqlServer2012DbType.Text:  case SqlServer2012DbType.VarChar:  	return "a";  case SqlServer2012DbType.Xml:  	return "<xml></xml>";  case SqlServer2012DbType.DateTime:  case SqlServer2012DbType.SmallDateTime:  case SqlServer2012DbType.Date:  case SqlServer2012DbType.DateTime2:  	return new DateTime (2000' 1' 1);  case SqlServer2012DbType.Time:  	return new TimeSpan (2' 0' 0);  case SqlServer2012DbType.Decimal:  case SqlServer2012DbType.Money:  case SqlServer2012DbType.SmallMoney:  	return 1;  case SqlServer2012DbType.Float:  	return 1;  case SqlServer2012DbType.Int:  	return 1;  case SqlServer2012DbType.Real:  	return 1;  case SqlServer2012DbType.UniqueIdentifier:  	return Guid.NewGuid ();  case SqlServer2012DbType.SmallInt:  	return 1;  case SqlServer2012DbType.TinyInt:  	return 1;  case SqlServer2012DbType.Variant:  case SqlServer2012DbType.Udt:  	return new Object ();  case SqlServer2012DbType.Structured:  	return new DataTable ();  case SqlServer2012DbType.DateTimeOffset:  	return new DateTimeOffset (2000' 1' 1' 0' 0' 0' TimeSpan.FromHours (9));  default:  	throw new ArgumentException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case SqlServer2012DbType.BigInt:  	return 1;  case SqlServer2012DbType.Binary:  case SqlServer2012DbType.Image:  case SqlServer2012DbType.Timestamp:  case SqlServer2012DbType.VarBinary:  	return new Byte[0];  case SqlServer2012DbType.Bit:  	return true;  case SqlServer2012DbType.Char:  case SqlServer2012DbType.NChar:  case SqlServer2012DbType.NText:  case SqlServer2012DbType.NVarChar:  case SqlServer2012DbType.Text:  case SqlServer2012DbType.VarChar:  	return "a";  case SqlServer2012DbType.Xml:  	return "<xml></xml>";  case SqlServer2012DbType.DateTime:  case SqlServer2012DbType.SmallDateTime:  case SqlServer2012DbType.Date:  case SqlServer2012DbType.DateTime2:  	return new DateTime (2000' 1' 1);  case SqlServer2012DbType.Time:  	return new TimeSpan (2' 0' 0);  case SqlServer2012DbType.Decimal:  case SqlServer2012DbType.Money:  case SqlServer2012DbType.SmallMoney:  	return 1;  case SqlServer2012DbType.Float:  	return 1;  case SqlServer2012DbType.Int:  	return 1;  case SqlServer2012DbType.Real:  	return 1;  case SqlServer2012DbType.UniqueIdentifier:  	return Guid.NewGuid ();  case SqlServer2012DbType.SmallInt:  	return 1;  case SqlServer2012DbType.TinyInt:  	return 1;  case SqlServer2012DbType.Variant:  case SqlServer2012DbType.Udt:  	return new Object ();  case SqlServer2012DbType.Structured:  	return new DataTable ();  case SqlServer2012DbType.DateTimeOffset:  	return new DateTimeOffset (2000' 1' 1' 0' 0' 0' TimeSpan.FromHours (9));  default:  	throw new ArgumentException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new DateTime (2000' 1' 1);  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new TimeSpan (2' 0' 0);  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new DateTimeOffset (2000' 1' 1' 0' 0' 0' TimeSpan.FromHours (9));  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new DateTimeOffset (2000' 1' 1' 0' 0' 0' TimeSpan.FromHours (9));  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case MySqlDbType.Binary:  case MySqlDbType.Blob:  case MySqlDbType.TinyBlob:  case MySqlDbType.MediumBlob:  case MySqlDbType.LongBlob:  case MySqlDbType.Byte:  case MySqlDbType.VarBinary:  	return new Byte[0];  case MySqlDbType.Bit:  	return true;  case MySqlDbType.Date:  case MySqlDbType.Newdate:  case MySqlDbType.DateTime:  	return new DateTime (2000' 1' 1);  case MySqlDbType.Decimal:  case MySqlDbType.Enum:  	return "a";  case MySqlDbType.Geometry:  	return new MySqlGeometry (40.735031' -73.768387);  case MySqlDbType.Guid:  	return Guid.NewGuid ();  case MySqlDbType.Double:  case MySqlDbType.Float:  case MySqlDbType.Int16:  case MySqlDbType.Int24:  case MySqlDbType.Int32:  case MySqlDbType.Int64:  case MySqlDbType.UByte:  case MySqlDbType.UInt16:  case MySqlDbType.UInt24:  case MySqlDbType.UInt32:  case MySqlDbType.UInt64:  case MySqlDbType.NewDecimal:  	return 1;  case MySqlDbType.Set:  	return "a";  case MySqlDbType.Time:  	return new TimeSpan (2' 0' 0);  case MySqlDbType.Timestamp:  	return null;  case MySqlDbType.LongText:  case MySqlDbType.MediumText:  case MySqlDbType.String:  case MySqlDbType.Text:  case MySqlDbType.TinyText:  case MySqlDbType.VarChar:  case MySqlDbType.VarString:  	return "a";  case MySqlDbType.Year:  	return 2000;  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case MySqlDbType.Binary:  case MySqlDbType.Blob:  case MySqlDbType.TinyBlob:  case MySqlDbType.MediumBlob:  case MySqlDbType.LongBlob:  case MySqlDbType.Byte:  case MySqlDbType.VarBinary:  	return new Byte[0];  case MySqlDbType.Bit:  	return true;  case MySqlDbType.Date:  case MySqlDbType.Newdate:  case MySqlDbType.DateTime:  	return new DateTime (2000' 1' 1);  case MySqlDbType.Decimal:  case MySqlDbType.Enum:  	return "a";  case MySqlDbType.Geometry:  	return new MySqlGeometry (40.735031' -73.768387);  case MySqlDbType.Guid:  	return Guid.NewGuid ();  case MySqlDbType.Double:  case MySqlDbType.Float:  case MySqlDbType.Int16:  case MySqlDbType.Int24:  case MySqlDbType.Int32:  case MySqlDbType.Int64:  case MySqlDbType.UByte:  case MySqlDbType.UInt16:  case MySqlDbType.UInt24:  case MySqlDbType.UInt32:  case MySqlDbType.UInt64:  case MySqlDbType.NewDecimal:  	return 1;  case MySqlDbType.Set:  	return "a";  case MySqlDbType.Time:  	return new TimeSpan (2' 0' 0);  case MySqlDbType.Timestamp:  	return null;  case MySqlDbType.LongText:  case MySqlDbType.MediumText:  case MySqlDbType.String:  case MySqlDbType.Text:  case MySqlDbType.TinyText:  case MySqlDbType.VarChar:  case MySqlDbType.VarString:  	return "a";  case MySqlDbType.Year:  	return 2000;  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case MySqlDbType.Binary:  case MySqlDbType.Blob:  case MySqlDbType.TinyBlob:  case MySqlDbType.MediumBlob:  case MySqlDbType.LongBlob:  case MySqlDbType.Byte:  case MySqlDbType.VarBinary:  	return new Byte[0];  case MySqlDbType.Bit:  	return true;  case MySqlDbType.Date:  case MySqlDbType.Newdate:  case MySqlDbType.DateTime:  	return new DateTime (2000' 1' 1);  case MySqlDbType.Decimal:  case MySqlDbType.Enum:  	return "a";  case MySqlDbType.Geometry:  	return new MySqlGeometry (40.735031' -73.768387);  case MySqlDbType.Guid:  	return Guid.NewGuid ();  case MySqlDbType.Double:  case MySqlDbType.Float:  case MySqlDbType.Int16:  case MySqlDbType.Int24:  case MySqlDbType.Int32:  case MySqlDbType.Int64:  case MySqlDbType.UByte:  case MySqlDbType.UInt16:  case MySqlDbType.UInt24:  case MySqlDbType.UInt32:  case MySqlDbType.UInt64:  case MySqlDbType.NewDecimal:  	return 1;  case MySqlDbType.Set:  	return "a";  case MySqlDbType.Time:  	return new TimeSpan (2' 0' 0);  case MySqlDbType.Timestamp:  	return null;  case MySqlDbType.LongText:  case MySqlDbType.MediumText:  case MySqlDbType.String:  case MySqlDbType.Text:  case MySqlDbType.TinyText:  case MySqlDbType.VarChar:  case MySqlDbType.VarString:  	return "a";  case MySqlDbType.Year:  	return 2000;  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case MySqlDbType.Binary:  case MySqlDbType.Blob:  case MySqlDbType.TinyBlob:  case MySqlDbType.MediumBlob:  case MySqlDbType.LongBlob:  case MySqlDbType.Byte:  case MySqlDbType.VarBinary:  	return new Byte[0];  case MySqlDbType.Bit:  	return true;  case MySqlDbType.Date:  case MySqlDbType.Newdate:  case MySqlDbType.DateTime:  	return new DateTime (2000' 1' 1);  case MySqlDbType.Decimal:  case MySqlDbType.Enum:  	return "a";  case MySqlDbType.Geometry:  	return new MySqlGeometry (40.735031' -73.768387);  case MySqlDbType.Guid:  	return Guid.NewGuid ();  case MySqlDbType.Double:  case MySqlDbType.Float:  case MySqlDbType.Int16:  case MySqlDbType.Int24:  case MySqlDbType.Int32:  case MySqlDbType.Int64:  case MySqlDbType.UByte:  case MySqlDbType.UInt16:  case MySqlDbType.UInt24:  case MySqlDbType.UInt32:  case MySqlDbType.UInt64:  case MySqlDbType.NewDecimal:  	return 1;  case MySqlDbType.Set:  	return "a";  case MySqlDbType.Time:  	return new TimeSpan (2' 0' 0);  case MySqlDbType.Timestamp:  	return null;  case MySqlDbType.LongText:  case MySqlDbType.MediumText:  case MySqlDbType.String:  case MySqlDbType.Text:  case MySqlDbType.TinyText:  case MySqlDbType.VarChar:  case MySqlDbType.VarString:  	return "a";  case MySqlDbType.Year:  	return 2000;  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: switch (sqlDbType) {  case MySqlDbType.Binary:  case MySqlDbType.Blob:  case MySqlDbType.TinyBlob:  case MySqlDbType.MediumBlob:  case MySqlDbType.LongBlob:  case MySqlDbType.Byte:  case MySqlDbType.VarBinary:  	return new Byte[0];  case MySqlDbType.Bit:  	return true;  case MySqlDbType.Date:  case MySqlDbType.Newdate:  case MySqlDbType.DateTime:  	return new DateTime (2000' 1' 1);  case MySqlDbType.Decimal:  case MySqlDbType.Enum:  	return "a";  case MySqlDbType.Geometry:  	return new MySqlGeometry (40.735031' -73.768387);  case MySqlDbType.Guid:  	return Guid.NewGuid ();  case MySqlDbType.Double:  case MySqlDbType.Float:  case MySqlDbType.Int16:  case MySqlDbType.Int24:  case MySqlDbType.Int32:  case MySqlDbType.Int64:  case MySqlDbType.UByte:  case MySqlDbType.UInt16:  case MySqlDbType.UInt24:  case MySqlDbType.UInt32:  case MySqlDbType.UInt64:  case MySqlDbType.NewDecimal:  	return 1;  case MySqlDbType.Set:  	return "a";  case MySqlDbType.Time:  	return new TimeSpan (2' 0' 0);  case MySqlDbType.Timestamp:  	return null;  case MySqlDbType.LongText:  case MySqlDbType.MediumText:  case MySqlDbType.String:  case MySqlDbType.Text:  case MySqlDbType.TinyText:  case MySqlDbType.VarChar:  case MySqlDbType.VarString:  	return "a";  case MySqlDbType.Year:  	return 2000;  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new DateTime (2000' 1' 1);  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new MySqlGeometry (40.735031' -73.768387);  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new MySqlGeometry (40.735031' -73.768387);  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return new TimeSpan (2' 0' 0);  
Magic Number,HigLabo.DbSharp,DataTypeExtensions,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\DataTypeExtensions.cs,GetParameterValue,The following statement contains a magic number: return 2000;  
Magic Number,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,GetTables,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetTables ());  	while (reader.Read ()) {  		var o = new DatabaseObject (DatabaseObjectType.Table);  		o.Name = reader.GetString (0);  		o.CreateTime = reader.GetDateTime (1);  		o.LastAlteredTime = reader.GetDateTime (2);  		l.Add (o);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,GetTables,The following statement contains a magic number: while (reader.Read ()) {  	var o = new DatabaseObject (DatabaseObjectType.Table);  	o.Name = reader.GetString (0);  	o.CreateTime = reader.GetDateTime (1);  	o.LastAlteredTime = reader.GetDateTime (2);  	l.Add (o);  }  
Magic Number,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,GetTables,The following statement contains a magic number: o.LastAlteredTime = reader.GetDateTime (2);  
Magic Number,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,GetTable,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetTable (name));  	if (reader.Read () == false)  		throw new InvalidOperationException (String.Format ("Table {0} does not exist."' name));  	t.Name = reader.GetString (0);  	t.CreateTime = reader.GetDateTime (1);  	t.LastAlteredTime = reader.GetDateTime (2);  }  
Magic Number,HigLabo.DbSharp.MetaData,DatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\DatabaseSchemaReader.cs,GetTable,The following statement contains a magic number: t.LastAlteredTime = reader.GetDateTime (2);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: using (Database db = this.CreateDatabase ()) {  	var reader = db.ExecuteReader (this.QueryBuilder.GetUserDefinedTypeColumns (name));  	while (reader.Read ()) {  		c = new DataType ();  		c.Name = reader.GetString (0);  		c.Ordinal = l.Count;  		c.DbType = this.CreateDbType (reader ["ColumnType"]);  		c.UdtTypeName = reader.GetString (6);  		//UdtTypeName  		if (reader [4] != DBNull.Value)  			c.Length = reader.GetInt16 (2);  		if (reader [5] != DBNull.Value)  			c.Precision = reader.GetByte (3);  		if (reader [6] != DBNull.Value)  			c.Scale = reader.GetByte (4);  		c.AllowNull = reader.GetBoolean (5);  		l.Add (c);  	}  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: while (reader.Read ()) {  	c = new DataType ();  	c.Name = reader.GetString (0);  	c.Ordinal = l.Count;  	c.DbType = this.CreateDbType (reader ["ColumnType"]);  	c.UdtTypeName = reader.GetString (6);  	//UdtTypeName  	if (reader [4] != DBNull.Value)  		c.Length = reader.GetInt16 (2);  	if (reader [5] != DBNull.Value)  		c.Precision = reader.GetByte (3);  	if (reader [6] != DBNull.Value)  		c.Scale = reader.GetByte (4);  	c.AllowNull = reader.GetBoolean (5);  	l.Add (c);  }  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: c.UdtTypeName = reader.GetString (6);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: if (reader [4] != DBNull.Value)  	c.Length = reader.GetInt16 (2);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: if (reader [4] != DBNull.Value)  	c.Length = reader.GetInt16 (2);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: c.Length = reader.GetInt16 (2);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: if (reader [5] != DBNull.Value)  	c.Precision = reader.GetByte (3);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: if (reader [5] != DBNull.Value)  	c.Precision = reader.GetByte (3);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: c.Precision = reader.GetByte (3);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: if (reader [6] != DBNull.Value)  	c.Scale = reader.GetByte (4);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: if (reader [6] != DBNull.Value)  	c.Scale = reader.GetByte (4);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: c.Scale = reader.GetByte (4);  
Magic Number,HigLabo.DbSharp.MetaData,SqlServerDatabaseSchemaReader,F:\newReposMay17\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.CodeGenerator\SchemaReader\SqlServerDatabaseSchemaReader.cs,GetUserDefinedTableTypeColumns,The following statement contains a magic number: c.AllowNull = reader.GetBoolean (5);  
