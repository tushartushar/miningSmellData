Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HigLabo.Net.Internal,FtpDataReceiveContext,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,Cyclomatic complexity of the method is 16
Complex Method,HigLabo.Net.Ftp,FtpClient,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.Async.cs,OpenDataSocket,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.Net.Ftp,FtpClient,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.Async.cs,UploadFile,Cyclomatic complexity of the method is 12
Complex Method,HigLabo.Net.Ftp,FtpClient,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.Async.cs,DownloadFile,Cyclomatic complexity of the method is 12
Complex Method,HigLabo.Net.Ftp,FtpClient,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.Async.cs,ExecuteNlst,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Net.Ftp,FtpClient,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.Async.cs,ExecuteList,Cyclomatic complexity of the method is 8
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	this.Stream.WriteByte (bb [i]);  	if (_State == ParseState.ResponseCode) {  		responseCodeIndex += 1;  		if (responseCodeIndex == 3) {  			var lastByte = this.GetLastByte (3);  			var text = this.Encoding.GetString (lastByte);  			Int32 code = 0;  			if (Int32.TryParse (text' out code) == true) {  				_State = ParseState.HasNextLine;  			} else {  				_State = ParseState.Message;  			}  		}  	} else if (_State == ParseState.HasNextLine) {  		if (bb [i] == AsciiCharCode.Space.GetNumber ()) {  			_State = ParseState.LastLineMessage;  		} else if (bb [i] == AsciiCharCode.Minus.GetNumber ()) {  			_State = ParseState.Message;  		} else {  			throw new DataTransferContextException (this);  		}  	} else if (_State == ParseState.Message) {  		if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  			_State = ParseState.CarriageReturn;  		}  	} else if (_State == ParseState.CarriageReturn) {  		if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  			responseCodeIndex = 0;  			_State = ParseState.ResponseCode;  		} else {  			throw new DataTransferContextException (this);  		}  	} else if (_State == ParseState.LastLineMessage) {  		if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  			_State = ParseState.LastLineCarriageReturn;  		}  	} else if (_State == ParseState.LastLineCarriageReturn) {  		if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  			return false;  		} else {  			throw new DataTransferContextException (this);  		}  	}  	bb [i] = 0;  }  
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	this.Stream.WriteByte (bb [i]);  	if (_State == ParseState.ResponseCode) {  		responseCodeIndex += 1;  		if (responseCodeIndex == 3) {  			var lastByte = this.GetLastByte (3);  			var text = this.Encoding.GetString (lastByte);  			Int32 code = 0;  			if (Int32.TryParse (text' out code) == true) {  				_State = ParseState.HasNextLine;  			} else {  				_State = ParseState.Message;  			}  		}  	} else if (_State == ParseState.HasNextLine) {  		if (bb [i] == AsciiCharCode.Space.GetNumber ()) {  			_State = ParseState.LastLineMessage;  		} else if (bb [i] == AsciiCharCode.Minus.GetNumber ()) {  			_State = ParseState.Message;  		} else {  			throw new DataTransferContextException (this);  		}  	} else if (_State == ParseState.Message) {  		if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  			_State = ParseState.CarriageReturn;  		}  	} else if (_State == ParseState.CarriageReturn) {  		if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  			responseCodeIndex = 0;  			_State = ParseState.ResponseCode;  		} else {  			throw new DataTransferContextException (this);  		}  	} else if (_State == ParseState.LastLineMessage) {  		if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  			_State = ParseState.LastLineCarriageReturn;  		}  	} else if (_State == ParseState.LastLineCarriageReturn) {  		if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  			return false;  		} else {  			throw new DataTransferContextException (this);  		}  	}  	bb [i] = 0;  }  
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: if (_State == ParseState.ResponseCode) {  	responseCodeIndex += 1;  	if (responseCodeIndex == 3) {  		var lastByte = this.GetLastByte (3);  		var text = this.Encoding.GetString (lastByte);  		Int32 code = 0;  		if (Int32.TryParse (text' out code) == true) {  			_State = ParseState.HasNextLine;  		} else {  			_State = ParseState.Message;  		}  	}  } else if (_State == ParseState.HasNextLine) {  	if (bb [i] == AsciiCharCode.Space.GetNumber ()) {  		_State = ParseState.LastLineMessage;  	} else if (bb [i] == AsciiCharCode.Minus.GetNumber ()) {  		_State = ParseState.Message;  	} else {  		throw new DataTransferContextException (this);  	}  } else if (_State == ParseState.Message) {  	if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  		_State = ParseState.CarriageReturn;  	}  } else if (_State == ParseState.CarriageReturn) {  	if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  		responseCodeIndex = 0;  		_State = ParseState.ResponseCode;  	} else {  		throw new DataTransferContextException (this);  	}  } else if (_State == ParseState.LastLineMessage) {  	if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  		_State = ParseState.LastLineCarriageReturn;  	}  } else if (_State == ParseState.LastLineCarriageReturn) {  	if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  		return false;  	} else {  		throw new DataTransferContextException (this);  	}  }  
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: if (_State == ParseState.ResponseCode) {  	responseCodeIndex += 1;  	if (responseCodeIndex == 3) {  		var lastByte = this.GetLastByte (3);  		var text = this.Encoding.GetString (lastByte);  		Int32 code = 0;  		if (Int32.TryParse (text' out code) == true) {  			_State = ParseState.HasNextLine;  		} else {  			_State = ParseState.Message;  		}  	}  } else if (_State == ParseState.HasNextLine) {  	if (bb [i] == AsciiCharCode.Space.GetNumber ()) {  		_State = ParseState.LastLineMessage;  	} else if (bb [i] == AsciiCharCode.Minus.GetNumber ()) {  		_State = ParseState.Message;  	} else {  		throw new DataTransferContextException (this);  	}  } else if (_State == ParseState.Message) {  	if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  		_State = ParseState.CarriageReturn;  	}  } else if (_State == ParseState.CarriageReturn) {  	if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  		responseCodeIndex = 0;  		_State = ParseState.ResponseCode;  	} else {  		throw new DataTransferContextException (this);  	}  } else if (_State == ParseState.LastLineMessage) {  	if (bb [i] == AsciiCharCode.CarriageReturn.GetNumber ()) {  		_State = ParseState.LastLineCarriageReturn;  	}  } else if (_State == ParseState.LastLineCarriageReturn) {  	if (bb [i] == AsciiCharCode.LineFeed.GetNumber ()) {  		return false;  	} else {  		throw new DataTransferContextException (this);  	}  }  
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: if (responseCodeIndex == 3) {  	var lastByte = this.GetLastByte (3);  	var text = this.Encoding.GetString (lastByte);  	Int32 code = 0;  	if (Int32.TryParse (text' out code) == true) {  		_State = ParseState.HasNextLine;  	} else {  		_State = ParseState.Message;  	}  }  
Magic Number,HigLabo.Net.Internal,FtpDataReceiveContext,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Async\FtpDataReceiveContext.cs,ParseBuffer,The following statement contains a magic number: if (responseCodeIndex == 3) {  	var lastByte = this.GetLastByte (3);  	var text = this.Encoding.GetString (lastByte);  	Int32 code = 0;  	if (Int32.TryParse (text' out code) == true) {  		_State = ParseState.HasNextLine;  	} else {  		_State = ParseState.Message;  	}  }  
Magic Number,HigLabo.Net.Ftp,FtpClient,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.Async.cs,OpenPassiveConnection,The following statement contains a magic number: if (pasv.Length < 6) {  	throw new FtpClientException (rs);  }  
Magic Number,HigLabo.Net.Ftp,FtpClient,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClient.Async.cs,GetFileSize,The following statement contains a magic number: return Int64.Parse (rs.Text.Substring (4));  
Magic Number,HigLabo.Net.Ftp,FtpClientDefaultSettings,F:\newReposMay17\higty_higlabo\HigLabo.Net.Ftp\Core\FtpClientDefaultSettings.cs,FtpClientDefaultSettings,The following statement contains a magic number: this.Port = 21;  
