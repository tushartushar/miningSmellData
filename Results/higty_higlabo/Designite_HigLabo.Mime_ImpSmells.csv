Implementation smell,Namespace,Class,File,Method,Description
Long Method,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The method has 138 lines of code.
Complex Method,HigLabo.Mime,MailAddress,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,Cyclomatic complexity of the method is 11
Complex Method,HigLabo.Mime,MailAddress,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,CreateMailAddressList,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadHeaderAndMessageBody,Cyclomatic complexity of the method is 14
Complex Method,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ParseMimeHeaderParameter,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,Cyclomatic complexity of the method is 11
Complex Method,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,Cyclomatic complexity of the method is 24
Complex Method,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,SetMimeContentBody,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,CheckBoundary,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,Cyclomatic complexity of the method is 13
Long Statement,HigLabo.Mime,MimeContent,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeContent.cs,GetDecodedData,The length of the statement  "            if (bb == null) throw new InvalidOperationException("BodyData is not loaded.Please ensure to set MimeParser.Filter.LoadContentBodyData = true when you download mail."); " is 168.
Long Statement,HigLabo.Mime,MimeMessage,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeMessage.cs,GetRawText,The length of the statement  "            if (this.RawData == null) throw new InvalidOperationException("RawData is not loaded.Please ensure to set MimeParser.Filter.LoadContentBodyData = true when you download mail."); " is 177.
Long Statement,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ParseContentType,The length of the statement  "            if (header.Parameters.Count == 0) { throw new InvalidMimeFormatException(""' this.Encoding.GetString(header.RawData)); } " is 120.
Long Statement,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ParseContentDisposition,The length of the statement  "            if (header.Parameters.Count == 0) { throw new InvalidMimeFormatException(""' this.Encoding.GetString(header.RawData)); } " is 120.
Long Statement,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The length of the statement  "                    p.Rfc2231Ordinal = Int32.Parse(p.RawText.Substring(startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value)); " is 137.
Long Statement,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,SetMimeContentBody,The length of the statement  "                    case TransferEncoding.QuotedPrintable: mc.BodyText = charSet.GetString(_QuotedPrintableBodyConverter.Decode(bodyBytes)); break; " is 127.
Long Statement,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The length of the statement  "            Boolean endWithNewline = lastBytes.Length > 1 && lastBytes[lastBytes.Length - 2] == 13 && lastBytes[lastBytes.Length - 1] == 10; " is 128.
Complex Conditional,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ParseMimeHeaderParameter,The conditional expression  "(insideDoubleQuatation == false && c == ';') || //attribute=value;                      (insideDoubleQuatation == true && previousChar == '"' && c == ';') || // attribute="value";                      c == '\n' || c == '\r' || c == '\t' || i == length - 1"  is complex.
Magic Number,HigLabo.Mime,MailAddress,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,The following statement contains a magic number: (Byte)trimValue[i] >= 128
Magic Number,HigLabo.Mime,MailAddress,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,The following statement contains a magic number: m.DisplayName = m.DisplayName.Substring(1' m.DisplayName.Length - 2);
Magic Number,HigLabo.Mime,MimeContent,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeContent.cs,GetDecodedData,The following statement contains a magic number: var cv = new Base64Converter(9000);
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,AddToRawDataWithNewline,The following statement contains a magic number: _RawData.Add(new Byte[] { 13' 10 });
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,AddToRawDataWithNewline,The following statement contains a magic number: _RawData.Add(new Byte[] { 13' 10 });
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadFromStream,The following statement contains a magic number: buffer[lastLineLength + readLength] = 10;
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: switch (state)                      {                          case MimeContentParserState.Boundary:                              #region                              {                                  line = cx.ReadLine();                                  if (line.Length == 0) { continue; }                                  this.AddToRawData(line);                                  if (line.Length == 2 && line[0] == 13 && line[1] == 10) { continue; }                                    bodyBuffer.AddBoundaryLine(line);                                  if (IsEndByNewLine(line) == true)                                  {                                      boundaryResult = bodyBuffer.CheckBoundary(boundary);                                      switch (boundaryResult)                                      {                                          case CheckBoundaryResult.None:                                              {                                                  var lineText = this.Encoding.GetString(line);                                                  throw new InvalidMimeFormatException(""' lineText);                                              }                                          case CheckBoundaryResult.Boundary:                                              {                                                  headerPointer.Clear();                                                  state = MimeContentParserState.Header;                                              }                                              break;                                          case CheckBoundaryResult.EndBoundary: break;                                          default: throw new InvalidOperationException();                                      }                                  }                              }                              break;                              #endregion                          case MimeContentParserState.Header:                              #region                              {                                  headerPointer = cx.ReadHeader(headerPointer);                                  if (headerPointer.IsEmptyNewLine() == true)                                  {                                      var bb = headerPointer.ToArray();                                      this.AddToRawData(bb);                                      bodyBuffer.AddHeaderLine(bb);                                      bodyBuffer.HeaderLength = bodyBuffer.Length;                                      headerPointer.Clear();                                        if (mc.ContentType != null && String.IsNullOrEmpty(mc.ContentType.Boundary) == false)                                      {                                          childBoundary = CreateBoundary("--" + mc.ContentType.Boundary);                                          state = MimeContentParserState.ChildContent;                                      }                                      else                                      {                                          state = MimeContentParserState.Body;                                      }                                  }                                  else if (headerPointer.IsEnd == true)                                  {                                      var bb = headerPointer.ToArray();                                      this.AddToRawData(bb);                                      //New MimeHeader                                      var header = ParseHeader(headerPointer);                                      mc.Headers.Add(header);                                      headerPointer.Clear();                                      bodyBuffer.AddHeaderLine(bb);                                  }                              }                              break;                              #endregion                          case MimeContentParserState.Body:                              #region                              {                                  var bodyLine = cx.ReadBody(boundary' out boundaryResult' out isEndOfBody);                                  bodyBuffer.AddBodyLine(bodyLine);                                  if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true)                                  {                                      this.SetMimeContentBody(mc' bodyBuffer);                                      l.Add(mc);                                        headerPointer.Clear();                                      bodyBuffer.Clear();                                      mc = new MimeContent();                                        state = MimeContentParserState.Boundary;                                  }                              }                              break;                              #endregion                          case MimeContentParserState.ChildContent:                              #region                              {                                  var bodyLine = cx.ReadBody(childBoundary' out boundaryResult' out isEndOfBody);                                  bodyBuffer.AddBodyLine(bodyLine);                                  if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true)                                  {                                      if (bodyBuffer.Length > 0)                                      {                                          this.AddToRawDataWithNewline(bodyBuffer.GetBodyArray());                                      }                                        mc.Contents.AddRange(ReadMimeContent(cx' childBoundary));                                        bodyBuffer.Clear();                                        state = MimeContentParserState.Body;                                  }                              }                              break;                              #endregion                          default: throw new InvalidOperationException();                      }
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: switch (state)                      {                          case MimeContentParserState.Boundary:                              #region                              {                                  line = cx.ReadLine();                                  if (line.Length == 0) { continue; }                                  this.AddToRawData(line);                                  if (line.Length == 2 && line[0] == 13 && line[1] == 10) { continue; }                                    bodyBuffer.AddBoundaryLine(line);                                  if (IsEndByNewLine(line) == true)                                  {                                      boundaryResult = bodyBuffer.CheckBoundary(boundary);                                      switch (boundaryResult)                                      {                                          case CheckBoundaryResult.None:                                              {                                                  var lineText = this.Encoding.GetString(line);                                                  throw new InvalidMimeFormatException(""' lineText);                                              }                                          case CheckBoundaryResult.Boundary:                                              {                                                  headerPointer.Clear();                                                  state = MimeContentParserState.Header;                                              }                                              break;                                          case CheckBoundaryResult.EndBoundary: break;                                          default: throw new InvalidOperationException();                                      }                                  }                              }                              break;                              #endregion                          case MimeContentParserState.Header:                              #region                              {                                  headerPointer = cx.ReadHeader(headerPointer);                                  if (headerPointer.IsEmptyNewLine() == true)                                  {                                      var bb = headerPointer.ToArray();                                      this.AddToRawData(bb);                                      bodyBuffer.AddHeaderLine(bb);                                      bodyBuffer.HeaderLength = bodyBuffer.Length;                                      headerPointer.Clear();                                        if (mc.ContentType != null && String.IsNullOrEmpty(mc.ContentType.Boundary) == false)                                      {                                          childBoundary = CreateBoundary("--" + mc.ContentType.Boundary);                                          state = MimeContentParserState.ChildContent;                                      }                                      else                                      {                                          state = MimeContentParserState.Body;                                      }                                  }                                  else if (headerPointer.IsEnd == true)                                  {                                      var bb = headerPointer.ToArray();                                      this.AddToRawData(bb);                                      //New MimeHeader                                      var header = ParseHeader(headerPointer);                                      mc.Headers.Add(header);                                      headerPointer.Clear();                                      bodyBuffer.AddHeaderLine(bb);                                  }                              }                              break;                              #endregion                          case MimeContentParserState.Body:                              #region                              {                                  var bodyLine = cx.ReadBody(boundary' out boundaryResult' out isEndOfBody);                                  bodyBuffer.AddBodyLine(bodyLine);                                  if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true)                                  {                                      this.SetMimeContentBody(mc' bodyBuffer);                                      l.Add(mc);                                        headerPointer.Clear();                                      bodyBuffer.Clear();                                      mc = new MimeContent();                                        state = MimeContentParserState.Boundary;                                  }                              }                              break;                              #endregion                          case MimeContentParserState.ChildContent:                              #region                              {                                  var bodyLine = cx.ReadBody(childBoundary' out boundaryResult' out isEndOfBody);                                  bodyBuffer.AddBodyLine(bodyLine);                                  if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true)                                  {                                      if (bodyBuffer.Length > 0)                                      {                                          this.AddToRawDataWithNewline(bodyBuffer.GetBodyArray());                                      }                                        mc.Contents.AddRange(ReadMimeContent(cx' childBoundary));                                        bodyBuffer.Clear();                                        state = MimeContentParserState.Body;                                  }                              }                              break;                              #endregion                          default: throw new InvalidOperationException();                      }
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: switch (state)                      {                          case MimeContentParserState.Boundary:                              #region                              {                                  line = cx.ReadLine();                                  if (line.Length == 0) { continue; }                                  this.AddToRawData(line);                                  if (line.Length == 2 && line[0] == 13 && line[1] == 10) { continue; }                                    bodyBuffer.AddBoundaryLine(line);                                  if (IsEndByNewLine(line) == true)                                  {                                      boundaryResult = bodyBuffer.CheckBoundary(boundary);                                      switch (boundaryResult)                                      {                                          case CheckBoundaryResult.None:                                              {                                                  var lineText = this.Encoding.GetString(line);                                                  throw new InvalidMimeFormatException(""' lineText);                                              }                                          case CheckBoundaryResult.Boundary:                                              {                                                  headerPointer.Clear();                                                  state = MimeContentParserState.Header;                                              }                                              break;                                          case CheckBoundaryResult.EndBoundary: break;                                          default: throw new InvalidOperationException();                                      }                                  }                              }                              break;                              #endregion                          case MimeContentParserState.Header:                              #region                              {                                  headerPointer = cx.ReadHeader(headerPointer);                                  if (headerPointer.IsEmptyNewLine() == true)                                  {                                      var bb = headerPointer.ToArray();                                      this.AddToRawData(bb);                                      bodyBuffer.AddHeaderLine(bb);                                      bodyBuffer.HeaderLength = bodyBuffer.Length;                                      headerPointer.Clear();                                        if (mc.ContentType != null && String.IsNullOrEmpty(mc.ContentType.Boundary) == false)                                      {                                          childBoundary = CreateBoundary("--" + mc.ContentType.Boundary);                                          state = MimeContentParserState.ChildContent;                                      }                                      else                                      {                                          state = MimeContentParserState.Body;                                      }                                  }                                  else if (headerPointer.IsEnd == true)                                  {                                      var bb = headerPointer.ToArray();                                      this.AddToRawData(bb);                                      //New MimeHeader                                      var header = ParseHeader(headerPointer);                                      mc.Headers.Add(header);                                      headerPointer.Clear();                                      bodyBuffer.AddHeaderLine(bb);                                  }                              }                              break;                              #endregion                          case MimeContentParserState.Body:                              #region                              {                                  var bodyLine = cx.ReadBody(boundary' out boundaryResult' out isEndOfBody);                                  bodyBuffer.AddBodyLine(bodyLine);                                  if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true)                                  {                                      this.SetMimeContentBody(mc' bodyBuffer);                                      l.Add(mc);                                        headerPointer.Clear();                                      bodyBuffer.Clear();                                      mc = new MimeContent();                                        state = MimeContentParserState.Boundary;                                  }                              }                              break;                              #endregion                          case MimeContentParserState.ChildContent:                              #region                              {                                  var bodyLine = cx.ReadBody(childBoundary' out boundaryResult' out isEndOfBody);                                  bodyBuffer.AddBodyLine(bodyLine);                                  if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true)                                  {                                      if (bodyBuffer.Length > 0)                                      {                                          this.AddToRawDataWithNewline(bodyBuffer.GetBodyArray());                                      }                                        mc.Contents.AddRange(ReadMimeContent(cx' childBoundary));                                        bodyBuffer.Clear();                                        state = MimeContentParserState.Body;                                  }                              }                              break;                              #endregion                          default: throw new InvalidOperationException();                      }
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: this.AddToRawData(new Byte[] { 45' 45 });
Magic Number,HigLabo.Mime,MimeParser,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: this.AddToRawData(new Byte[] { 45' 45 });
Magic Number,HigLabo.Mime,MimeParserDefaultSettings,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParserDefaultSettings.cs,MimeParserDefaultSettings,The following statement contains a magic number: this.BufferSize = 12000;
Magic Number,HigLabo.Mime,MimeParserDefaultSettings,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParserDefaultSettings.cs,MimeParserDefaultSettings,The following statement contains a magic number: this.QuotedPrintableConverterBufferSize = 2000;
Magic Number,HigLabo.Mime,MimeParserDefaultSettings,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\MimeParserDefaultSettings.cs,MimeParserDefaultSettings,The following statement contains a magic number: this.Base64ConverterBufferSize = 20000;
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: data.Length > 1 && data[data.Length - 1] == 10
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: data.Length > 2 && data[data.Length - 2] == 13
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: data.Length > 2 && data[data.Length - 2] == 13
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: data.Length > 2 && data[data.Length - 2] == 13
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,CheckBoundary,The following statement contains a magic number: i < 2
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,CheckBoundary,The following statement contains a magic number: _BoundaryLine.Length == boundaryLength + 2
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: Boolean endWithNewline = lastBytes.Length > 1 && lastBytes[lastBytes.Length - 2] == 13 && lastBytes[lastBytes.Length - 1] == 10;
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: Boolean endWithNewline = lastBytes.Length > 1 && lastBytes[lastBytes.Length - 2] == 13 && lastBytes[lastBytes.Length - 1] == 10;
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: Boolean endWithNewline = lastBytes.Length > 1 && lastBytes[lastBytes.Length - 2] == 13 && lastBytes[lastBytes.Length - 1] == 10;
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: data = new Byte[this.Length - this.HeaderLength - 2];
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: length = lastBytes.Length - 2;
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: return this.Data[0] == 10;
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsOkResponseLine,The following statement contains a magic number: return d[0] == (Byte)'+' &&                  (d[1] == (Byte)'O' || d[1] == (Byte)'o') &&                  (d[2] == (Byte)'K' || d[2] == (Byte)'k');
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsOkResponseLine,The following statement contains a magic number: return d[0] == (Byte)'+' &&                  (d[1] == (Byte)'O' || d[1] == (Byte)'o') &&                  (d[2] == (Byte)'K' || d[2] == (Byte)'k');
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadLine,The following statement contains a magic number: *this._Current != 10
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: *this._Current == 10
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: *this._Current != 10
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: lastOfLine = this._Current - 2;
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: *this._Current != 9 && *this._Current != 32
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: *this._Current != 9 && *this._Current != 32
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: *this._Current != 10
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: var lastOfLine = this._Current - 2;
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: *line_Start == 46
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: var lastOfLine = this._Current - 2;
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: length == boundaryLength || length == boundaryLength + 2
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: *line_Start == 45 && boundaryLength > -1
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,D:\research\architectureSmells\repos\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,CheckBoundary,The following statement contains a magic number: i < 2
